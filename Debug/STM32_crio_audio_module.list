
STM32_crio_audio_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007794  08007794  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007794  08007794  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007794  08007794  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800779c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba8  20000024  080077c0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bcc  080077c0  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e03d  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d3  00000000  00000000  0002e089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00030360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  00030ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e4c  00000000  00000000  00031968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d88  00000000  00000000  000447b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b7ef  00000000  00000000  0005553c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0d2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002828  00000000  00000000  000c0d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007158 	.word	0x08007158

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08007158 	.word	0x08007158

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f001 f84a 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f838 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f90e 	bl	800044c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000230:	f000 f88c 	bl	800034c <MX_SPI2_Init>
  MX_FATFS_Init();
 8000234:	f003 f95e 	bl	80034f4 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8d8 	bl	80003ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Mount SD Card */
  if (f_mount(&fatFs, "", 0) == FR_OK)
 800023c:	4911      	ldr	r1, [pc, #68]	; (8000284 <main+0x64>)
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <main+0x68>)
 8000240:	2200      	movs	r2, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f005 ffca 	bl	80061dc <f_mount>
 8000248:	1e03      	subs	r3, r0, #0
 800024a:	d119      	bne.n	8000280 <main+0x60>
  {
	  /* Open file to write / create file if it doesn't exist */
	  if (f_open(&file, "file1.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800024c:	490f      	ldr	r1, [pc, #60]	; (800028c <main+0x6c>)
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x70>)
 8000250:	220a      	movs	r2, #10
 8000252:	0018      	movs	r0, r3
 8000254:	f006 f812 	bl	800627c <f_open>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d111      	bne.n	8000280 <main+0x60>
	  {
		  /* Writing text */
		  fresult = f_puts("Test file\n", &file);
 800025c:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <main+0x70>)
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0x74>)
 8000260:	0011      	movs	r1, r2
 8000262:	0018      	movs	r0, r3
 8000264:	f006 fe24 	bl	8006eb0 <f_puts>
 8000268:	0003      	movs	r3, r0
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <main+0x78>)
 800026e:	701a      	strb	r2, [r3, #0]
		  /* Close file */
		  fresult = f_close(&file);
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <main+0x70>)
 8000272:	0018      	movs	r0, r3
 8000274:	f006 fda4 	bl	8006dc0 <f_close>
 8000278:	0003      	movs	r3, r0
 800027a:	001a      	movs	r2, r3
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <main+0x78>)
 800027e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000280:	e7fe      	b.n	8000280 <main+0x60>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	08007170 	.word	0x08007170
 8000288:	2000012c 	.word	0x2000012c
 800028c:	08007174 	.word	0x08007174
 8000290:	2000055c 	.word	0x2000055c
 8000294:	08007180 	.word	0x08007180
 8000298:	20000988 	.word	0x20000988

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b097      	sub	sp, #92	; 0x5c
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2428      	movs	r4, #40	; 0x28
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	2330      	movs	r3, #48	; 0x30
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f006 ff4b 	bl	8007148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	2318      	movs	r3, #24
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	0018      	movs	r0, r3
 80002b8:	2310      	movs	r3, #16
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f006 ff43 	bl	8007148 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	0018      	movs	r0, r3
 80002c6:	2314      	movs	r3, #20
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f006 ff3c 	bl	8007148 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fa8b 	bl	8001808 <HAL_RCC_OscConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002f6:	f000 f91d 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	2118      	movs	r1, #24
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2207      	movs	r2, #7
 8000300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2100      	movs	r1, #0
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fd8f 	bl	8001e3c <HAL_RCC_ClockConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000322:	f000 f907 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2201      	movs	r2, #1
 800032a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fec5 	bl	80020c4 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800033e:	f000 f8f9 	bl	8000534 <Error_Handler>
  }
}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b017      	add	sp, #92	; 0x5c
 8000348:	bd90      	pop	{r4, r7, pc}
	...

0800034c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000352:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <MX_SPI2_Init+0x94>)
 8000354:	69da      	ldr	r2, [r3, #28]
 8000356:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <MX_SPI2_Init+0x94>)
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	01c9      	lsls	r1, r1, #7
 800035c:	430a      	orrs	r2, r1
 800035e:	61da      	str	r2, [r3, #28]
 8000360:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <MX_SPI2_Init+0x94>)
 8000362:	69da      	ldr	r2, [r3, #28]
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	01db      	lsls	r3, r3, #7
 8000368:	4013      	ands	r3, r2
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_SPI2_Init+0x98>)
 8000370:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <MX_SPI2_Init+0x9c>)
 8000372:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_SPI2_Init+0x98>)
 8000376:	2282      	movs	r2, #130	; 0x82
 8000378:	0052      	lsls	r2, r2, #1
 800037a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800037c:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <MX_SPI2_Init+0x98>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_SPI2_Init+0x98>)
 8000384:	22e0      	movs	r2, #224	; 0xe0
 8000386:	00d2      	lsls	r2, r2, #3
 8000388:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_SPI2_Init+0x98>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_SPI2_Init+0x98>)
 8000392:	2200      	movs	r2, #0
 8000394:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_SPI2_Init+0x98>)
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003b8:	2207      	movs	r2, #7
 80003ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003be:	2200      	movs	r2, #0
 80003c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_SPI2_Init+0x98>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 ff58 	bl	8002280 <HAL_SPI_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_SPI2_Init+0x8c>
  {
    Error_Handler();
 80003d4:	f000 f8ae 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b002      	add	sp, #8
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	20000040 	.word	0x20000040
 80003e8:	40003800 	.word	0x40003800

080003ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_USART1_UART_Init+0x58>)
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <MX_USART1_UART_Init+0x5c>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80003f6:	4b13      	ldr	r3, [pc, #76]	; (8000444 <MX_USART1_UART_Init+0x58>)
 80003f8:	2296      	movs	r2, #150	; 0x96
 80003fa:	0212      	lsls	r2, r2, #8
 80003fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000430:	0018      	movs	r0, r3
 8000432:	f002 fca1 	bl	8002d78 <HAL_UART_Init>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043a:	f000 f87b 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000a4 	.word	0x200000a4
 8000448:	40013800 	.word	0x40013800

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b089      	sub	sp, #36	; 0x24
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	240c      	movs	r4, #12
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	2314      	movs	r3, #20
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f006 fe73 	bl	8007148 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b31      	ldr	r3, [pc, #196]	; (8000528 <MX_GPIO_Init+0xdc>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <MX_GPIO_Init+0xdc>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	02c9      	lsls	r1, r1, #11
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b2d      	ldr	r3, [pc, #180]	; (8000528 <MX_GPIO_Init+0xdc>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	02db      	lsls	r3, r3, #11
 8000478:	4013      	ands	r3, r2
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <MX_GPIO_Init+0xdc>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <MX_GPIO_Init+0xdc>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0309      	lsls	r1, r1, #12
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <MX_GPIO_Init+0xdc>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	031b      	lsls	r3, r3, #12
 8000494:	4013      	ands	r3, r2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b23      	ldr	r3, [pc, #140]	; (8000528 <MX_GPIO_Init+0xdc>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b22      	ldr	r3, [pc, #136]	; (8000528 <MX_GPIO_Init+0xdc>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0289      	lsls	r1, r1, #10
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_GPIO_Init+0xdc>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	029b      	lsls	r3, r3, #10
 80004b0:	4013      	ands	r3, r2
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	015b      	lsls	r3, r3, #5
 80004ba:	481c      	ldr	r0, [pc, #112]	; (800052c <MX_GPIO_Init+0xe0>)
 80004bc:	2201      	movs	r2, #1
 80004be:	0019      	movs	r1, r3
 80004c0:	f001 f984 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4819      	ldr	r0, [pc, #100]	; (8000530 <MX_GPIO_Init+0xe4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 f97d 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	0152      	lsls	r2, r2, #5
 80004d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	4a0f      	ldr	r2, [pc, #60]	; (800052c <MX_GPIO_Init+0xe0>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f000 fffa 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0052      	lsls	r2, r2, #1
 8000500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2201      	movs	r2, #1
 8000506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000514:	187b      	adds	r3, r7, r1
 8000516:	4a06      	ldr	r2, [pc, #24]	; (8000530 <MX_GPIO_Init+0xe4>)
 8000518:	0019      	movs	r1, r3
 800051a:	0010      	movs	r0, r2
 800051c:	f000 ffe6 	bl	80014ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b009      	add	sp, #36	; 0x24
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	48000400 	.word	0x48000400
 8000530:	48000800 	.word	0x48000800

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <SELECT>:
static uint8_t CardType;                                /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power Condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	015b      	lsls	r3, r3, #5
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <SELECT+0x18>)
 800054a:	2200      	movs	r2, #0
 800054c:	0019      	movs	r1, r3
 800054e:	f001 f93d 	bl	80017cc <HAL_GPIO_WritePin>
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48000400 	.word	0x48000400

0800055c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	015b      	lsls	r3, r3, #5
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <DESELECT+0x18>)
 8000566:	2201      	movs	r2, #1
 8000568:	0019      	movs	r1, r3
 800056a:	f001 f92f 	bl	80017cc <HAL_GPIO_WritePin>
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	48000400 	.word	0x48000400

08000578 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	701a      	strb	r2, [r3, #0]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <SPI_TxByte+0x34>)
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fa73 	bl	8002a74 <HAL_SPI_GetState>
 800058e:	0003      	movs	r3, r0
 8000590:	2b01      	cmp	r3, #1
 8000592:	d1f8      	bne.n	8000586 <SPI_TxByte+0xe>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000594:	23fa      	movs	r3, #250	; 0xfa
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <SPI_TxByte+0x34>)
 800059c:	2201      	movs	r2, #1
 800059e:	f001 ff27 	bl	80023f0 <HAL_SPI_Transmit>
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000040 	.word	0x20000040

080005b0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	22ff      	movs	r2, #255	; 0xff
 80005ba:	701a      	strb	r2, [r3, #0]
  data = 0;
 80005bc:	1dbb      	adds	r3, r7, #6
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <SPI_RxByte+0x40>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 fa54 	bl	8002a74 <HAL_SPI_GetState>
 80005cc:	0003      	movs	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1f8      	bne.n	80005c4 <SPI_RxByte+0x14>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80005d2:	1dba      	adds	r2, r7, #6
 80005d4:	1df9      	adds	r1, r7, #7
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <SPI_RxByte+0x40>)
 80005d8:	23fa      	movs	r3, #250	; 0xfa
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	f002 f866 	bl	80026b0 <HAL_SPI_TransmitReceive>

  return data;
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	781b      	ldrb	r3, [r3, #0]
}
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000040 	.word	0x20000040

080005f4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80005fc:	f7ff ffd8 	bl	80005b0 <SPI_RxByte>
 8000600:	0003      	movs	r3, r0
 8000602:	001a      	movs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	701a      	strb	r2, [r3, #0]
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b002      	add	sp, #8
 800060e:	bd80      	pop	{r7, pc}

08000610 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <SD_ReadyWait+0x38>)
 8000618:	2232      	movs	r2, #50	; 0x32
 800061a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800061c:	f7ff ffc8 	bl	80005b0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000620:	1dfc      	adds	r4, r7, #7
 8000622:	f7ff ffc5 	bl	80005b0 <SPI_RxByte>
 8000626:	0003      	movs	r3, r0
 8000628:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2bff      	cmp	r3, #255	; 0xff
 8000630:	d004      	beq.n	800063c <SD_ReadyWait+0x2c>
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <SD_ReadyWait+0x38>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f1      	bne.n	8000620 <SD_ReadyWait+0x10>

  return res;
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b003      	add	sp, #12
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	20000990 	.word	0x20000990

0800064c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SD_PowerOn+0xa0>)
 8000654:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000656:	f7ff ff81 	bl	800055c <DESELECT>

  for(int i = 0; i < 10; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	e005      	b.n	800066c <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8000660:	20ff      	movs	r0, #255	; 0xff
 8000662:	f7ff ff89 	bl	8000578 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2b09      	cmp	r3, #9
 8000670:	ddf6      	ble.n	8000660 <SD_PowerOn+0x14>
  }

  /* SPI Chips Select */
  SELECT();
 8000672:	f7ff ff65 	bl	8000540 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	701a      	strb	r2, [r3, #0]
  cmd_arg[1] = 0;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	705a      	strb	r2, [r3, #1]
  cmd_arg[2] = 0;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	709a      	strb	r2, [r3, #2]
  cmd_arg[3] = 0;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	70da      	strb	r2, [r3, #3]
  cmd_arg[4] = 0;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]
  cmd_arg[5] = 0x95;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2295      	movs	r2, #149	; 0x95
 8000698:	715a      	strb	r2, [r3, #5]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e009      	b.n	80006b4 <SD_PowerOn+0x68>
  {
    SPI_TxByte(cmd_arg[i]);
 80006a0:	1d3a      	adds	r2, r7, #4
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff ff65 	bl	8000578 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	ddf2      	ble.n	80006a0 <SD_PowerOn+0x54>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80006ba:	e002      	b.n	80006c2 <SD_PowerOn+0x76>
  {
    Count--;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	3b01      	subs	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80006c2:	f7ff ff75 	bl	80005b0 <SPI_RxByte>
 80006c6:	0003      	movs	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d002      	beq.n	80006d2 <SD_PowerOn+0x86>
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1f4      	bne.n	80006bc <SD_PowerOn+0x70>
  }

  DESELECT();
 80006d2:	f7ff ff43 	bl	800055c <DESELECT>
  SPI_TxByte(0XFF);
 80006d6:	20ff      	movs	r0, #255	; 0xff
 80006d8:	f7ff ff4e 	bl	8000578 <SPI_TxByte>

  PowerFlag = 1;
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <SD_PowerOn+0xa4>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b006      	add	sp, #24
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	00001fff 	.word	0x00001fff
 80006f0:	2000098a 	.word	0x2000098a

080006f4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <SD_PowerOff+0x10>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000098a 	.word	0x2000098a

08000708 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <SD_CheckPower+0x10>)
 800070e:	781b      	ldrb	r3, [r3, #0]
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	2000098a 	.word	0x2000098a

0800071c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SD_RxDataBlock+0x74>)
 8000728:	220a      	movs	r2, #10
 800072a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800072c:	250f      	movs	r5, #15
 800072e:	197c      	adds	r4, r7, r5
 8000730:	f7ff ff3e 	bl	80005b0 <SPI_RxByte>
 8000734:	0003      	movs	r3, r0
 8000736:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8000738:	197b      	adds	r3, r7, r5
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2bff      	cmp	r3, #255	; 0xff
 800073e:	d104      	bne.n	800074a <SD_RxDataBlock+0x2e>
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <SD_RxDataBlock+0x74>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f0      	bne.n	800072c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800074a:	230f      	movs	r3, #15
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2bfe      	cmp	r3, #254	; 0xfe
 8000752:	d001      	beq.n	8000758 <SD_RxDataBlock+0x3c>
    return FALSE;
 8000754:	2300      	movs	r3, #0
 8000756:	e016      	b.n	8000786 <SD_RxDataBlock+0x6a>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff48 	bl	80005f4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ff42 	bl	80005f4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	3b02      	subs	r3, #2
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1ed      	bne.n	8000758 <SD_RxDataBlock+0x3c>

  SPI_RxByte(); /* CRC 무시 */
 800077c:	f7ff ff18 	bl	80005b0 <SPI_RxByte>
  SPI_RxByte();
 8000780:	f7ff ff16 	bl	80005b0 <SPI_RxByte>

  return TRUE;
 8000784:	2301      	movs	r3, #1
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bdb0      	pop	{r4, r5, r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	2000098f 	.word	0x2000098f

08000794 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	000a      	movs	r2, r1
 800079e:	1cfb      	adds	r3, r7, #3
 80007a0:	701a      	strb	r2, [r3, #0]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007a2:	230d      	movs	r3, #13
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007aa:	f7ff ff31 	bl	8000610 <SD_ReadyWait>
 80007ae:	0003      	movs	r3, r0
 80007b0:	2bff      	cmp	r3, #255	; 0xff
 80007b2:	d001      	beq.n	80007b8 <SD_TxDataBlock+0x24>
    return FALSE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	e051      	b.n	800085c <SD_TxDataBlock+0xc8>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007b8:	1cfb      	adds	r3, r7, #3
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fedb 	bl	8000578 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007c2:	1cfb      	adds	r3, r7, #3
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2bfd      	cmp	r3, #253	; 0xfd
 80007c8:	d03e      	beq.n	8000848 <SD_TxDataBlock+0xb4>
  {
    wc = 0;
 80007ca:	230e      	movs	r3, #14
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff fecc 	bl	8000578 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fec5 	bl	8000578 <SPI_TxByte>
    } while (--wc);
 80007ee:	210e      	movs	r1, #14
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	187a      	adds	r2, r7, r1
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	3a01      	subs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1e7      	bne.n	80007d2 <SD_TxDataBlock+0x3e>

    SPI_RxByte();       /* CRC 무시 */
 8000802:	f7ff fed5 	bl	80005b0 <SPI_RxByte>
    SPI_RxByte();
 8000806:	f7ff fed3 	bl	80005b0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 800080a:	e011      	b.n	8000830 <SD_TxDataBlock+0x9c>
    {
      resp = SPI_RxByte();
 800080c:	250f      	movs	r5, #15
 800080e:	197c      	adds	r4, r7, r5
 8000810:	f7ff fece 	bl	80005b0 <SPI_RxByte>
 8000814:	0003      	movs	r3, r0
 8000816:	7023      	strb	r3, [r4, #0]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000818:	197b      	adds	r3, r7, r5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	221f      	movs	r2, #31
 800081e:	4013      	ands	r3, r2
 8000820:	2b05      	cmp	r3, #5
 8000822:	d00b      	beq.n	800083c <SD_TxDataBlock+0xa8>
        break;

      i++;
 8000824:	210d      	movs	r1, #13
 8000826:	187b      	adds	r3, r7, r1
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	187b      	adds	r3, r7, r1
 800082c:	3201      	adds	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8000830:	230d      	movs	r3, #13
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b40      	cmp	r3, #64	; 0x40
 8000838:	d9e8      	bls.n	800080c <SD_TxDataBlock+0x78>
 800083a:	e000      	b.n	800083e <SD_TxDataBlock+0xaa>
        break;
 800083c:	46c0      	nop			; (mov r8, r8)
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	f7ff feb6 	bl	80005b0 <SPI_RxByte>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d0fb      	beq.n	8000840 <SD_TxDataBlock+0xac>
  }

  if ((resp & 0x1F) == 0x05)
 8000848:	230f      	movs	r3, #15
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	221f      	movs	r2, #31
 8000850:	4013      	ands	r3, r2
 8000852:	2b05      	cmp	r3, #5
 8000854:	d101      	bne.n	800085a <SD_TxDataBlock+0xc6>
    return TRUE;
 8000856:	2301      	movs	r3, #1
 8000858:	e000      	b.n	800085c <SD_TxDataBlock+0xc8>
  else
    return FALSE;
 800085a:	2300      	movs	r3, #0
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b004      	add	sp, #16
 8000862:	bdb0      	pop	{r4, r5, r7, pc}

08000864 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000872:	f7ff fecd 	bl	8000610 <SD_ReadyWait>
 8000876:	0003      	movs	r3, r0
 8000878:	2bff      	cmp	r3, #255	; 0xff
 800087a:	d001      	beq.n	8000880 <SD_SendCmd+0x1c>
    return 0xFF;
 800087c:	23ff      	movs	r3, #255	; 0xff
 800087e:	e056      	b.n	800092e <SD_SendCmd+0xca>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff fe77 	bl	8000578 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	0e1b      	lsrs	r3, r3, #24
 800088e:	b2db      	uxtb	r3, r3
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff fe71 	bl	8000578 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	0c1b      	lsrs	r3, r3, #16
 800089a:	b2db      	uxtb	r3, r3
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fe6b 	bl	8000578 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff fe65 	bl	8000578 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff fe60 	bl	8000578 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80008b8:	210f      	movs	r1, #15
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0)
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b40      	cmp	r3, #64	; 0x40
 80008c6:	d102      	bne.n	80008ce <SD_SendCmd+0x6a>
    crc = 0x95; /* CRC for CMD0(0) */
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2295      	movs	r2, #149	; 0x95
 80008cc:	701a      	strb	r2, [r3, #0]

  if (cmd == CMD8)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b48      	cmp	r3, #72	; 0x48
 80008d4:	d103      	bne.n	80008de <SD_SendCmd+0x7a>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008d6:	230f      	movs	r3, #15
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2287      	movs	r2, #135	; 0x87
 80008dc:	701a      	strb	r2, [r3, #0]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008de:	230f      	movs	r3, #15
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff fe47 	bl	8000578 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b4c      	cmp	r3, #76	; 0x4c
 80008f0:	d101      	bne.n	80008f6 <SD_SendCmd+0x92>
    SPI_RxByte();
 80008f2:	f7ff fe5d 	bl	80005b0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008f6:	230e      	movs	r3, #14
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	220a      	movs	r2, #10
 80008fc:	701a      	strb	r2, [r3, #0]
  do
  {
    res = SPI_RxByte();
 80008fe:	250d      	movs	r5, #13
 8000900:	197c      	adds	r4, r7, r5
 8000902:	f7ff fe55 	bl	80005b0 <SPI_RxByte>
 8000906:	0003      	movs	r3, r0
 8000908:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 800090a:	197b      	adds	r3, r7, r5
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	da09      	bge.n	8000928 <SD_SendCmd+0xc4>
 8000914:	210e      	movs	r1, #14
 8000916:	187b      	adds	r3, r7, r1
 8000918:	187a      	adds	r2, r7, r1
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	3a01      	subs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	187b      	adds	r3, r7, r1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1ea      	bne.n	80008fe <SD_SendCmd+0x9a>

  return res;
 8000928:	230d      	movs	r3, #13
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	781b      	ldrb	r3, [r3, #0]
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000938 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	0002      	movs	r2, r0
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SD_disk_initialize+0x18>
    return STA_NOINIT;
 800094c:	2301      	movs	r3, #1
 800094e:	e0f5      	b.n	8000b3c <SD_disk_initialize+0x204>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000950:	4b7c      	ldr	r3, [pc, #496]	; (8000b44 <SD_disk_initialize+0x20c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	001a      	movs	r2, r3
 8000958:	2302      	movs	r3, #2
 800095a:	4013      	ands	r3, r2
 800095c:	d003      	beq.n	8000966 <SD_disk_initialize+0x2e>
    return Stat;
 800095e:	4b79      	ldr	r3, [pc, #484]	; (8000b44 <SD_disk_initialize+0x20c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	e0ea      	b.n	8000b3c <SD_disk_initialize+0x204>

  /* SD카드 Power On */
  SD_PowerOn();
 8000966:	f7ff fe71 	bl	800064c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800096a:	f7ff fde9 	bl	8000540 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800096e:	230e      	movs	r3, #14
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000976:	2100      	movs	r1, #0
 8000978:	2040      	movs	r0, #64	; 0x40
 800097a:	f7ff ff73 	bl	8000864 <SD_SendCmd>
 800097e:	0003      	movs	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d000      	beq.n	8000986 <SD_disk_initialize+0x4e>
 8000984:	e0bf      	b.n	8000b06 <SD_disk_initialize+0x1ce>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000986:	4b70      	ldr	r3, [pc, #448]	; (8000b48 <SD_disk_initialize+0x210>)
 8000988:	2264      	movs	r2, #100	; 0x64
 800098a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800098c:	23d5      	movs	r3, #213	; 0xd5
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	0019      	movs	r1, r3
 8000992:	2048      	movs	r0, #72	; 0x48
 8000994:	f7ff ff66 	bl	8000864 <SD_SendCmd>
 8000998:	0003      	movs	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d000      	beq.n	80009a0 <SD_disk_initialize+0x68>
 800099e:	e06d      	b.n	8000a7c <SD_disk_initialize+0x144>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80009a0:	230f      	movs	r3, #15
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e00e      	b.n	80009c8 <SD_disk_initialize+0x90>
      {
        ocr[n] = SPI_RxByte();
 80009aa:	250f      	movs	r5, #15
 80009ac:	197b      	adds	r3, r7, r5
 80009ae:	781c      	ldrb	r4, [r3, #0]
 80009b0:	f7ff fdfe 	bl	80005b0 <SPI_RxByte>
 80009b4:	0003      	movs	r3, r0
 80009b6:	001a      	movs	r2, r3
 80009b8:	2308      	movs	r3, #8
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 80009be:	197b      	adds	r3, r7, r5
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	197b      	adds	r3, r7, r5
 80009c4:	3201      	adds	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	230f      	movs	r3, #15
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d9eb      	bls.n	80009aa <SD_disk_initialize+0x72>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d2:	2208      	movs	r2, #8
 80009d4:	18bb      	adds	r3, r7, r2
 80009d6:	789b      	ldrb	r3, [r3, #2]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d000      	beq.n	80009de <SD_disk_initialize+0xa6>
 80009dc:	e093      	b.n	8000b06 <SD_disk_initialize+0x1ce>
 80009de:	18bb      	adds	r3, r7, r2
 80009e0:	78db      	ldrb	r3, [r3, #3]
 80009e2:	2baa      	cmp	r3, #170	; 0xaa
 80009e4:	d000      	beq.n	80009e8 <SD_disk_initialize+0xb0>
 80009e6:	e08e      	b.n	8000b06 <SD_disk_initialize+0x1ce>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009e8:	2100      	movs	r1, #0
 80009ea:	2077      	movs	r0, #119	; 0x77
 80009ec:	f7ff ff3a 	bl	8000864 <SD_SendCmd>
 80009f0:	0003      	movs	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d807      	bhi.n	8000a06 <SD_disk_initialize+0xce>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0019      	movs	r1, r3
 80009fc:	2069      	movs	r0, #105	; 0x69
 80009fe:	f7ff ff31 	bl	8000864 <SD_SendCmd>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d005      	beq.n	8000a12 <SD_disk_initialize+0xda>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000a06:	4b50      	ldr	r3, [pc, #320]	; (8000b48 <SD_disk_initialize+0x210>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1eb      	bne.n	80009e8 <SD_disk_initialize+0xb0>
 8000a10:	e000      	b.n	8000a14 <SD_disk_initialize+0xdc>
            break; /* ACMD41 with HCS bit */
 8000a12:	46c0      	nop			; (mov r8, r8)

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a14:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <SD_disk_initialize+0x210>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <SD_disk_initialize+0xe8>
 8000a1e:	e072      	b.n	8000b06 <SD_disk_initialize+0x1ce>
 8000a20:	2100      	movs	r1, #0
 8000a22:	207a      	movs	r0, #122	; 0x7a
 8000a24:	f7ff ff1e 	bl	8000864 <SD_SendCmd>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d000      	beq.n	8000a2e <SD_disk_initialize+0xf6>
 8000a2c:	e06b      	b.n	8000b06 <SD_disk_initialize+0x1ce>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a2e:	230f      	movs	r3, #15
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	e00e      	b.n	8000a56 <SD_disk_initialize+0x11e>
          {
            ocr[n] = SPI_RxByte();
 8000a38:	250f      	movs	r5, #15
 8000a3a:	197b      	adds	r3, r7, r5
 8000a3c:	781c      	ldrb	r4, [r3, #0]
 8000a3e:	f7ff fdb7 	bl	80005b0 <SPI_RxByte>
 8000a42:	0003      	movs	r3, r0
 8000a44:	001a      	movs	r2, r3
 8000a46:	2308      	movs	r3, #8
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 8000a4c:	197b      	adds	r3, r7, r5
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	197b      	adds	r3, r7, r5
 8000a52:	3201      	adds	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	230f      	movs	r3, #15
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d9eb      	bls.n	8000a38 <SD_disk_initialize+0x100>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a60:	2308      	movs	r3, #8
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	001a      	movs	r2, r3
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d001      	beq.n	8000a72 <SD_disk_initialize+0x13a>
 8000a6e:	2206      	movs	r2, #6
 8000a70:	e000      	b.n	8000a74 <SD_disk_initialize+0x13c>
 8000a72:	2202      	movs	r2, #2
 8000a74:	230e      	movs	r3, #14
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e044      	b.n	8000b06 <SD_disk_initialize+0x1ce>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2077      	movs	r0, #119	; 0x77
 8000a80:	f7ff fef0 	bl	8000864 <SD_SendCmd>
 8000a84:	0003      	movs	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d808      	bhi.n	8000a9c <SD_disk_initialize+0x164>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2069      	movs	r0, #105	; 0x69
 8000a8e:	f7ff fee9 	bl	8000864 <SD_SendCmd>
 8000a92:	0003      	movs	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d801      	bhi.n	8000a9c <SD_disk_initialize+0x164>
 8000a98:	2202      	movs	r2, #2
 8000a9a:	e000      	b.n	8000a9e <SD_disk_initialize+0x166>
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	230e      	movs	r3, #14
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	701a      	strb	r2, [r3, #0]

      do {
        if (type == 2)
 8000aa4:	230e      	movs	r3, #14
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d10d      	bne.n	8000aca <SD_disk_initialize+0x192>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2077      	movs	r0, #119	; 0x77
 8000ab2:	f7ff fed7 	bl	8000864 <SD_SendCmd>
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d80c      	bhi.n	8000ad6 <SD_disk_initialize+0x19e>
 8000abc:	2100      	movs	r1, #0
 8000abe:	2069      	movs	r0, #105	; 0x69
 8000ac0:	f7ff fed0 	bl	8000864 <SD_SendCmd>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d106      	bne.n	8000ad6 <SD_disk_initialize+0x19e>
            break; /* ACMD41 */
 8000ac8:	e00c      	b.n	8000ae4 <SD_disk_initialize+0x1ac>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000aca:	2100      	movs	r1, #0
 8000acc:	2041      	movs	r0, #65	; 0x41
 8000ace:	f7ff fec9 	bl	8000864 <SD_SendCmd>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d005      	beq.n	8000ae2 <SD_disk_initialize+0x1aa>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <SD_disk_initialize+0x210>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1e1      	bne.n	8000aa4 <SD_disk_initialize+0x16c>
 8000ae0:	e000      	b.n	8000ae4 <SD_disk_initialize+0x1ac>
            break; /* CMD1 */
 8000ae2:	46c0      	nop			; (mov r8, r8)

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <SD_disk_initialize+0x210>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d007      	beq.n	8000afe <SD_disk_initialize+0x1c6>
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	0019      	movs	r1, r3
 8000af4:	2050      	movs	r0, #80	; 0x50
 8000af6:	f7ff feb5 	bl	8000864 <SD_SendCmd>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d003      	beq.n	8000b06 <SD_disk_initialize+0x1ce>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000afe:	230e      	movs	r3, #14
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  CardType = type;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <SD_disk_initialize+0x214>)
 8000b08:	240e      	movs	r4, #14
 8000b0a:	193a      	adds	r2, r7, r4
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]

  DESELECT();
 8000b10:	f7ff fd24 	bl	800055c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000b14:	f7ff fd4c 	bl	80005b0 <SPI_RxByte>

  if (type)
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d008      	beq.n	8000b32 <SD_disk_initialize+0x1fa>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <SD_disk_initialize+0x20c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2201      	movs	r2, #1
 8000b28:	4393      	bics	r3, r2
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SD_disk_initialize+0x20c>)
 8000b2e:	701a      	strb	r2, [r3, #0]
 8000b30:	e001      	b.n	8000b36 <SD_disk_initialize+0x1fe>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000b32:	f7ff fddf 	bl	80006f4 <SD_PowerOff>
  }

  return Stat;
 8000b36:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <SD_disk_initialize+0x20c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b004      	add	sp, #16
 8000b42:	bdb0      	pop	{r4, r5, r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	2000098f 	.word	0x2000098f
 8000b4c:	20000989 	.word	0x20000989

08000b50 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	701a      	strb	r2, [r3, #0]
  if (drv)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SD_disk_status+0x18>
    return STA_NOINIT;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e002      	b.n	8000b6e <SD_disk_status+0x1e>

  return Stat;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <SD_disk_status+0x28>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	20000000 	.word	0x20000000

08000b7c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	210f      	movs	r1, #15
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	1c02      	adds	r2, r0, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <SD_disk_read+0x22>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <SD_disk_read+0x26>
    return RES_PARERR;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	e053      	b.n	8000c4a <SD_disk_read+0xce>

  if (Stat & STA_NOINIT)
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <SD_disk_read+0xd8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2301      	movs	r3, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	d001      	beq.n	8000bb4 <SD_disk_read+0x38>
    return RES_NOTRDY;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e04a      	b.n	8000c4a <SD_disk_read+0xce>

  if (!(CardType & 4))
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <SD_disk_read+0xdc>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2304      	movs	r3, #4
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d102      	bne.n	8000bc6 <SD_disk_read+0x4a>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	025b      	lsls	r3, r3, #9
 8000bc4:	607b      	str	r3, [r7, #4]

  SELECT();
 8000bc6:	f7ff fcbb 	bl	8000540 <SELECT>

  if (count == 1)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d112      	bne.n	8000bf6 <SD_disk_read+0x7a>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	2051      	movs	r0, #81	; 0x51
 8000bd6:	f7ff fe45 	bl	8000864 <SD_SendCmd>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d12d      	bne.n	8000c3a <SD_disk_read+0xbe>
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	009a      	lsls	r2, r3, #2
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0011      	movs	r1, r2
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fd98 	bl	800071c <SD_RxDataBlock>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d024      	beq.n	8000c3a <SD_disk_read+0xbe>
      count = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	e021      	b.n	8000c3a <SD_disk_read+0xbe>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	2052      	movs	r0, #82	; 0x52
 8000bfc:	f7ff fe32 	bl	8000864 <SD_SendCmd>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d11a      	bne.n	8000c3a <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	009a      	lsls	r2, r3, #2
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fd85 	bl	800071c <SD_RxDataBlock>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d00c      	beq.n	8000c30 <SD_disk_read+0xb4>
          break;

        buff += 512;
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	4463      	add	r3, ip
 8000c20:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1ea      	bne.n	8000c04 <SD_disk_read+0x88>
 8000c2e:	e000      	b.n	8000c32 <SD_disk_read+0xb6>
          break;
 8000c30:	46c0      	nop			; (mov r8, r8)

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	204c      	movs	r0, #76	; 0x4c
 8000c36:	f7ff fe15 	bl	8000864 <SD_SendCmd>
    }
  }

  DESELECT();
 8000c3a:	f7ff fc8f 	bl	800055c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000c3e:	f7ff fcb7 	bl	80005b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	4193      	sbcs	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000989 	.word	0x20000989

08000c5c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	210f      	movs	r1, #15
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	1c02      	adds	r2, r0, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <SD_disk_write+0x22>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <SD_disk_write+0x26>
    return RES_PARERR;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e06b      	b.n	8000d5a <SD_disk_write+0xfe>

  if (Stat & STA_NOINIT)
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <SD_disk_write+0x108>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	d001      	beq.n	8000c94 <SD_disk_write+0x38>
    return RES_NOTRDY;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e062      	b.n	8000d5a <SD_disk_write+0xfe>

  if (Stat & STA_PROTECT)
 8000c94:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <SD_disk_write+0x108>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d001      	beq.n	8000ca6 <SD_disk_write+0x4a>
    return RES_WRPRT;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e059      	b.n	8000d5a <SD_disk_write+0xfe>

  if (!(CardType & 4))
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <SD_disk_write+0x10c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	001a      	movs	r2, r3
 8000cac:	2304      	movs	r3, #4
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d102      	bne.n	8000cb8 <SD_disk_write+0x5c>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	607b      	str	r3, [r7, #4]

  SELECT();
 8000cb8:	f7ff fc42 	bl	8000540 <SELECT>

  if (count == 1)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d110      	bne.n	8000ce4 <SD_disk_write+0x88>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0019      	movs	r1, r3
 8000cc6:	2058      	movs	r0, #88	; 0x58
 8000cc8:	f7ff fdcc 	bl	8000864 <SD_SendCmd>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d13c      	bne.n	8000d4a <SD_disk_write+0xee>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	21fe      	movs	r1, #254	; 0xfe
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff fd5d 	bl	8000794 <SD_TxDataBlock>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d035      	beq.n	8000d4a <SD_disk_write+0xee>
      count = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	e032      	b.n	8000d4a <SD_disk_write+0xee>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <SD_disk_write+0x10c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2302      	movs	r3, #2
 8000cec:	4013      	ands	r3, r2
 8000cee:	d008      	beq.n	8000d02 <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2077      	movs	r0, #119	; 0x77
 8000cf4:	f7ff fdb6 	bl	8000864 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	2057      	movs	r0, #87	; 0x57
 8000cfe:	f7ff fdb1 	bl	8000864 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	0019      	movs	r1, r3
 8000d06:	2059      	movs	r0, #89	; 0x59
 8000d08:	f7ff fdac 	bl	8000864 <SD_SendCmd>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d11c      	bne.n	8000d4a <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	21fc      	movs	r1, #252	; 0xfc
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff fd3d 	bl	8000794 <SD_TxDataBlock>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d00c      	beq.n	8000d38 <SD_disk_write+0xdc>
          break;

        buff += 512;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4694      	mov	ip, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1ec      	bne.n	8000d10 <SD_disk_write+0xb4>
 8000d36:	e000      	b.n	8000d3a <SD_disk_write+0xde>
          break;
 8000d38:	46c0      	nop			; (mov r8, r8)

      if(!SD_TxDataBlock(0, 0xFD))
 8000d3a:	21fd      	movs	r1, #253	; 0xfd
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fd29 	bl	8000794 <SD_TxDataBlock>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d101      	bne.n	8000d4a <SD_disk_write+0xee>
      {
        count = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000d4a:	f7ff fc07 	bl	800055c <DESELECT>
  SPI_RxByte();
 8000d4e:	f7ff fc2f 	bl	80005b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	4193      	sbcs	r3, r2
 8000d58:	b2db      	uxtb	r3, r3
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000989 	.word	0x20000989

08000d6c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b08b      	sub	sp, #44	; 0x2c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	603a      	str	r2, [r7, #0]
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	1c02      	adds	r2, r0, #0
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	1dbb      	adds	r3, r7, #6
 8000d7c:	1c0a      	adds	r2, r1, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SD_disk_ioctl+0x24>
    return RES_PARERR;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	e11f      	b.n	8000fd0 <SD_disk_ioctl+0x264>

  res = RES_ERROR;
 8000d90:	2327      	movs	r3, #39	; 0x27
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]

  if (ctrl == CTRL_POWER)
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	d12b      	bne.n	8000df8 <SD_disk_ioctl+0x8c>
  {
    switch (*ptr)
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d017      	beq.n	8000dd8 <SD_disk_ioctl+0x6c>
 8000da8:	dc21      	bgt.n	8000dee <SD_disk_ioctl+0x82>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <SD_disk_ioctl+0x48>
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d00b      	beq.n	8000dca <SD_disk_ioctl+0x5e>
 8000db2:	e01c      	b.n	8000dee <SD_disk_ioctl+0x82>
    {
    case 0:
      if (SD_CheckPower())
 8000db4:	f7ff fca8 	bl	8000708 <SD_CheckPower>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <SD_disk_ioctl+0x54>
        SD_PowerOff();          /* Power Off */
 8000dbc:	f7ff fc9a 	bl	80006f4 <SD_PowerOff>
      res = RES_OK;
 8000dc0:	2327      	movs	r3, #39	; 0x27
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
      break;
 8000dc8:	e0ff      	b.n	8000fca <SD_disk_ioctl+0x25e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000dca:	f7ff fc3f 	bl	800064c <SD_PowerOn>
      res = RES_OK;
 8000dce:	2327      	movs	r3, #39	; 0x27
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
      break;
 8000dd6:	e0f8      	b.n	8000fca <SD_disk_ioctl+0x25e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	1c5c      	adds	r4, r3, #1
 8000ddc:	f7ff fc94 	bl	8000708 <SD_CheckPower>
 8000de0:	0003      	movs	r3, r0
 8000de2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000de4:	2327      	movs	r3, #39	; 0x27
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
      break;
 8000dec:	e0ed      	b.n	8000fca <SD_disk_ioctl+0x25e>
    default:
      res = RES_PARERR;
 8000dee:	2327      	movs	r3, #39	; 0x27
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	2204      	movs	r2, #4
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	e0e8      	b.n	8000fca <SD_disk_ioctl+0x25e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000df8:	4b77      	ldr	r3, [pc, #476]	; (8000fd8 <SD_disk_ioctl+0x26c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2301      	movs	r3, #1
 8000e02:	4013      	ands	r3, r2
 8000e04:	d001      	beq.n	8000e0a <SD_disk_ioctl+0x9e>
      return RES_NOTRDY;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e0e2      	b.n	8000fd0 <SD_disk_ioctl+0x264>

    SELECT();
 8000e0a:	f7ff fb99 	bl	8000540 <SELECT>

    switch (ctrl)
 8000e0e:	1dbb      	adds	r3, r7, #6
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b0d      	cmp	r3, #13
 8000e14:	d900      	bls.n	8000e18 <SD_disk_ioctl+0xac>
 8000e16:	e0c8      	b.n	8000faa <SD_disk_ioctl+0x23e>
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <SD_disk_ioctl+0x270>)
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e22:	2100      	movs	r1, #0
 8000e24:	2049      	movs	r0, #73	; 0x49
 8000e26:	f7ff fd1d 	bl	8000864 <SD_SendCmd>
 8000e2a:	1e03      	subs	r3, r0, #0
 8000e2c:	d000      	beq.n	8000e30 <SD_disk_ioctl+0xc4>
 8000e2e:	e0c1      	b.n	8000fb4 <SD_disk_ioctl+0x248>
 8000e30:	240c      	movs	r4, #12
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2110      	movs	r1, #16
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff fc70 	bl	800071c <SD_RxDataBlock>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d100      	bne.n	8000e42 <SD_disk_ioctl+0xd6>
 8000e40:	e0b8      	b.n	8000fb4 <SD_disk_ioctl+0x248>
      {
        if ((csd[0] >> 6) == 1)
 8000e42:	0022      	movs	r2, r4
 8000e44:	18bb      	adds	r3, r7, r2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	099b      	lsrs	r3, r3, #6
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d114      	bne.n	8000e7a <SD_disk_ioctl+0x10e>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e50:	0011      	movs	r1, r2
 8000e52:	18bb      	adds	r3, r7, r2
 8000e54:	7a5b      	ldrb	r3, [r3, #9]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	7a1b      	ldrb	r3, [r3, #8]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	18d3      	adds	r3, r2, r3
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	211e      	movs	r1, #30
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	3201      	adds	r2, #1
 8000e6c:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	029a      	lsls	r2, r3, #10
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e03a      	b.n	8000ef0 <SD_disk_ioctl+0x184>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e7a:	200c      	movs	r0, #12
 8000e7c:	183b      	adds	r3, r7, r0
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	220f      	movs	r2, #15
 8000e82:	4013      	ands	r3, r2
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	183b      	adds	r3, r7, r0
 8000e88:	7a9b      	ldrb	r3, [r3, #10]
 8000e8a:	09db      	lsrs	r3, r3, #7
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	18d3      	adds	r3, r2, r3
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	183b      	adds	r3, r7, r0
 8000e94:	7a5b      	ldrb	r3, [r3, #9]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	2426      	movs	r4, #38	; 0x26
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	3202      	adds	r2, #2
 8000eaa:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000eac:	183b      	adds	r3, r7, r0
 8000eae:	7a1b      	ldrb	r3, [r3, #8]
 8000eb0:	099b      	lsrs	r3, r3, #6
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	183b      	adds	r3, r7, r0
 8000eb8:	79db      	ldrb	r3, [r3, #7]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	183b      	adds	r3, r7, r0
 8000ec6:	799b      	ldrb	r3, [r3, #6]
 8000ec8:	029b      	lsls	r3, r3, #10
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	23c0      	movs	r3, #192	; 0xc0
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	18d3      	adds	r3, r2, r3
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	211e      	movs	r1, #30
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	3201      	adds	r2, #1
 8000ede:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	881a      	ldrh	r2, [r3, #0]
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3b09      	subs	r3, #9
 8000eea:	409a      	lsls	r2, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000ef0:	2327      	movs	r3, #39	; 0x27
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000ef8:	e05c      	b.n	8000fb4 <SD_disk_ioctl+0x248>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000f02:	2327      	movs	r3, #39	; 0x27
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
      break;
 8000f0a:	e05a      	b.n	8000fc2 <SD_disk_ioctl+0x256>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000f0c:	f7ff fb80 	bl	8000610 <SD_ReadyWait>
 8000f10:	0003      	movs	r3, r0
 8000f12:	2bff      	cmp	r3, #255	; 0xff
 8000f14:	d150      	bne.n	8000fb8 <SD_disk_ioctl+0x24c>
        res = RES_OK;
 8000f16:	2327      	movs	r3, #39	; 0x27
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
      break;
 8000f1e:	e04b      	b.n	8000fb8 <SD_disk_ioctl+0x24c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f20:	2100      	movs	r1, #0
 8000f22:	2049      	movs	r0, #73	; 0x49
 8000f24:	f7ff fc9e 	bl	8000864 <SD_SendCmd>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d147      	bne.n	8000fbc <SD_disk_ioctl+0x250>
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2110      	movs	r1, #16
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff fbf3 	bl	800071c <SD_RxDataBlock>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d040      	beq.n	8000fbc <SD_disk_ioctl+0x250>
        res = RES_OK;
 8000f3a:	2327      	movs	r3, #39	; 0x27
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
      break;
 8000f42:	e03b      	b.n	8000fbc <SD_disk_ioctl+0x250>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f44:	2100      	movs	r1, #0
 8000f46:	204a      	movs	r0, #74	; 0x4a
 8000f48:	f7ff fc8c 	bl	8000864 <SD_SendCmd>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d137      	bne.n	8000fc0 <SD_disk_ioctl+0x254>
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	2110      	movs	r1, #16
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fbe1 	bl	800071c <SD_RxDataBlock>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d030      	beq.n	8000fc0 <SD_disk_ioctl+0x254>
        res = RES_OK;
 8000f5e:	2327      	movs	r3, #39	; 0x27
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
      break;
 8000f66:	e02b      	b.n	8000fc0 <SD_disk_ioctl+0x254>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	207a      	movs	r0, #122	; 0x7a
 8000f6c:	f7ff fc7a 	bl	8000864 <SD_SendCmd>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d11a      	bne.n	8000faa <SD_disk_ioctl+0x23e>
      {
        for (n = 0; n < 4; n++)
 8000f74:	2326      	movs	r3, #38	; 0x26
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e00c      	b.n	8000f98 <SD_disk_ioctl+0x22c>
        {
          *ptr++ = SPI_RxByte();
 8000f7e:	6a3c      	ldr	r4, [r7, #32]
 8000f80:	1c63      	adds	r3, r4, #1
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	f7ff fb14 	bl	80005b0 <SPI_RxByte>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f8c:	2126      	movs	r1, #38	; 0x26
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	3201      	adds	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	2326      	movs	r3, #38	; 0x26
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d9ed      	bls.n	8000f7e <SD_disk_ioctl+0x212>
        }

        res = RES_OK;
 8000fa2:	2327      	movs	r3, #39	; 0x27
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
      }

    default:
      res = RES_PARERR;
 8000faa:	2327      	movs	r3, #39	; 0x27
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	2204      	movs	r2, #4
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e006      	b.n	8000fc2 <SD_disk_ioctl+0x256>
      break;
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	e004      	b.n	8000fc2 <SD_disk_ioctl+0x256>
      break;
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	e002      	b.n	8000fc2 <SD_disk_ioctl+0x256>
      break;
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	e000      	b.n	8000fc2 <SD_disk_ioctl+0x256>
      break;
 8000fc0:	46c0      	nop			; (mov r8, r8)
    }

    DESELECT();
 8000fc2:	f7ff facb 	bl	800055c <DESELECT>
    SPI_RxByte();
 8000fc6:	f7ff faf3 	bl	80005b0 <SPI_RxByte>
  }

  return res;
 8000fca:	2327      	movs	r3, #39	; 0x27
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	781b      	ldrb	r3, [r3, #0]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b00b      	add	sp, #44	; 0x2c
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	080071d4 	.word	0x080071d4

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x44>)
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_MspInit+0x44>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_MspInit+0x44>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x44>)
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_MspInit+0x44>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	61da      	str	r2, [r3, #28]
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_MspInit+0x44>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b08b      	sub	sp, #44	; 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	2414      	movs	r4, #20
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	2314      	movs	r3, #20
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f006 f884 	bl	8007148 <memset>
  if(hspi->Instance==SPI2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d132      	bne.n	80010b0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_SPI_MspInit+0x94>)
 800104c:	69da      	ldr	r2, [r3, #28]
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_SPI_MspInit+0x94>)
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	01c9      	lsls	r1, r1, #7
 8001054:	430a      	orrs	r2, r1
 8001056:	61da      	str	r2, [r3, #28]
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_SPI_MspInit+0x94>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	01db      	lsls	r3, r3, #7
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_SPI_MspInit+0x94>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_SPI_MspInit+0x94>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	02c9      	lsls	r1, r1, #11
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_SPI_MspInit+0x94>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	02db      	lsls	r3, r3, #11
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	22e0      	movs	r2, #224	; 0xe0
 8001086:	0212      	lsls	r2, r2, #8
 8001088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	0021      	movs	r1, r4
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2202      	movs	r2, #2
 8001090:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2203      	movs	r2, #3
 800109c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_SPI_MspInit+0x98>)
 80010a8:	0019      	movs	r1, r3
 80010aa:	0010      	movs	r0, r2
 80010ac:	f000 fa1e 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b00b      	add	sp, #44	; 0x2c
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	40003800 	.word	0x40003800
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000400 	.word	0x48000400

080010c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b08b      	sub	sp, #44	; 0x2c
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	2414      	movs	r4, #20
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	0018      	movs	r0, r3
 80010d2:	2314      	movs	r3, #20
 80010d4:	001a      	movs	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	f006 f836 	bl	8007148 <memset>
  if(huart->Instance==USART1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <HAL_UART_MspInit+0x94>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d133      	bne.n	800114e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_UART_MspInit+0x98>)
 80010e8:	699a      	ldr	r2, [r3, #24]
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_UART_MspInit+0x98>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	01c9      	lsls	r1, r1, #7
 80010f0:	430a      	orrs	r2, r1
 80010f2:	619a      	str	r2, [r3, #24]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_UART_MspInit+0x98>)
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	01db      	lsls	r3, r3, #7
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_UART_MspInit+0x98>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_UART_MspInit+0x98>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0289      	lsls	r1, r1, #10
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_UART_MspInit+0x98>)
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	029b      	lsls	r3, r3, #10
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	22c0      	movs	r2, #192	; 0xc0
 8001122:	00d2      	lsls	r2, r2, #3
 8001124:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	0021      	movs	r1, r4
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2202      	movs	r2, #2
 800112c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2203      	movs	r2, #3
 8001138:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2201      	movs	r2, #1
 800113e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	187a      	adds	r2, r7, r1
 8001142:	2390      	movs	r3, #144	; 0x90
 8001144:	05db      	lsls	r3, r3, #23
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f000 f9cf 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b00b      	add	sp, #44	; 0x2c
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	40013800 	.word	0x40013800
 800115c:	40021000 	.word	0x40021000

08001160 <SDTimer_Handler>:
volatile uint16_t LEDCnt = 0;
volatile uint8_t LEDState = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <SDTimer_Handler+0x3c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <SDTimer_Handler+0x1c>
		Timer1--;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <SDTimer_Handler+0x3c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3b01      	subs	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <SDTimer_Handler+0x3c>)
 800117a:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <SDTimer_Handler+0x40>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <SDTimer_Handler+0x34>
		Timer2--;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SDTimer_Handler+0x40>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	3b01      	subs	r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <SDTimer_Handler+0x40>)
 8001192:	701a      	strb	r2, [r3, #0]
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	2000098f 	.word	0x2000098f
 80011a0:	20000990 	.word	0x20000990

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <SysTick_Handler+0x88>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <SysTick_Handler+0x88>)
 80011d4:	701a      	strb	r2, [r3, #0]
	LEDCnt++;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <SysTick_Handler+0x8c>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3301      	adds	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <SysTick_Handler+0x8c>)
 80011e2:	801a      	strh	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <SysTick_Handler+0x88>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b09      	cmp	r3, #9
 80011ec:	d904      	bls.n	80011f8 <SysTick_Handler+0x34>
	{
		FatFsCnt = 0;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <SysTick_Handler+0x88>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80011f4:	f7ff ffb4 	bl	8001160 <SDTimer_Handler>
	}
	if(LEDCnt >= 1000)
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <SysTick_Handler+0x8c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	23fa      	movs	r3, #250	; 0xfa
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	429a      	cmp	r2, r3
 8001204:	d31c      	bcc.n	8001240 <SysTick_Handler+0x7c>
	{
		LEDCnt = 0;
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <SysTick_Handler+0x8c>)
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
		if (LEDState == 0)
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <SysTick_Handler+0x90>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10a      	bne.n	800122c <SysTick_Handler+0x68>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <SysTick_Handler+0x94>)
 800121c:	2201      	movs	r2, #1
 800121e:	0019      	movs	r1, r3
 8001220:	f000 fad4 	bl	80017cc <HAL_GPIO_WritePin>
			LEDState = 1;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <SysTick_Handler+0x90>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	e009      	b.n	8001240 <SysTick_Handler+0x7c>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <SysTick_Handler+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	0019      	movs	r1, r3
 8001236:	f000 fac9 	bl	80017cc <HAL_GPIO_WritePin>
			LEDState = 0;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SysTick_Handler+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		}

	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f884 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	2000098b 	.word	0x2000098b
 8001250:	2000098c 	.word	0x2000098c
 8001254:	2000098e 	.word	0x2000098e
 8001258:	48000800 	.word	0x48000800

0800125c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800126c:	f7ff fff6 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <LoopForever+0xe>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001288:	4c0a      	ldr	r4, [pc, #40]	; (80012b4 <LoopForever+0x16>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001296:	f005 ff33 	bl	8007100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129a:	f7fe ffc1 	bl	8000220 <main>

0800129e <LoopForever>:

LoopForever:
    b LoopForever
 800129e:	e7fe      	b.n	800129e <LoopForever>
  ldr   r0, =_estack
 80012a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80012ac:	0800779c 	.word	0x0800779c
  ldr r2, =_sbss
 80012b0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80012b4:	20000bcc 	.word	0x20000bcc

080012b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_COMP_IRQHandler>
	...

080012bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_Init+0x24>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_Init+0x24>)
 80012c6:	2110      	movs	r1, #16
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f809 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d2:	f7ff fe85 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_InitTick+0x5c>)
 80012ee:	681c      	ldr	r4, [r3, #0]
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_InitTick+0x60>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	0019      	movs	r1, r3
 80012f6:	23fa      	movs	r3, #250	; 0xfa
 80012f8:	0098      	lsls	r0, r3, #2
 80012fa:	f7fe ff05 	bl	8000108 <__udivsi3>
 80012fe:	0003      	movs	r3, r0
 8001300:	0019      	movs	r1, r3
 8001302:	0020      	movs	r0, r4
 8001304:	f7fe ff00 	bl	8000108 <__udivsi3>
 8001308:	0003      	movs	r3, r0
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f8e1 	bl	80014d2 <HAL_SYSTICK_Config>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d001      	beq.n	8001318 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e00f      	b.n	8001338 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d80b      	bhi.n	8001336 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	2301      	movs	r3, #1
 8001322:	425b      	negs	r3, r3
 8001324:	2200      	movs	r2, #0
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f8be 	bl	80014a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_InitTick+0x64>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b003      	add	sp, #12
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	20000004 	.word	0x20000004
 8001344:	2000000c 	.word	0x2000000c
 8001348:	20000008 	.word	0x20000008

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x1c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	001a      	movs	r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x20>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	18d2      	adds	r2, r2, r3
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_IncTick+0x20>)
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	2000000c 	.word	0x2000000c
 800136c:	20000994 	.word	0x20000994

08001370 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b02      	ldr	r3, [pc, #8]	; (8001380 <HAL_GetTick+0x10>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	20000994 	.word	0x20000994

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b7f      	cmp	r3, #127	; 0x7f
 8001398:	d828      	bhi.n	80013ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139a:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <__NVIC_SetPriority+0xd4>)
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	33c0      	adds	r3, #192	; 0xc0
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	589b      	ldr	r3, [r3, r2]
 80013aa:	1dfa      	adds	r2, r7, #7
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	0011      	movs	r1, r2
 80013b0:	2203      	movs	r2, #3
 80013b2:	400a      	ands	r2, r1
 80013b4:	00d2      	lsls	r2, r2, #3
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	43d2      	mvns	r2, r2
 80013be:	401a      	ands	r2, r3
 80013c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	401a      	ands	r2, r3
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	0018      	movs	r0, r3
 80013d0:	2303      	movs	r3, #3
 80013d2:	4003      	ands	r3, r0
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	481f      	ldr	r0, [pc, #124]	; (8001458 <__NVIC_SetPriority+0xd4>)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	430a      	orrs	r2, r1
 80013e4:	33c0      	adds	r3, #192	; 0xc0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ea:	e031      	b.n	8001450 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <__NVIC_SetPriority+0xd8>)
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0019      	movs	r1, r3
 80013f4:	230f      	movs	r3, #15
 80013f6:	400b      	ands	r3, r1
 80013f8:	3b08      	subs	r3, #8
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3306      	adds	r3, #6
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	18d3      	adds	r3, r2, r3
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1dfa      	adds	r2, r7, #7
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	0011      	movs	r1, r2
 800140c:	2203      	movs	r2, #3
 800140e:	400a      	ands	r2, r1
 8001410:	00d2      	lsls	r2, r2, #3
 8001412:	21ff      	movs	r1, #255	; 0xff
 8001414:	4091      	lsls	r1, r2
 8001416:	000a      	movs	r2, r1
 8001418:	43d2      	mvns	r2, r2
 800141a:	401a      	ands	r2, r3
 800141c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	401a      	ands	r2, r3
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	2303      	movs	r3, #3
 800142e:	4003      	ands	r3, r0
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	001c      	movs	r4, r3
 800143c:	230f      	movs	r3, #15
 800143e:	4023      	ands	r3, r4
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	430a      	orrs	r2, r1
 8001446:	3306      	adds	r3, #6
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	18c3      	adds	r3, r0, r3
 800144c:	3304      	adds	r3, #4
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b003      	add	sp, #12
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	045b      	lsls	r3, r3, #17
 8001470:	429a      	cmp	r2, r3
 8001472:	d301      	bcc.n	8001478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001474:	2301      	movs	r3, #1
 8001476:	e010      	b.n	800149a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <SysTick_Config+0x44>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	3a01      	subs	r2, #1
 800147e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001480:	2301      	movs	r3, #1
 8001482:	425b      	negs	r3, r3
 8001484:	2103      	movs	r1, #3
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff7c 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x44>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x44>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	210f      	movs	r1, #15
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	1c02      	adds	r2, r0, #0
 80014b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ffbf 	bl	8001460 <SysTick_Config>
 80014e2:	0003      	movs	r3, r0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e14f      	b.n	800179c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <HAL_GPIO_Init+0x28>
 8001512:	e140      	b.n	8001796 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	2b01      	cmp	r3, #1
 800151e:	d005      	beq.n	800152c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2203      	movs	r2, #3
 8001526:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001528:	2b02      	cmp	r3, #2
 800152a:	d130      	bne.n	800158e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001562:	2201      	movs	r2, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	2201      	movs	r2, #1
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b03      	cmp	r3, #3
 8001598:	d017      	beq.n	80015ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d123      	bne.n	800161e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	58d3      	ldr	r3, [r2, r3]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2207      	movs	r2, #7
 80015e8:	4013      	ands	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2107      	movs	r1, #7
 8001602:	400b      	ands	r3, r1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	409a      	lsls	r2, r3
 8001608:	0013      	movs	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	6939      	ldr	r1, [r7, #16]
 800161c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d100      	bne.n	8001660 <HAL_GPIO_Init+0x174>
 800165e:	e09a      	b.n	8001796 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001660:	4b54      	ldr	r3, [pc, #336]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 8001666:	2101      	movs	r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	619a      	str	r2, [r3, #24]
 800166c:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <HAL_GPIO_Init+0x2c8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001678:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_GPIO_Init+0x2cc>)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	589b      	ldr	r3, [r3, r2]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2203      	movs	r2, #3
 800168a:	4013      	ands	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	409a      	lsls	r2, r3
 8001692:	0013      	movs	r3, r2
 8001694:	43da      	mvns	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	2390      	movs	r3, #144	; 0x90
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x1e2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a44      	ldr	r2, [pc, #272]	; (80017bc <HAL_GPIO_Init+0x2d0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x1de>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a43      	ldr	r2, [pc, #268]	; (80017c0 <HAL_GPIO_Init+0x2d4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x1da>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <HAL_GPIO_Init+0x2d8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x1d6>
 80016be:	2303      	movs	r3, #3
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e004      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_GPIO_Init+0x1e4>
 80016ce:	2300      	movs	r3, #0
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	2103      	movs	r1, #3
 80016d4:	400a      	ands	r2, r1
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4093      	lsls	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016e0:	4935      	ldr	r1, [pc, #212]	; (80017b8 <HAL_GPIO_Init+0x2cc>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	035b      	lsls	r3, r3, #13
 8001706:	4013      	ands	r3, r2
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43da      	mvns	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	039b      	lsls	r3, r3, #14
 8001730:	4013      	ands	r3, r2
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43da      	mvns	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	029b      	lsls	r3, r3, #10
 800175a:	4013      	ands	r3, r2
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	4013      	ands	r3, r2
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_GPIO_Init+0x2dc>)
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	40da      	lsrs	r2, r3
 80017a4:	1e13      	subs	r3, r2, #0
 80017a6:	d000      	beq.n	80017aa <HAL_GPIO_Init+0x2be>
 80017a8:	e6a8      	b.n	80014fc <HAL_GPIO_Init+0x10>
  } 
}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b006      	add	sp, #24
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	0008      	movs	r0, r1
 80017d6:	0011      	movs	r1, r2
 80017d8:	1cbb      	adds	r3, r7, #2
 80017da:	1c02      	adds	r2, r0, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	1c7b      	adds	r3, r7, #1
 80017e0:	1c0a      	adds	r2, r1, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e4:	1c7b      	adds	r3, r7, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ec:	1cbb      	adds	r3, r7, #2
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e301      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2201      	movs	r2, #1
 8001820:	4013      	ands	r3, r2
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x1e>
 8001824:	e08d      	b.n	8001942 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001826:	4bc3      	ldr	r3, [pc, #780]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	220c      	movs	r2, #12
 800182c:	4013      	ands	r3, r2
 800182e:	2b04      	cmp	r3, #4
 8001830:	d00e      	beq.n	8001850 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001832:	4bc0      	ldr	r3, [pc, #768]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	220c      	movs	r2, #12
 8001838:	4013      	ands	r3, r2
 800183a:	2b08      	cmp	r3, #8
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x64>
 800183e:	4bbd      	ldr	r3, [pc, #756]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	401a      	ands	r2, r3
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	429a      	cmp	r2, r3
 800184e:	d10d      	bne.n	800186c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4bb8      	ldr	r3, [pc, #736]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	029b      	lsls	r3, r3, #10
 8001858:	4013      	ands	r3, r2
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x56>
 800185c:	e070      	b.n	8001940 <HAL_RCC_OscConfig+0x138>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d000      	beq.n	8001868 <HAL_RCC_OscConfig+0x60>
 8001866:	e06b      	b.n	8001940 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e2d8      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x7c>
 8001874:	4baf      	ldr	r3, [pc, #700]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4bae      	ldr	r3, [pc, #696]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0249      	lsls	r1, r1, #9
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e02f      	b.n	80018e4 <HAL_RCC_OscConfig+0xdc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x9e>
 800188c:	4ba9      	ldr	r3, [pc, #676]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4ba8      	ldr	r3, [pc, #672]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001892:	49a9      	ldr	r1, [pc, #676]	; (8001b38 <HAL_RCC_OscConfig+0x330>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	4ba6      	ldr	r3, [pc, #664]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4ba5      	ldr	r3, [pc, #660]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 800189e:	49a7      	ldr	r1, [pc, #668]	; (8001b3c <HAL_RCC_OscConfig+0x334>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e01e      	b.n	80018e4 <HAL_RCC_OscConfig+0xdc>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d10e      	bne.n	80018cc <HAL_RCC_OscConfig+0xc4>
 80018ae:	4ba1      	ldr	r3, [pc, #644]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4ba0      	ldr	r3, [pc, #640]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	02c9      	lsls	r1, r1, #11
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	4b9d      	ldr	r3, [pc, #628]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b9c      	ldr	r3, [pc, #624]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	0249      	lsls	r1, r1, #9
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xdc>
 80018cc:	4b99      	ldr	r3, [pc, #612]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b98      	ldr	r3, [pc, #608]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018d2:	4999      	ldr	r1, [pc, #612]	; (8001b38 <HAL_RCC_OscConfig+0x330>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	4b96      	ldr	r3, [pc, #600]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b95      	ldr	r3, [pc, #596]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80018de:	4997      	ldr	r1, [pc, #604]	; (8001b3c <HAL_RCC_OscConfig+0x334>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d014      	beq.n	8001916 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fd40 	bl	8001370 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f6:	f7ff fd3b 	bl	8001370 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e28a      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	4b8a      	ldr	r3, [pc, #552]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	4013      	ands	r3, r2
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0xee>
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fd2b 	bl	8001370 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fd26 	bl	8001370 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e275      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	4b80      	ldr	r3, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	029b      	lsls	r3, r3, #10
 800193a:	4013      	ands	r3, r2
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x118>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d100      	bne.n	800194e <HAL_RCC_OscConfig+0x146>
 800194c:	e069      	b.n	8001a22 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800194e:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	220c      	movs	r2, #12
 8001954:	4013      	ands	r3, r2
 8001956:	d00b      	beq.n	8001970 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001958:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	220c      	movs	r2, #12
 800195e:	4013      	ands	r3, r2
 8001960:	2b08      	cmp	r3, #8
 8001962:	d11c      	bne.n	800199e <HAL_RCC_OscConfig+0x196>
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	025b      	lsls	r3, r3, #9
 800196c:	4013      	ands	r3, r2
 800196e:	d116      	bne.n	800199e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001970:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x17e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e24b      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	22f8      	movs	r2, #248	; 0xf8
 800198c:	4393      	bics	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	00da      	lsls	r2, r3, #3
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199c:	e041      	b.n	8001a22 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d024      	beq.n	80019f0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a6:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fcdd 	bl	8001370 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019bc:	f7ff fcd8 	bl	8001370 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e227      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d0f1      	beq.n	80019bc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	22f8      	movs	r2, #248	; 0xf8
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00da      	lsls	r2, r3, #3
 80019e8:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e018      	b.n	8001a22 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	438a      	bics	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fcb8 	bl	8001370 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fcb3 	bl	8001370 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e202      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f1      	bne.n	8001a06 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2208      	movs	r2, #8
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d036      	beq.n	8001a9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d019      	beq.n	8001a68 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a34:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a38:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fc96 	bl	8001370 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fc91 	bl	8001370 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1e0      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d0f1      	beq.n	8001a4a <HAL_RCC_OscConfig+0x242>
 8001a66:	e018      	b.n	8001a9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a68:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6c:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	438a      	bics	r2, r1
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff fc7c 	bl	8001370 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fc77 	bl	8001370 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1c6      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	2202      	movs	r2, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d1f1      	bne.n	8001a7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x29e>
 8001aa4:	e0b4      	b.n	8001c10 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	201f      	movs	r0, #31
 8001aa8:	183b      	adds	r3, r7, r0
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	055b      	lsls	r3, r3, #21
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d110      	bne.n	8001adc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0549      	lsls	r1, r1, #21
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	61da      	str	r2, [r3, #28]
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	69da      	ldr	r2, [r3, #28]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	055b      	lsls	r3, r3, #21
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_RCC_OscConfig+0x338>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d11a      	bne.n	8001b1e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_RCC_OscConfig+0x338>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_RCC_OscConfig+0x338>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0049      	lsls	r1, r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fc3b 	bl	8001370 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff fc36 	bl	8001370 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e185      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_OscConfig+0x338>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCC_OscConfig+0x33c>
 8001b26:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	621a      	str	r2, [r3, #32]
 8001b32:	e035      	b.n	8001ba0 <HAL_RCC_OscConfig+0x398>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	fffeffff 	.word	0xfffeffff
 8001b3c:	fffbffff 	.word	0xfffbffff
 8001b40:	40007000 	.word	0x40007000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x35e>
 8001b4c:	4bb6      	ldr	r3, [pc, #728]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	6a1a      	ldr	r2, [r3, #32]
 8001b50:	4bb5      	ldr	r3, [pc, #724]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	621a      	str	r2, [r3, #32]
 8001b58:	4bb3      	ldr	r3, [pc, #716]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	4bb2      	ldr	r3, [pc, #712]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b5e:	2104      	movs	r1, #4
 8001b60:	438a      	bics	r2, r1
 8001b62:	621a      	str	r2, [r3, #32]
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x398>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x380>
 8001b6e:	4bae      	ldr	r3, [pc, #696]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b70:	6a1a      	ldr	r2, [r3, #32]
 8001b72:	4bad      	ldr	r3, [pc, #692]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b74:	2104      	movs	r1, #4
 8001b76:	430a      	orrs	r2, r1
 8001b78:	621a      	str	r2, [r3, #32]
 8001b7a:	4bab      	ldr	r3, [pc, #684]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b7c:	6a1a      	ldr	r2, [r3, #32]
 8001b7e:	4baa      	ldr	r3, [pc, #680]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	430a      	orrs	r2, r1
 8001b84:	621a      	str	r2, [r3, #32]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x398>
 8001b88:	4ba7      	ldr	r3, [pc, #668]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	4ba6      	ldr	r3, [pc, #664]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	438a      	bics	r2, r1
 8001b92:	621a      	str	r2, [r3, #32]
 8001b94:	4ba4      	ldr	r3, [pc, #656]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b96:	6a1a      	ldr	r2, [r3, #32]
 8001b98:	4ba3      	ldr	r3, [pc, #652]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d014      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fbe2 	bl	8001370 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fbdd 	bl	8001370 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4a9b      	ldr	r2, [pc, #620]	; (8001e2c <HAL_RCC_OscConfig+0x624>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e12b      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
 8001bd0:	e013      	b.n	8001bfa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fbcd 	bl	8001370 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	e009      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fbc8 	bl	8001370 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	4a91      	ldr	r2, [pc, #580]	; (8001e2c <HAL_RCC_OscConfig+0x624>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e116      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bfa:	231f      	movs	r3, #31
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c0a:	4989      	ldr	r1, [pc, #548]	; (8001e30 <HAL_RCC_OscConfig+0x628>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2210      	movs	r2, #16
 8001c16:	4013      	ands	r3, r2
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d12a      	bne.n	8001c78 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c22:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c26:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c28:	2104      	movs	r1, #4
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c2e:	4b7e      	ldr	r3, [pc, #504]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c32:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c34:	2101      	movs	r1, #1
 8001c36:	430a      	orrs	r2, r1
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fb99 	bl	8001370 <HAL_GetTick>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c44:	f7ff fb94 	bl	8001370 <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0e3      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c56:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d0f1      	beq.n	8001c44 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c60:	4b71      	ldr	r3, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c64:	22f8      	movs	r2, #248	; 0xf8
 8001c66:	4393      	bics	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	00da      	lsls	r2, r3, #3
 8001c70:	4b6d      	ldr	r3, [pc, #436]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
 8001c76:	e034      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	3305      	adds	r3, #5
 8001c7e:	d111      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c80:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c86:	2104      	movs	r1, #4
 8001c88:	438a      	bics	r2, r1
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c8c:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	22f8      	movs	r2, #248	; 0xf8
 8001c92:	4393      	bics	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	00da      	lsls	r2, r3, #3
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	e01e      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ca4:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001caa:	2104      	movs	r1, #4
 8001cac:	430a      	orrs	r2, r1
 8001cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	438a      	bics	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fb58 	bl	8001370 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cc6:	f7ff fb53 	bl	8001370 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0a2      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d1f1      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d100      	bne.n	8001cec <HAL_RCC_OscConfig+0x4e4>
 8001cea:	e097      	b.n	8001e1c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d100      	bne.n	8001cfa <HAL_RCC_OscConfig+0x4f2>
 8001cf8:	e06b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d14c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d08:	494a      	ldr	r1, [pc, #296]	; (8001e34 <HAL_RCC_OscConfig+0x62c>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fb2f 	bl	8001370 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff fb2a 	bl	8001370 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e079      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	049b      	lsls	r3, r3, #18
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d36:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a3a      	ldr	r2, [pc, #232]	; (8001e38 <HAL_RCC_OscConfig+0x630>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0449      	lsls	r1, r1, #17
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff fafd 	bl	8001370 <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff faf8 	bl	8001370 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e047      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x574>
 8001d9a:	e03f      	b.n	8001e1c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001da2:	4924      	ldr	r1, [pc, #144]	; (8001e34 <HAL_RCC_OscConfig+0x62c>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fae2 	bl	8001370 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fadd 	bl	8001370 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e02c      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	049b      	lsls	r3, r3, #18
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5aa>
 8001dd0:	e024      	b.n	8001e1c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e01f      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x620>)
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	401a      	ands	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d10e      	bne.n	8001e18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	401a      	ands	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	23f0      	movs	r3, #240	; 0xf0
 8001e0c:	039b      	lsls	r3, r3, #14
 8001e0e:	401a      	ands	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b008      	add	sp, #32
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	efffffff 	.word	0xefffffff
 8001e34:	feffffff 	.word	0xfeffffff
 8001e38:	ffc2ffff 	.word	0xffc2ffff

08001e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b3      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b5b      	ldr	r3, [pc, #364]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d911      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4393      	bics	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e09a      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d015      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2204      	movs	r2, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	d006      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001e9c:	21e0      	movs	r1, #224	; 0xe0
 8001e9e:	00c9      	lsls	r1, r1, #3
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea4:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	22f0      	movs	r2, #240	; 0xf0
 8001eaa:	4393      	bics	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d040      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	029b      	lsls	r3, r3, #10
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d114      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06e      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	049b      	lsls	r3, r3, #18
 8001eea:	4013      	ands	r3, r2
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e062      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e05b      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2203      	movs	r2, #3
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f14:	f7ff fa2c 	bl	8001370 <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1c:	e009      	b.n	8001f32 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f7ff fa27 	bl	8001370 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a27      	ldr	r2, [pc, #156]	; (8001fc8 <HAL_RCC_ClockConfig+0x18c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e042      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	220c      	movs	r2, #12
 8001f38:	401a      	ands	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1ec      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d211      	bcs.n	8001f76 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4393      	bics	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_RCC_ClockConfig+0x184>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e020      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_RCC_ClockConfig+0x190>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f94:	f000 f820 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f98:	0001      	movs	r1, r0
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x188>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x194>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	000a      	movs	r2, r1
 8001faa:	40da      	lsrs	r2, r3
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x198>)
 8001fae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f7ff f997 	bl	80012e4 <HAL_InitTick>
  
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b004      	add	sp, #16
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	00001388 	.word	0x00001388
 8001fcc:	fffff8ff 	.word	0xfffff8ff
 8001fd0:	0800720c 	.word	0x0800720c
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d002      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x30>
 8002002:	2b08      	cmp	r3, #8
 8002004:	d003      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x36>
 8002006:	e02c      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_GetSysClockFreq+0xa0>)
 800200a:	613b      	str	r3, [r7, #16]
      break;
 800200c:	e02c      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	0c9b      	lsrs	r3, r3, #18
 8002012:	220f      	movs	r2, #15
 8002014:	4013      	ands	r3, r2
 8002016:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCC_GetSysClockFreq+0x9c>)
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	220f      	movs	r2, #15
 8002022:	4013      	ands	r3, r2
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	4810      	ldr	r0, [pc, #64]	; (8002078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002038:	f7fe f866 	bl	8000108 <__udivsi3>
 800203c:	0003      	movs	r3, r0
 800203e:	001a      	movs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4353      	muls	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e009      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	000a      	movs	r2, r1
 800204c:	0152      	lsls	r2, r2, #5
 800204e:	1a52      	subs	r2, r2, r1
 8002050:	0193      	lsls	r3, r2, #6
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	185b      	adds	r3, r3, r1
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	e002      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002064:	613b      	str	r3, [r7, #16]
      break;
 8002066:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002068:	693b      	ldr	r3, [r7, #16]
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b006      	add	sp, #24
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	08007224 	.word	0x08007224
 8002080:	08007234 	.word	0x08007234

08002084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <HAL_RCC_GetHCLKFreq+0x10>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800209c:	f7ff fff2 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020a0:	0001      	movs	r1, r0
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	2207      	movs	r2, #7
 80020aa:	4013      	ands	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	000b      	movs	r3, r1
}    
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	40021000 	.word	0x40021000
 80020c0:	0800721c 	.word	0x0800721c

080020c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	4013      	ands	r3, r2
 80020de:	d100      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020e0:	e08e      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2017      	movs	r0, #23
 80020e4:	183b      	adds	r3, r7, r0
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	055b      	lsls	r3, r3, #21
 80020f2:	4013      	ands	r3, r2
 80020f4:	d110      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	0549      	lsls	r1, r1, #21
 8002100:	430a      	orrs	r2, r1
 8002102:	61da      	str	r2, [r3, #28]
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	183b      	adds	r3, r7, r0
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4013      	ands	r3, r2
 8002122:	d11a      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	0049      	lsls	r1, r1, #1
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7ff f91d 	bl	8001370 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	e008      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f7ff f918 	bl	8001370 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e087      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4013      	ands	r3, r2
 8002158:	d0f0      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800215a:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	23c0      	movs	r3, #192	; 0xc0
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d034      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	23c0      	movs	r3, #192	; 0xc0
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4013      	ands	r3, r2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d02c      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800217c:	4b3a      	ldr	r3, [pc, #232]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a3b      	ldr	r2, [pc, #236]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002182:	4013      	ands	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0249      	lsls	r1, r1, #9
 8002190:	430a      	orrs	r2, r1
 8002192:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800219a:	4936      	ldr	r1, [pc, #216]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800219c:	400a      	ands	r2, r1
 800219e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021a0:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff f8df 	bl	8001370 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	e009      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7ff f8da 	bl	8001370 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e048      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ea:	2317      	movs	r3, #23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021fa:	4920      	ldr	r1, [pc, #128]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d009      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	2203      	movs	r2, #3
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800221a:	430a      	orrs	r2, r1
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2220      	movs	r2, #32
 8002224:	4013      	ands	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	2210      	movs	r2, #16
 800222e:	4393      	bics	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002238:	430a      	orrs	r2, r1
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4013      	ands	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	2240      	movs	r2, #64	; 0x40
 800224e:	4393      	bics	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002258:	430a      	orrs	r2, r1
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	0018      	movs	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	b006      	add	sp, #24
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	fffffcff 	.word	0xfffffcff
 8002274:	fffeffff 	.word	0xfffeffff
 8002278:	00001388 	.word	0x00001388
 800227c:	efffffff 	.word	0xefffffff

08002280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0a8      	b.n	80023e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	2382      	movs	r3, #130	; 0x82
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d009      	beq.n	80022ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
 80022ac:	e005      	b.n	80022ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	225d      	movs	r2, #93	; 0x5d
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	225c      	movs	r2, #92	; 0x5c
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7fe fea6 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	225d      	movs	r2, #93	; 0x5d
 80022e0:	2102      	movs	r1, #2
 80022e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2140      	movs	r1, #64	; 0x40
 80022f0:	438a      	bics	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	23e0      	movs	r3, #224	; 0xe0
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d902      	bls.n	8002306 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e002      	b.n	800230c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	015b      	lsls	r3, r3, #5
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23f0      	movs	r3, #240	; 0xf0
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	429a      	cmp	r2, r3
 8002316:	d008      	beq.n	800232a <HAL_SPI_Init+0xaa>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	23e0      	movs	r3, #224	; 0xe0
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	429a      	cmp	r2, r3
 8002322:	d002      	beq.n	800232a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	2382      	movs	r3, #130	; 0x82
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	401a      	ands	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	2384      	movs	r3, #132	; 0x84
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	400b      	ands	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2102      	movs	r1, #2
 8002346:	400b      	ands	r3, r1
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2101      	movs	r1, #1
 8002350:	400b      	ands	r3, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6999      	ldr	r1, [r3, #24]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	400b      	ands	r3, r1
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2138      	movs	r1, #56	; 0x38
 8002366:	400b      	ands	r3, r1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	400b      	ands	r3, r1
 8002372:	431a      	orrs	r2, r3
 8002374:	0011      	movs	r1, r2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	2204      	movs	r2, #4
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	2110      	movs	r1, #16
 8002398:	400b      	ands	r3, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	2108      	movs	r1, #8
 80023a2:	400b      	ands	r3, r1
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	23f0      	movs	r3, #240	; 0xf0
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	400b      	ands	r3, r1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	0011      	movs	r1, r2
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	015b      	lsls	r3, r3, #5
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4907      	ldr	r1, [pc, #28]	; (80023ec <HAL_SPI_Init+0x16c>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	225d      	movs	r2, #93	; 0x5d
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	fffff7ff 	.word	0xfffff7ff

080023f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	1dbb      	adds	r3, r7, #6
 80023fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	225c      	movs	r2, #92	; 0x5c
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_SPI_Transmit+0x26>
 8002412:	2302      	movs	r3, #2
 8002414:	e147      	b.n	80026a6 <HAL_SPI_Transmit+0x2b6>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	225c      	movs	r2, #92	; 0x5c
 800241a:	2101      	movs	r1, #1
 800241c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800241e:	f7fe ffa7 	bl	8001370 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002426:	2316      	movs	r3, #22
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	1dba      	adds	r2, r7, #6
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	225d      	movs	r2, #93	; 0x5d
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d004      	beq.n	8002446 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800243c:	231f      	movs	r3, #31
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
    goto error;
 8002444:	e128      	b.n	8002698 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_SPI_Transmit+0x64>
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002454:	231f      	movs	r3, #31
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
    goto error;
 800245c:	e11c      	b.n	8002698 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	225d      	movs	r2, #93	; 0x5d
 8002462:	2103      	movs	r1, #3
 8002464:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1dba      	adds	r2, r7, #6
 8002476:	8812      	ldrh	r2, [r2, #0]
 8002478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1dba      	adds	r2, r7, #6
 800247e:	8812      	ldrh	r2, [r2, #0]
 8002480:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2244      	movs	r2, #68	; 0x44
 800248c:	2100      	movs	r1, #0
 800248e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2246      	movs	r2, #70	; 0x46
 8002494:	2100      	movs	r1, #0
 8002496:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d110      	bne.n	80024d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	438a      	bics	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	01c9      	lsls	r1, r1, #7
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	4013      	ands	r3, r2
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d007      	beq.n	80024f0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	23e0      	movs	r3, #224	; 0xe0
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d952      	bls.n	80025a2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_SPI_Transmit+0x11e>
 8002504:	2316      	movs	r3, #22
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d143      	bne.n	8002596 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	1c9a      	adds	r2, r3, #2
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002532:	e030      	b.n	8002596 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d112      	bne.n	8002568 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002566:	e016      	b.n	8002596 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002568:	f7fe ff02 	bl	8001370 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d802      	bhi.n	800257e <HAL_SPI_Transmit+0x18e>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_SPI_Transmit+0x194>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002584:	231f      	movs	r3, #31
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2203      	movs	r2, #3
 800258a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	225d      	movs	r2, #93	; 0x5d
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]
          goto error;
 8002594:	e080      	b.n	8002698 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1c9      	bne.n	8002534 <HAL_SPI_Transmit+0x144>
 80025a0:	e053      	b.n	800264a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_SPI_Transmit+0x1c4>
 80025aa:	2316      	movs	r3, #22
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d145      	bne.n	8002640 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80025da:	e031      	b.n	8002640 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2202      	movs	r2, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d113      	bne.n	8002612 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	330c      	adds	r3, #12
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002610:	e016      	b.n	8002640 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002612:	f7fe fead 	bl	8001370 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d802      	bhi.n	8002628 <HAL_SPI_Transmit+0x238>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_SPI_Transmit+0x23e>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800262e:	231f      	movs	r3, #31
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2203      	movs	r2, #3
 8002634:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	225d      	movs	r2, #93	; 0x5d
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]
          goto error;
 800263e:	e02b      	b.n	8002698 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1c8      	bne.n	80025dc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fb4b 	bl	8002cec <SPI_EndRxTxTransaction>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d002      	beq.n	8002660 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002686:	231f      	movs	r3, #31
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e003      	b.n	8002698 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	225d      	movs	r2, #93	; 0x5d
 8002694:	2101      	movs	r1, #1
 8002696:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	225c      	movs	r2, #92	; 0x5c
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026a0:	231f      	movs	r3, #31
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b008      	add	sp, #32
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	001a      	movs	r2, r3
 80026be:	1cbb      	adds	r3, r7, #2
 80026c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026c6:	2323      	movs	r3, #35	; 0x23
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	225c      	movs	r2, #92	; 0x5c
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x2c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e1c4      	b.n	8002a66 <HAL_SPI_TransmitReceive+0x3b6>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	225c      	movs	r2, #92	; 0x5c
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026e4:	f7fe fe44 	bl	8001370 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026ec:	201b      	movs	r0, #27
 80026ee:	183b      	adds	r3, r7, r0
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	215d      	movs	r1, #93	; 0x5d
 80026f4:	5c52      	ldrb	r2, [r2, r1]
 80026f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80026fe:	2312      	movs	r3, #18
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	1cba      	adds	r2, r7, #2
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002708:	183b      	adds	r3, r7, r0
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d011      	beq.n	8002734 <HAL_SPI_TransmitReceive+0x84>
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	2382      	movs	r3, #130	; 0x82
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	429a      	cmp	r2, r3
 8002718:	d107      	bne.n	800272a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_SPI_TransmitReceive+0x7a>
 8002722:	183b      	adds	r3, r7, r0
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b04      	cmp	r3, #4
 8002728:	d004      	beq.n	8002734 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800272a:	2323      	movs	r3, #35	; 0x23
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2202      	movs	r2, #2
 8002730:	701a      	strb	r2, [r3, #0]
    goto error;
 8002732:	e191      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x98>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x98>
 8002740:	1cbb      	adds	r3, r7, #2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002748:	2323      	movs	r3, #35	; 0x23
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002750:	e182      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	225d      	movs	r2, #93	; 0x5d
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b04      	cmp	r3, #4
 800275c:	d003      	beq.n	8002766 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	225d      	movs	r2, #93	; 0x5d
 8002762:	2105      	movs	r1, #5
 8002764:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1cba      	adds	r2, r7, #2
 8002776:	2146      	movs	r1, #70	; 0x46
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1cba      	adds	r2, r7, #2
 8002780:	2144      	movs	r1, #68	; 0x44
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1cba      	adds	r2, r7, #2
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1cba      	adds	r2, r7, #2
 8002798:	8812      	ldrh	r2, [r2, #0]
 800279a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	23e0      	movs	r3, #224	; 0xe0
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	49ac      	ldr	r1, [pc, #688]	; (8002a70 <HAL_SPI_TransmitReceive+0x3c0>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	e008      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0149      	lsls	r1, r1, #5
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d007      	beq.n	80027f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	23e0      	movs	r3, #224	; 0xe0
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	429a      	cmp	r2, r3
 8002800:	d800      	bhi.n	8002804 <HAL_SPI_TransmitReceive+0x154>
 8002802:	e083      	b.n	800290c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_SPI_TransmitReceive+0x168>
 800280c:	2312      	movs	r3, #18
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d000      	beq.n	8002818 <HAL_SPI_TransmitReceive+0x168>
 8002816:	e06d      	b.n	80028f4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	881a      	ldrh	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	1c9a      	adds	r2, r3, #2
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283c:	e05a      	b.n	80028f4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2202      	movs	r2, #2
 8002846:	4013      	ands	r3, r2
 8002848:	2b02      	cmp	r3, #2
 800284a:	d11b      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x1d4>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x1d4>
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	2b01      	cmp	r3, #1
 800285a:	d113      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	1c9a      	adds	r2, r3, #2
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11c      	bne.n	80028cc <HAL_SPI_TransmitReceive+0x21c>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2246      	movs	r2, #70	; 0x46
 8002896:	5a9b      	ldrh	r3, [r3, r2]
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	b292      	uxth	r2, r2
 80028aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	1c9a      	adds	r2, r3, #2
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2246      	movs	r2, #70	; 0x46
 80028ba:	5a9b      	ldrh	r3, [r3, r2]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b299      	uxth	r1, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2246      	movs	r2, #70	; 0x46
 80028c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028c8:	2301      	movs	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028cc:	f7fe fd50 	bl	8001370 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d8:	429a      	cmp	r2, r3
 80028da:	d80b      	bhi.n	80028f4 <HAL_SPI_TransmitReceive+0x244>
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	3301      	adds	r3, #1
 80028e0:	d008      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80028e2:	2323      	movs	r3, #35	; 0x23
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2203      	movs	r2, #3
 80028e8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	225d      	movs	r2, #93	; 0x5d
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
        goto error;
 80028f2:	e0b1      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d19f      	bne.n	800283e <HAL_SPI_TransmitReceive+0x18e>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2246      	movs	r2, #70	; 0x46
 8002902:	5a9b      	ldrh	r3, [r3, r2]
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d199      	bne.n	800283e <HAL_SPI_TransmitReceive+0x18e>
 800290a:	e089      	b.n	8002a20 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_SPI_TransmitReceive+0x270>
 8002914:	2312      	movs	r3, #18
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d000      	beq.n	8002920 <HAL_SPI_TransmitReceive+0x270>
 800291e:	e074      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002946:	e060      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2202      	movs	r2, #2
 8002950:	4013      	ands	r3, r2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d11c      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x2e0>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d017      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x2e0>
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	2b01      	cmp	r3, #1
 8002964:	d114      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	2b01      	cmp	r3, #1
 800299c:	d11e      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x32c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2246      	movs	r2, #70	; 0x46
 80029a2:	5a9b      	ldrh	r3, [r3, r2]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d018      	beq.n	80029dc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	330c      	adds	r3, #12
 80029b0:	001a      	movs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2246      	movs	r2, #70	; 0x46
 80029ca:	5a9b      	ldrh	r3, [r3, r2]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b299      	uxth	r1, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2246      	movs	r2, #70	; 0x46
 80029d6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029d8:	2301      	movs	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029dc:	f7fe fcc8 	bl	8001370 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d802      	bhi.n	80029f2 <HAL_SPI_TransmitReceive+0x342>
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	3301      	adds	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x348>
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d108      	bne.n	8002a0a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80029f8:	2323      	movs	r3, #35	; 0x23
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2203      	movs	r2, #3
 80029fe:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	225d      	movs	r2, #93	; 0x5d
 8002a04:	2101      	movs	r1, #1
 8002a06:	5499      	strb	r1, [r3, r2]
        goto error;
 8002a08:	e026      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d199      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x298>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2246      	movs	r2, #70	; 0x46
 8002a18:	5a9b      	ldrh	r3, [r3, r2]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d193      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f960 	bl	8002cec <SPI_EndRxTxTransaction>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d006      	beq.n	8002a3e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002a30:	2323      	movs	r3, #35	; 0x23
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002a46:	2323      	movs	r3, #35	; 0x23
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e003      	b.n	8002a58 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	225d      	movs	r2, #93	; 0x5d
 8002a54:	2101      	movs	r1, #1
 8002a56:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	225c      	movs	r2, #92	; 0x5c
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a60:	2323      	movs	r3, #35	; 0x23
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	781b      	ldrb	r3, [r3, #0]
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b00a      	add	sp, #40	; 0x28
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	ffffefff 	.word	0xffffefff

08002a74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	225d      	movs	r2, #93	; 0x5d
 8002a80:	5c9b      	ldrb	r3, [r3, r2]
 8002a82:	b2db      	uxtb	r3, r3
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a9c:	f7fe fc68 	bl	8001370 <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	18d3      	adds	r3, r2, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aac:	f7fe fc60 	bl	8001370 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab4:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	015b      	lsls	r3, r3, #5
 8002aba:	0d1b      	lsrs	r3, r3, #20
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	4353      	muls	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac2:	e058      	b.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	d055      	beq.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aca:	f7fe fc51 	bl	8001370 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d902      	bls.n	8002ae0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d142      	bne.n	8002b66 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	21e0      	movs	r1, #224	; 0xe0
 8002aec:	438a      	bics	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	2382      	movs	r3, #130	; 0x82
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d113      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d005      	beq.n	8002b14 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	438a      	bics	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	019b      	lsls	r3, r3, #6
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d110      	bne.n	8002b52 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	491a      	ldr	r1, [pc, #104]	; (8002ba4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0189      	lsls	r1, r1, #6
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	225d      	movs	r2, #93	; 0x5d
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	225c      	movs	r2, #92	; 0x5c
 8002b5e:	2100      	movs	r1, #0
 8002b60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e017      	b.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	425a      	negs	r2, r3
 8002b86:	4153      	adcs	r3, r2
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d197      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b008      	add	sp, #32
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	20000004 	.word	0x20000004
 8002ba4:	ffffdfff 	.word	0xffffdfff

08002ba8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002bb6:	2317      	movs	r3, #23
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bbe:	f7fe fbd7 	bl	8001370 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	18d3      	adds	r3, r2, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002bce:	f7fe fbcf 	bl	8001370 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002bde:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	0013      	movs	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	00da      	lsls	r2, r3, #3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	0d1b      	lsrs	r3, r3, #20
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	4353      	muls	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bf4:	e068      	b.n	8002cc8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	23c0      	movs	r3, #192	; 0xc0
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d10a      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	2117      	movs	r1, #23
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d055      	beq.n	8002cc8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c1c:	f7fe fba8 	bl	8001370 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d902      	bls.n	8002c32 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d142      	bne.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	21e0      	movs	r1, #224	; 0xe0
 8002c3e:	438a      	bics	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	2382      	movs	r3, #130	; 0x82
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d113      	bne.n	8002c76 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d005      	beq.n	8002c66 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d107      	bne.n	8002c76 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	438a      	bics	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d110      	bne.n	8002ca4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	0189      	lsls	r1, r1, #6
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	225d      	movs	r2, #93	; 0x5d
 8002ca8:	2101      	movs	r1, #1
 8002caa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	225c      	movs	r2, #92	; 0x5c
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e010      	b.n	8002cda <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d18e      	bne.n	8002bf6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b00a      	add	sp, #40	; 0x28
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	20000004 	.word	0x20000004
 8002ce8:	ffffdfff 	.word	0xffffdfff

08002cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	23c0      	movs	r3, #192	; 0xc0
 8002cfc:	0159      	lsls	r1, r3, #5
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	0013      	movs	r3, r2
 8002d06:	2200      	movs	r2, #0
 8002d08:	f7ff ff4e 	bl	8002ba8 <SPI_WaitFifoStateUntilTimeout>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d007      	beq.n	8002d20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d14:	2220      	movs	r2, #32
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e027      	b.n	8002d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	0013      	movs	r3, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	f7ff fead 	bl	8002a8c <SPI_WaitFlagStateUntilTimeout>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d007      	beq.n	8002d46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e014      	b.n	8002d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	23c0      	movs	r3, #192	; 0xc0
 8002d4a:	00d9      	lsls	r1, r3, #3
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	0013      	movs	r3, r2
 8002d54:	2200      	movs	r2, #0
 8002d56:	f7ff ff27 	bl	8002ba8 <SPI_WaitFifoStateUntilTimeout>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d007      	beq.n	8002d6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d62:	2220      	movs	r2, #32
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e000      	b.n	8002d70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b004      	add	sp, #16
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e044      	b.n	8002e14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2278      	movs	r2, #120	; 0x78
 8002d96:	2100      	movs	r1, #0
 8002d98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fe f991 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2224      	movs	r2, #36	; 0x24
 8002da6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	438a      	bics	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 f830 	bl	8002e20 <UART_SetConfig>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e024      	b.n	8002e14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f963 	bl	80030a0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	490d      	ldr	r1, [pc, #52]	; (8002e1c <HAL_UART_Init+0xa4>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	212a      	movs	r1, #42	; 0x2a
 8002df6:	438a      	bics	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 f9fb 	bl	8003208 <UART_CheckIdleState>
 8002e12:	0003      	movs	r3, r0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	ffffb7ff 	.word	0xffffb7ff

08002e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e28:	231e      	movs	r3, #30
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a8d      	ldr	r2, [pc, #564]	; (8003084 <UART_SetConfig+0x264>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a88      	ldr	r2, [pc, #544]	; (8003088 <UART_SetConfig+0x268>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a7f      	ldr	r2, [pc, #508]	; (800308c <UART_SetConfig+0x26c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7b      	ldr	r2, [pc, #492]	; (8003090 <UART_SetConfig+0x270>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d127      	bne.n	8002ef6 <UART_SetConfig+0xd6>
 8002ea6:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <UART_SetConfig+0x274>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	2203      	movs	r2, #3
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d00d      	beq.n	8002ece <UART_SetConfig+0xae>
 8002eb2:	d81b      	bhi.n	8002eec <UART_SetConfig+0xcc>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d014      	beq.n	8002ee2 <UART_SetConfig+0xc2>
 8002eb8:	d818      	bhi.n	8002eec <UART_SetConfig+0xcc>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <UART_SetConfig+0xa4>
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d00a      	beq.n	8002ed8 <UART_SetConfig+0xb8>
 8002ec2:	e013      	b.n	8002eec <UART_SetConfig+0xcc>
 8002ec4:	231f      	movs	r3, #31
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e021      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ece:	231f      	movs	r3, #31
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e01c      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ed8:	231f      	movs	r3, #31
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2204      	movs	r2, #4
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e017      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ee2:	231f      	movs	r3, #31
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e012      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002eec:	231f      	movs	r3, #31
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e00d      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a67      	ldr	r2, [pc, #412]	; (8003098 <UART_SetConfig+0x278>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d104      	bne.n	8002f0a <UART_SetConfig+0xea>
 8002f00:	231f      	movs	r3, #31
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e003      	b.n	8002f12 <UART_SetConfig+0xf2>
 8002f0a:	231f      	movs	r3, #31
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2210      	movs	r2, #16
 8002f10:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d15c      	bne.n	8002fd8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002f1e:	231f      	movs	r3, #31
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d015      	beq.n	8002f54 <UART_SetConfig+0x134>
 8002f28:	dc18      	bgt.n	8002f5c <UART_SetConfig+0x13c>
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d00d      	beq.n	8002f4a <UART_SetConfig+0x12a>
 8002f2e:	dc15      	bgt.n	8002f5c <UART_SetConfig+0x13c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <UART_SetConfig+0x11a>
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d005      	beq.n	8002f44 <UART_SetConfig+0x124>
 8002f38:	e010      	b.n	8002f5c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f3a:	f7ff f8ad 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	61bb      	str	r3, [r7, #24]
        break;
 8002f42:	e012      	b.n	8002f6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f44:	4b55      	ldr	r3, [pc, #340]	; (800309c <UART_SetConfig+0x27c>)
 8002f46:	61bb      	str	r3, [r7, #24]
        break;
 8002f48:	e00f      	b.n	8002f6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4a:	f7ff f845 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	61bb      	str	r3, [r7, #24]
        break;
 8002f52:	e00a      	b.n	8002f6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	61bb      	str	r3, [r7, #24]
        break;
 8002f5a:	e006      	b.n	8002f6a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f60:	231e      	movs	r3, #30
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
        break;
 8002f68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d100      	bne.n	8002f72 <UART_SetConfig+0x152>
 8002f70:	e07a      	b.n	8003068 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	005a      	lsls	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	18d2      	adds	r2, r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f7fd f8bf 	bl	8000108 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d91c      	bls.n	8002fce <UART_SetConfig+0x1ae>
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	025b      	lsls	r3, r3, #9
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d217      	bcs.n	8002fce <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	200e      	movs	r0, #14
 8002fa4:	183b      	adds	r3, r7, r0
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	438a      	bics	r2, r1
 8002faa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b299      	uxth	r1, r3
 8002fb8:	183b      	adds	r3, r7, r0
 8002fba:	183a      	adds	r2, r7, r0
 8002fbc:	8812      	ldrh	r2, [r2, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	183a      	adds	r2, r7, r0
 8002fc8:	8812      	ldrh	r2, [r2, #0]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	e04c      	b.n	8003068 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002fce:	231e      	movs	r3, #30
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e047      	b.n	8003068 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fd8:	231f      	movs	r3, #31
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d015      	beq.n	800300e <UART_SetConfig+0x1ee>
 8002fe2:	dc18      	bgt.n	8003016 <UART_SetConfig+0x1f6>
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d00d      	beq.n	8003004 <UART_SetConfig+0x1e4>
 8002fe8:	dc15      	bgt.n	8003016 <UART_SetConfig+0x1f6>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <UART_SetConfig+0x1d4>
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d005      	beq.n	8002ffe <UART_SetConfig+0x1de>
 8002ff2:	e010      	b.n	8003016 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7ff f850 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	61bb      	str	r3, [r7, #24]
        break;
 8002ffc:	e012      	b.n	8003024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <UART_SetConfig+0x27c>)
 8003000:	61bb      	str	r3, [r7, #24]
        break;
 8003002:	e00f      	b.n	8003024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003004:	f7fe ffe8 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8003008:	0003      	movs	r3, r0
 800300a:	61bb      	str	r3, [r7, #24]
        break;
 800300c:	e00a      	b.n	8003024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	61bb      	str	r3, [r7, #24]
        break;
 8003014:	e006      	b.n	8003024 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800301a:	231e      	movs	r3, #30
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
        break;
 8003022:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01e      	beq.n	8003068 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	085a      	lsrs	r2, r3, #1
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	18d2      	adds	r2, r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0019      	movs	r1, r3
 800303a:	0010      	movs	r0, r2
 800303c:	f7fd f864 	bl	8000108 <__udivsi3>
 8003040:	0003      	movs	r3, r0
 8003042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	d90a      	bls.n	8003060 <UART_SetConfig+0x240>
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	025b      	lsls	r3, r3, #9
 8003050:	429a      	cmp	r2, r3
 8003052:	d205      	bcs.n	8003060 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	b29a      	uxth	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	e003      	b.n	8003068 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003060:	231e      	movs	r3, #30
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003074:	231e      	movs	r3, #30
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	781b      	ldrb	r3, [r3, #0]
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b008      	add	sp, #32
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	ffff69f3 	.word	0xffff69f3
 8003088:	ffffcfff 	.word	0xffffcfff
 800308c:	fffff4ff 	.word	0xfffff4ff
 8003090:	40013800 	.word	0x40013800
 8003094:	40021000 	.word	0x40021000
 8003098:	40004400 	.word	0x40004400
 800309c:	007a1200 	.word	0x007a1200

080030a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	d00b      	beq.n	80030ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <UART_AdvFeatureConfig+0x144>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2202      	movs	r2, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	d00b      	beq.n	80030ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a43      	ldr	r2, [pc, #268]	; (80031e8 <UART_AdvFeatureConfig+0x148>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2204      	movs	r2, #4
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00b      	beq.n	800310e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <UART_AdvFeatureConfig+0x14c>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2208      	movs	r2, #8
 8003114:	4013      	ands	r3, r2
 8003116:	d00b      	beq.n	8003130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a34      	ldr	r2, [pc, #208]	; (80031f0 <UART_AdvFeatureConfig+0x150>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2210      	movs	r2, #16
 8003136:	4013      	ands	r3, r2
 8003138:	d00b      	beq.n	8003152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <UART_AdvFeatureConfig+0x154>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2220      	movs	r2, #32
 8003158:	4013      	ands	r3, r2
 800315a:	d00b      	beq.n	8003174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <UART_AdvFeatureConfig+0x158>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2240      	movs	r2, #64	; 0x40
 800317a:	4013      	ands	r3, r2
 800317c:	d01d      	beq.n	80031ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <UART_AdvFeatureConfig+0x15c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	035b      	lsls	r3, r3, #13
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10b      	bne.n	80031ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <UART_AdvFeatureConfig+0x160>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	0019      	movs	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	4013      	ands	r3, r2
 80031c2:	d00b      	beq.n	80031dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <UART_AdvFeatureConfig+0x164>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
  }
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	fffdffff 	.word	0xfffdffff
 80031e8:	fffeffff 	.word	0xfffeffff
 80031ec:	fffbffff 	.word	0xfffbffff
 80031f0:	ffff7fff 	.word	0xffff7fff
 80031f4:	ffffefff 	.word	0xffffefff
 80031f8:	ffffdfff 	.word	0xffffdfff
 80031fc:	ffefffff 	.word	0xffefffff
 8003200:	ff9fffff 	.word	0xff9fffff
 8003204:	fff7ffff 	.word	0xfff7ffff

08003208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b092      	sub	sp, #72	; 0x48
 800320c:	af02      	add	r7, sp, #8
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2284      	movs	r2, #132	; 0x84
 8003214:	2100      	movs	r1, #0
 8003216:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003218:	f7fe f8aa 	bl	8001370 <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2208      	movs	r2, #8
 8003228:	4013      	ands	r3, r2
 800322a:	2b08      	cmp	r3, #8
 800322c:	d12c      	bne.n	8003288 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	0391      	lsls	r1, r2, #14
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4a46      	ldr	r2, [pc, #280]	; (8003350 <UART_CheckIdleState+0x148>)
 8003238:	9200      	str	r2, [sp, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	f000 f88c 	bl	8003358 <UART_WaitOnFlagUntilTimeout>
 8003240:	1e03      	subs	r3, r0, #0
 8003242:	d021      	beq.n	8003288 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003244:	f3ef 8310 	mrs	r3, PRIMASK
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
 800324e:	2301      	movs	r3, #1
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	438a      	bics	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2278      	movs	r2, #120	; 0x78
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e05f      	b.n	8003348 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2204      	movs	r2, #4
 8003290:	4013      	ands	r3, r2
 8003292:	2b04      	cmp	r3, #4
 8003294:	d146      	bne.n	8003324 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	03d1      	lsls	r1, r2, #15
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <UART_CheckIdleState+0x148>)
 80032a0:	9200      	str	r2, [sp, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f000 f858 	bl	8003358 <UART_WaitOnFlagUntilTimeout>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d03b      	beq.n	8003324 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
 80032b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
 80032b6:	2301      	movs	r3, #1
 80032b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4921      	ldr	r1, [pc, #132]	; (8003354 <UART_CheckIdleState+0x14c>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032de:	f3ef 8310 	mrs	r3, PRIMASK
 80032e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80032e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
 80032e8:	2301      	movs	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f383 8810 	msr	PRIMASK, r3
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	438a      	bics	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	2120      	movs	r1, #32
 8003316:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2278      	movs	r2, #120	; 0x78
 800331c:	2100      	movs	r1, #0
 800331e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e011      	b.n	8003348 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	2120      	movs	r1, #32
 8003330:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2278      	movs	r2, #120	; 0x78
 8003342:	2100      	movs	r1, #0
 8003344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b010      	add	sp, #64	; 0x40
 800334e:	bd80      	pop	{r7, pc}
 8003350:	01ffffff 	.word	0x01ffffff
 8003354:	fffffedf 	.word	0xfffffedf

08003358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003368:	e04b      	b.n	8003402 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	3301      	adds	r3, #1
 800336e:	d048      	beq.n	8003402 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fd fffe 	bl	8001370 <HAL_GetTick>
 8003374:	0002      	movs	r2, r0
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e04b      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2204      	movs	r2, #4
 8003392:	4013      	ands	r3, r2
 8003394:	d035      	beq.n	8003402 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	2208      	movs	r2, #8
 800339e:	4013      	ands	r3, r2
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d111      	bne.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2208      	movs	r2, #8
 80033aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f83c 	bl	800342c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2284      	movs	r2, #132	; 0x84
 80033b8:	2108      	movs	r1, #8
 80033ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2278      	movs	r2, #120	; 0x78
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e02c      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	401a      	ands	r2, r3
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	429a      	cmp	r2, r3
 80033da:	d112      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 f81f 	bl	800342c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2284      	movs	r2, #132	; 0x84
 80033f2:	2120      	movs	r1, #32
 80033f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2278      	movs	r2, #120	; 0x78
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e00f      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	425a      	negs	r2, r3
 8003412:	4153      	adcs	r3, r2
 8003414:	b2db      	uxtb	r3, r3
 8003416:	001a      	movs	r2, r3
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d0a4      	beq.n	800336a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08e      	sub	sp, #56	; 0x38
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003434:	f3ef 8310 	mrs	r3, PRIMASK
 8003438:	617b      	str	r3, [r7, #20]
  return(result);
 800343a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
 800343e:	2301      	movs	r3, #1
 8003440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4926      	ldr	r1, [pc, #152]	; (80034f0 <UART_EndRxTransfer+0xc4>)
 8003456:	400a      	ands	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003466:	f3ef 8310 	mrs	r3, PRIMASK
 800346a:	623b      	str	r3, [r7, #32]
  return(result);
 800346c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
 8003470:	2301      	movs	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2101      	movs	r1, #1
 8003488:	438a      	bics	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	f383 8810 	msr	PRIMASK, r3
}
 8003496:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349c:	2b01      	cmp	r3, #1
 800349e:	d118      	bne.n	80034d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a0:	f3ef 8310 	mrs	r3, PRIMASK
 80034a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034aa:	2301      	movs	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f383 8810 	msr	PRIMASK, r3
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2110      	movs	r1, #16
 80034c2:	438a      	bics	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	2120      	movs	r1, #32
 80034d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b00e      	add	sp, #56	; 0x38
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	fffffedf 	.word	0xfffffedf

080034f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80034f8:	4a06      	ldr	r2, [pc, #24]	; (8003514 <MX_FATFS_Init+0x20>)
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <MX_FATFS_Init+0x24>)
 80034fc:	0011      	movs	r1, r2
 80034fe:	0018      	movs	r0, r3
 8003500:	f003 fd6c 	bl	8006fdc <FATFS_LinkDriver>
 8003504:	0003      	movs	r3, r0
 8003506:	001a      	movs	r2, r3
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <MX_FATFS_Init+0x28>)
 800350a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	2000099c 	.word	0x2000099c
 8003518:	20000010 	.word	0x20000010
 800351c:	20000998 	.word	0x20000998

08003520 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003524:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	0002      	movs	r2, r0
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003538:	1dfb      	adds	r3, r7, #7
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	0018      	movs	r0, r3
 800353e:	f7fd f9fb 	bl	8000938 <SD_disk_initialize>
 8003542:	0003      	movs	r3, r0
 8003544:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003546:	0018      	movs	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}

0800354e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	0002      	movs	r2, r0
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	0018      	movs	r0, r3
 8003560:	f7fd faf6 	bl	8000b50 <SD_disk_status>
 8003564:	0003      	movs	r3, r0
 8003566:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	210f      	movs	r1, #15
 800357e:	187b      	adds	r3, r7, r1
 8003580:	1c02      	adds	r2, r0, #0
 8003582:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003584:	187b      	adds	r3, r7, r1
 8003586:	7818      	ldrb	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	f7fd faf5 	bl	8000b7c <SD_disk_read>
 8003592:	0003      	movs	r3, r0
 8003594:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}

0800359e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	210f      	movs	r1, #15
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	1c02      	adds	r2, r0, #0
 80035b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	7818      	ldrb	r0, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	f7fd fb4e 	bl	8000c5c <SD_disk_write>
 80035c0:	0003      	movs	r3, r0
 80035c2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b004      	add	sp, #16
 80035ca:	bd80      	pop	{r7, pc}

080035cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	603a      	str	r2, [r7, #0]
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	1c02      	adds	r2, r0, #0
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	1dbb      	adds	r3, r7, #6
 80035dc:	1c0a      	adds	r2, r1, #0
 80035de:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	7818      	ldrb	r0, [r3, #0]
 80035e4:	1dbb      	adds	r3, r7, #6
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	0019      	movs	r1, r3
 80035ec:	f7fd fbbe 	bl	8000d6c <SD_disk_ioctl>
 80035f0:	0003      	movs	r3, r0
 80035f2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80035fc:	b5b0      	push	{r4, r5, r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	0002      	movs	r2, r0
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4a0b      	ldr	r2, [pc, #44]	; (800363c <disk_status+0x40>)
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	18d3      	adds	r3, r2, r3
 8003612:	3304      	adds	r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	1dfa      	adds	r2, r7, #7
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <disk_status+0x40>)
 800361e:	188a      	adds	r2, r1, r2
 8003620:	7a12      	ldrb	r2, [r2, #8]
 8003622:	250f      	movs	r5, #15
 8003624:	197c      	adds	r4, r7, r5
 8003626:	0010      	movs	r0, r2
 8003628:	4798      	blx	r3
 800362a:	0003      	movs	r3, r0
 800362c:	7023      	strb	r3, [r4, #0]
  return stat;
 800362e:	197b      	adds	r3, r7, r5
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bdb0      	pop	{r4, r5, r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	20000bc0 	.word	0x20000bc0

08003640 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	0002      	movs	r2, r0
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 800364c:	200f      	movs	r0, #15
 800364e:	183b      	adds	r3, r7, r0
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8003654:	1dfb      	adds	r3, r7, #7
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4a10      	ldr	r2, [pc, #64]	; (800369c <disk_initialize+0x5c>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d116      	bne.n	800368e <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4a0d      	ldr	r2, [pc, #52]	; (800369c <disk_initialize+0x5c>)
 8003666:	2101      	movs	r1, #1
 8003668:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <disk_initialize+0x5c>)
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	18d3      	adds	r3, r2, r3
 8003674:	3304      	adds	r3, #4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1dfa      	adds	r2, r7, #7
 800367c:	7812      	ldrb	r2, [r2, #0]
 800367e:	4907      	ldr	r1, [pc, #28]	; (800369c <disk_initialize+0x5c>)
 8003680:	188a      	adds	r2, r1, r2
 8003682:	7a12      	ldrb	r2, [r2, #8]
 8003684:	183c      	adds	r4, r7, r0
 8003686:	0010      	movs	r0, r2
 8003688:	4798      	blx	r3
 800368a:	0003      	movs	r3, r0
 800368c:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800368e:	230f      	movs	r3, #15
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	781b      	ldrb	r3, [r3, #0]
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b005      	add	sp, #20
 800369a:	bd90      	pop	{r4, r7, pc}
 800369c:	20000bc0 	.word	0x20000bc0

080036a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	210f      	movs	r1, #15
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	1c02      	adds	r2, r0, #0
 80036b2:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <disk_read+0x4c>)
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	3304      	adds	r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689d      	ldr	r5, [r3, #8]
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4a08      	ldr	r2, [pc, #32]	; (80036ec <disk_read+0x4c>)
 80036ca:	18d3      	adds	r3, r2, r3
 80036cc:	7a18      	ldrb	r0, [r3, #8]
 80036ce:	2617      	movs	r6, #23
 80036d0:	19bc      	adds	r4, r7, r6
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	47a8      	blx	r5
 80036da:	0003      	movs	r3, r0
 80036dc:	7023      	strb	r3, [r4, #0]
  return res;
 80036de:	19bb      	adds	r3, r7, r6
 80036e0:	781b      	ldrb	r3, [r3, #0]
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b007      	add	sp, #28
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	20000bc0 	.word	0x20000bc0

080036f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	210f      	movs	r1, #15
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	1c02      	adds	r2, r0, #0
 8003702:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003704:	187b      	adds	r3, r7, r1
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4a0c      	ldr	r2, [pc, #48]	; (800373c <disk_write+0x4c>)
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	3304      	adds	r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68dd      	ldr	r5, [r3, #12]
 8003714:	187b      	adds	r3, r7, r1
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4a08      	ldr	r2, [pc, #32]	; (800373c <disk_write+0x4c>)
 800371a:	18d3      	adds	r3, r2, r3
 800371c:	7a18      	ldrb	r0, [r3, #8]
 800371e:	2617      	movs	r6, #23
 8003720:	19bc      	adds	r4, r7, r6
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	47a8      	blx	r5
 800372a:	0003      	movs	r3, r0
 800372c:	7023      	strb	r3, [r4, #0]
  return res;
 800372e:	19bb      	adds	r3, r7, r6
 8003730:	781b      	ldrb	r3, [r3, #0]
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b007      	add	sp, #28
 8003738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	20000bc0 	.word	0x20000bc0

08003740 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	603a      	str	r2, [r7, #0]
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	1c02      	adds	r2, r0, #0
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	1dbb      	adds	r3, r7, #6
 8003750:	1c0a      	adds	r2, r1, #0
 8003752:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4a0c      	ldr	r2, [pc, #48]	; (800378c <disk_ioctl+0x4c>)
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	3304      	adds	r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	1dfa      	adds	r2, r7, #7
 8003766:	7812      	ldrb	r2, [r2, #0]
 8003768:	4908      	ldr	r1, [pc, #32]	; (800378c <disk_ioctl+0x4c>)
 800376a:	188a      	adds	r2, r1, r2
 800376c:	7a10      	ldrb	r0, [r2, #8]
 800376e:	260f      	movs	r6, #15
 8003770:	19bc      	adds	r4, r7, r6
 8003772:	683d      	ldr	r5, [r7, #0]
 8003774:	1dba      	adds	r2, r7, #6
 8003776:	7811      	ldrb	r1, [r2, #0]
 8003778:	002a      	movs	r2, r5
 800377a:	4798      	blx	r3
 800377c:	0003      	movs	r3, r0
 800377e:	7023      	strb	r3, [r4, #0]
  return res;
 8003780:	19bb      	adds	r3, r7, r6
 8003782:	781b      	ldrb	r3, [r3, #0]
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b005      	add	sp, #20
 800378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378c:	20000bc0 	.word	0x20000bc0

08003790 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80037a4:	e007      	b.n	80037b6 <mem_cpy+0x26>
		*d++ = *s++;
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	1c53      	adds	r3, r2, #1
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	1c59      	adds	r1, r3, #1
 80037b0:	6179      	str	r1, [r7, #20]
 80037b2:	7812      	ldrb	r2, [r2, #0]
 80037b4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	1e5a      	subs	r2, r3, #1
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f2      	bne.n	80037a6 <mem_cpy+0x16>
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b006      	add	sp, #24
 80037c8:	bd80      	pop	{r7, pc}

080037ca <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80037da:	e005      	b.n	80037e8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	617a      	str	r2, [r7, #20]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f4      	bne.n	80037dc <mem_set+0x12>
}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}

080037fc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1e5a      	subs	r2, r3, #1
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <mem_cmp+0x40>
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	61fa      	str	r2, [r7, #28]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	0019      	movs	r1, r3
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	61ba      	str	r2, [r7, #24]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	1acb      	subs	r3, r1, r3
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ec      	beq.n	8003816 <mem_cmp+0x1a>
	return r;
 800383c:	697b      	ldr	r3, [r7, #20]
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b008      	add	sp, #32
 8003844:	bd80      	pop	{r7, pc}

08003846 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003850:	e002      	b.n	8003858 <chk_chr+0x12>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3301      	adds	r3, #1
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <chk_chr+0x26>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	001a      	movs	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4293      	cmp	r3, r2
 800386a:	d1f2      	bne.n	8003852 <chk_chr+0xc>
	return *str;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e038      	b.n	80038fe <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800388c:	492f      	ldr	r1, [pc, #188]	; (800394c <chk_lock+0xd4>)
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	0013      	movs	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	189b      	adds	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	585b      	ldr	r3, [r3, r1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02a      	beq.n	80038f4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800389e:	492b      	ldr	r1, [pc, #172]	; (800394c <chk_lock+0xd4>)
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	0013      	movs	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	585a      	ldr	r2, [r3, r1]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	58cb      	ldr	r3, [r1, r3]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d11f      	bne.n	80038f8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80038b8:	4924      	ldr	r1, [pc, #144]	; (800394c <chk_lock+0xd4>)
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	0013      	movs	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	189b      	adds	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	18cb      	adds	r3, r1, r3
 80038c6:	3304      	adds	r3, #4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	2381      	movs	r3, #129	; 0x81
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d110      	bne.n	80038f8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80038d6:	491d      	ldr	r1, [pc, #116]	; (800394c <chk_lock+0xd4>)
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	0013      	movs	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	189b      	adds	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	18cb      	adds	r3, r1, r3
 80038e4:	3308      	adds	r3, #8
 80038e6:	881a      	ldrh	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4919      	ldr	r1, [pc, #100]	; (8003950 <chk_lock+0xd8>)
 80038ec:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d102      	bne.n	80038f8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80038f2:	e007      	b.n	8003904 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d9c3      	bls.n	800388c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d109      	bne.n	800391e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <chk_lock+0x9e>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d101      	bne.n	800391a <chk_lock+0xa2>
 8003916:	2300      	movs	r3, #0
 8003918:	e014      	b.n	8003944 <chk_lock+0xcc>
 800391a:	2312      	movs	r3, #18
 800391c:	e012      	b.n	8003944 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10c      	bne.n	800393e <chk_lock+0xc6>
 8003924:	4909      	ldr	r1, [pc, #36]	; (800394c <chk_lock+0xd4>)
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	0013      	movs	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	189b      	adds	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	18cb      	adds	r3, r1, r3
 8003932:	330a      	adds	r3, #10
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	2380      	movs	r3, #128	; 0x80
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	429a      	cmp	r2, r3
 800393c:	d101      	bne.n	8003942 <chk_lock+0xca>
 800393e:	2310      	movs	r3, #16
 8003940:	e000      	b.n	8003944 <chk_lock+0xcc>
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200009a8 	.word	0x200009a8
 8003950:	00000406 	.word	0x00000406

08003954 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	e002      	b.n	8003966 <enq_lock+0x12>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3301      	adds	r3, #1
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d808      	bhi.n	800397e <enq_lock+0x2a>
 800396c:	4908      	ldr	r1, [pc, #32]	; (8003990 <enq_lock+0x3c>)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	0013      	movs	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	189b      	adds	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	585b      	ldr	r3, [r3, r1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3b02      	subs	r3, #2
 8003982:	1e5a      	subs	r2, r3, #1
 8003984:	4193      	sbcs	r3, r2
 8003986:	b2db      	uxtb	r3, r3
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200009a8 	.word	0x200009a8

08003994 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e02c      	b.n	80039fe <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 80039a4:	4955      	ldr	r1, [pc, #340]	; (8003afc <inc_lock+0x168>)
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	0013      	movs	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	189b      	adds	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	585a      	ldr	r2, [r3, r1]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	58cb      	ldr	r3, [r1, r3]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d11c      	bne.n	80039f8 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 80039be:	494f      	ldr	r1, [pc, #316]	; (8003afc <inc_lock+0x168>)
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	0013      	movs	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	18cb      	adds	r3, r1, r3
 80039cc:	3304      	adds	r3, #4
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	2381      	movs	r3, #129	; 0x81
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 80039d8:	429a      	cmp	r2, r3
 80039da:	d10d      	bne.n	80039f8 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 80039dc:	4947      	ldr	r1, [pc, #284]	; (8003afc <inc_lock+0x168>)
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	0013      	movs	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	189b      	adds	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	18cb      	adds	r3, r1, r3
 80039ea:	3308      	adds	r3, #8
 80039ec:	881a      	ldrh	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4943      	ldr	r1, [pc, #268]	; (8003b00 <inc_lock+0x16c>)
 80039f2:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d006      	beq.n	8003a06 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d9cf      	bls.n	80039a4 <inc_lock+0x10>
 8003a04:	e000      	b.n	8003a08 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 8003a06:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d145      	bne.n	8003a9a <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e002      	b.n	8003a1a <inc_lock+0x86>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d808      	bhi.n	8003a32 <inc_lock+0x9e>
 8003a20:	4936      	ldr	r1, [pc, #216]	; (8003afc <inc_lock+0x168>)
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	0013      	movs	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	189b      	adds	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	585b      	ldr	r3, [r3, r1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d101      	bne.n	8003a3c <inc_lock+0xa8>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e05a      	b.n	8003af2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	58d0      	ldr	r0, [r2, r3]
 8003a44:	492d      	ldr	r1, [pc, #180]	; (8003afc <inc_lock+0x168>)
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	0013      	movs	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	2381      	movs	r3, #129	; 0x81
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	58d1      	ldr	r1, [r2, r3]
 8003a5a:	4828      	ldr	r0, [pc, #160]	; (8003afc <inc_lock+0x168>)
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	0013      	movs	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	189b      	adds	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	18c3      	adds	r3, r0, r3
 8003a68:	3304      	adds	r3, #4
 8003a6a:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a24      	ldr	r2, [pc, #144]	; (8003b00 <inc_lock+0x16c>)
 8003a70:	5a98      	ldrh	r0, [r3, r2]
 8003a72:	4922      	ldr	r1, [pc, #136]	; (8003afc <inc_lock+0x168>)
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	0013      	movs	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	189b      	adds	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	18cb      	adds	r3, r1, r3
 8003a80:	3308      	adds	r3, #8
 8003a82:	1c02      	adds	r2, r0, #0
 8003a84:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003a86:	491d      	ldr	r1, [pc, #116]	; (8003afc <inc_lock+0x168>)
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	0013      	movs	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	189b      	adds	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	18cb      	adds	r3, r1, r3
 8003a94:	330a      	adds	r3, #10
 8003a96:	2200      	movs	r2, #0
 8003a98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <inc_lock+0x126>
 8003aa0:	4916      	ldr	r1, [pc, #88]	; (8003afc <inc_lock+0x168>)
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	0013      	movs	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	18cb      	adds	r3, r1, r3
 8003aae:	330a      	adds	r3, #10
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <inc_lock+0x126>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e01b      	b.n	8003af2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <inc_lock+0x144>
 8003ac0:	490e      	ldr	r1, [pc, #56]	; (8003afc <inc_lock+0x168>)
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	18cb      	adds	r3, r1, r3
 8003ace:	330a      	adds	r3, #10
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	e001      	b.n	8003adc <inc_lock+0x148>
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	005a      	lsls	r2, r3, #1
 8003adc:	4807      	ldr	r0, [pc, #28]	; (8003afc <inc_lock+0x168>)
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	000b      	movs	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	185b      	adds	r3, r3, r1
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	18c3      	adds	r3, r0, r3
 8003aea:	330a      	adds	r3, #10
 8003aec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3301      	adds	r3, #1
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b004      	add	sp, #16
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	200009a8 	.word	0x200009a8
 8003b00:	00000406 	.word	0x00000406

08003b04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d83b      	bhi.n	8003b90 <dec_lock+0x8c>
		n = Files[i].ctr;
 8003b18:	240e      	movs	r4, #14
 8003b1a:	1939      	adds	r1, r7, r4
 8003b1c:	4822      	ldr	r0, [pc, #136]	; (8003ba8 <dec_lock+0xa4>)
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	0013      	movs	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	18c3      	adds	r3, r0, r3
 8003b2a:	330a      	adds	r3, #10
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d102      	bne.n	8003b42 <dec_lock+0x3e>
 8003b3c:	193b      	adds	r3, r7, r4
 8003b3e:	2200      	movs	r2, #0
 8003b40:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8003b42:	210e      	movs	r1, #14
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <dec_lock+0x52>
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	881a      	ldrh	r2, [r3, #0]
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	3a01      	subs	r2, #1
 8003b54:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8003b56:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <dec_lock+0xa4>)
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	18cb      	adds	r3, r1, r3
 8003b64:	330a      	adds	r3, #10
 8003b66:	210e      	movs	r1, #14
 8003b68:	187a      	adds	r2, r7, r1
 8003b6a:	8812      	ldrh	r2, [r2, #0]
 8003b6c:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003b6e:	187b      	adds	r3, r7, r1
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d107      	bne.n	8003b86 <dec_lock+0x82>
 8003b76:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <dec_lock+0xa4>)
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	0013      	movs	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	2200      	movs	r2, #0
 8003b84:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8003b86:	230d      	movs	r3, #13
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e003      	b.n	8003b98 <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003b90:	230d      	movs	r3, #13
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2202      	movs	r2, #2
 8003b96:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8003b98:	230d      	movs	r3, #13
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	781b      	ldrb	r3, [r3, #0]
}
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b005      	add	sp, #20
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	200009a8 	.word	0x200009a8

08003bac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e014      	b.n	8003be4 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003bba:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <clear_lock+0x48>)
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	0013      	movs	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	585b      	ldr	r3, [r3, r1]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d107      	bne.n	8003bde <clear_lock+0x32>
 8003bce:	4909      	ldr	r1, [pc, #36]	; (8003bf4 <clear_lock+0x48>)
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	2200      	movs	r2, #0
 8003bdc:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d9e7      	bls.n	8003bba <clear_lock+0xe>
	}
}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b004      	add	sp, #16
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200009a8 	.word	0x200009a8

08003bf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003c00:	240f      	movs	r4, #15
 8003c02:	193b      	adds	r3, r7, r4
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <sync_window+0xa0>)
 8003c0c:	5c9b      	ldrb	r3, [r3, r2]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d03b      	beq.n	8003c8a <sync_window+0x92>
		wsect = fs->winsect;	/* Current sector number */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <sync_window+0xa4>)
 8003c16:	589b      	ldr	r3, [r3, r2]
 8003c18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <sync_window+0xa8>)
 8003c1e:	5c98      	ldrb	r0, [r3, r2]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	2301      	movs	r3, #1
 8003c26:	f7ff fd63 	bl	80036f0 <disk_write>
 8003c2a:	1e03      	subs	r3, r0, #0
 8003c2c:	d003      	beq.n	8003c36 <sync_window+0x3e>
			res = FR_DISK_ERR;
 8003c2e:	193b      	adds	r3, r7, r4
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
 8003c34:	e029      	b.n	8003c8a <sync_window+0x92>
		} else {
			fs->wflag = 0;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <sync_window+0xa0>)
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	2384      	movs	r3, #132	; 0x84
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	58d3      	ldr	r3, [r2, r3]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	1ad2      	subs	r2, r2, r3
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	2383      	movs	r3, #131	; 0x83
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	58cb      	ldr	r3, [r1, r3]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d219      	bcs.n	8003c8a <sync_window+0x92>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <sync_window+0xac>)
 8003c5a:	5c9b      	ldrb	r3, [r3, r2]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e011      	b.n	8003c84 <sync_window+0x8c>
					wsect += fs->fsize;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	2383      	movs	r3, #131	; 0x83
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	58d3      	ldr	r3, [r2, r3]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	18d3      	adds	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a0b      	ldr	r2, [pc, #44]	; (8003ca0 <sync_window+0xa8>)
 8003c72:	5c98      	ldrb	r0, [r3, r2]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f7ff fd39 	bl	80036f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d8ea      	bhi.n	8003c60 <sync_window+0x68>
				}
			}
		}
	}
	return res;
 8003c8a:	230f      	movs	r3, #15
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	781b      	ldrb	r3, [r3, #0]
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b007      	add	sp, #28
 8003c96:	bd90      	pop	{r4, r7, pc}
 8003c98:	00000404 	.word	0x00000404
 8003c9c:	0000042c 	.word	0x0000042c
 8003ca0:	00000401 	.word	0x00000401
 8003ca4:	00000403 	.word	0x00000403

08003ca8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003ca8:	b5b0      	push	{r4, r5, r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003cb2:	250f      	movs	r5, #15
 8003cb4:	197b      	adds	r3, r7, r5
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <move_window+0x6c>)
 8003cbe:	589b      	ldr	r3, [r3, r2]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d01f      	beq.n	8003d06 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003cc6:	197c      	adds	r4, r7, r5
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7ff ff94 	bl	8003bf8 <sync_window>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003cd4:	002c      	movs	r4, r5
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d113      	bne.n	8003d06 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <move_window+0x70>)
 8003ce2:	5c98      	ldrb	r0, [r3, r2]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f7ff fcd9 	bl	80036a0 <disk_read>
 8003cee:	1e03      	subs	r3, r0, #0
 8003cf0:	d005      	beq.n	8003cfe <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	425b      	negs	r3, r3
 8003cf6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003cf8:	193b      	adds	r3, r7, r4
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <move_window+0x6c>)
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	505a      	str	r2, [r3, r1]
		}
	}
	return res;
 8003d06:	230f      	movs	r3, #15
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	781b      	ldrb	r3, [r3, #0]
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b004      	add	sp, #16
 8003d12:	bdb0      	pop	{r4, r5, r7, pc}
 8003d14:	0000042c 	.word	0x0000042c
 8003d18:	00000401 	.word	0x00000401

08003d1c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003d1c:	b5b0      	push	{r4, r5, r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003d24:	250f      	movs	r5, #15
 8003d26:	197c      	adds	r4, r7, r5
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff ff64 	bl	8003bf8 <sync_window>
 8003d30:	0003      	movs	r3, r0
 8003d32:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003d34:	197b      	adds	r3, r7, r5
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d000      	beq.n	8003d3e <sync_fs+0x22>
 8003d3c:	e0ae      	b.n	8003e9c <sync_fs+0x180>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d000      	beq.n	8003d4c <sync_fs+0x30>
 8003d4a:	e099      	b.n	8003e80 <sync_fs+0x164>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a57      	ldr	r2, [pc, #348]	; (8003eac <sync_fs+0x190>)
 8003d50:	5c9b      	ldrb	r3, [r3, r2]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d000      	beq.n	8003d58 <sync_fs+0x3c>
 8003d56:	e093      	b.n	8003e80 <sync_fs+0x164>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a54      	ldr	r2, [pc, #336]	; (8003eb0 <sync_fs+0x194>)
 8003d5e:	5a9b      	ldrh	r3, [r3, r2]
 8003d60:	001a      	movs	r2, r3
 8003d62:	2100      	movs	r1, #0
 8003d64:	f7ff fd31 	bl	80037ca <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	23ff      	movs	r3, #255	; 0xff
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2155      	movs	r1, #85	; 0x55
 8003d70:	54d1      	strb	r1, [r2, r3]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	; (8003eb4 <sync_fs+0x198>)
 8003d76:	21aa      	movs	r1, #170	; 0xaa
 8003d78:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2252      	movs	r2, #82	; 0x52
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2252      	movs	r2, #82	; 0x52
 8003d84:	705a      	strb	r2, [r3, #1]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2261      	movs	r2, #97	; 0x61
 8003d8a:	709a      	strb	r2, [r3, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2241      	movs	r2, #65	; 0x41
 8003d90:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	23f2      	movs	r3, #242	; 0xf2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	2172      	movs	r1, #114	; 0x72
 8003d9a:	54d1      	strb	r1, [r2, r3]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	23e6      	movs	r3, #230	; 0xe6
 8003da0:	33ff      	adds	r3, #255	; 0xff
 8003da2:	2172      	movs	r1, #114	; 0x72
 8003da4:	54d1      	strb	r1, [r2, r3]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	23f3      	movs	r3, #243	; 0xf3
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2141      	movs	r1, #65	; 0x41
 8003dae:	54d1      	strb	r1, [r2, r3]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	23e8      	movs	r3, #232	; 0xe8
 8003db4:	33ff      	adds	r3, #255	; 0xff
 8003db6:	2161      	movs	r1, #97	; 0x61
 8003db8:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	2382      	movs	r3, #130	; 0x82
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	58d3      	ldr	r3, [r2, r3]
 8003dc2:	b2d9      	uxtb	r1, r3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	23f4      	movs	r3, #244	; 0xf4
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	54d1      	strb	r1, [r2, r3]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	2382      	movs	r3, #130	; 0x82
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	58d3      	ldr	r3, [r2, r3]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	b2d9      	uxtb	r1, r3
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	23ea      	movs	r3, #234	; 0xea
 8003de0:	33ff      	adds	r3, #255	; 0xff
 8003de2:	54d1      	strb	r1, [r2, r3]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	2382      	movs	r3, #130	; 0x82
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	58d3      	ldr	r3, [r2, r3]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	b2d9      	uxtb	r1, r3
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	23f5      	movs	r3, #245	; 0xf5
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	54d1      	strb	r1, [r2, r3]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	2382      	movs	r3, #130	; 0x82
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	58d3      	ldr	r3, [r2, r3]
 8003e00:	0e1b      	lsrs	r3, r3, #24
 8003e02:	b2d9      	uxtb	r1, r3
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	23ec      	movs	r3, #236	; 0xec
 8003e08:	33ff      	adds	r3, #255	; 0xff
 8003e0a:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <sync_fs+0x19c>)
 8003e10:	589b      	ldr	r3, [r3, r2]
 8003e12:	b2d9      	uxtb	r1, r3
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	23f6      	movs	r3, #246	; 0xf6
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	54d1      	strb	r1, [r2, r3]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <sync_fs+0x19c>)
 8003e20:	589b      	ldr	r3, [r3, r2]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	b2d9      	uxtb	r1, r3
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	23ee      	movs	r3, #238	; 0xee
 8003e2e:	33ff      	adds	r3, #255	; 0xff
 8003e30:	54d1      	strb	r1, [r2, r3]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a20      	ldr	r2, [pc, #128]	; (8003eb8 <sync_fs+0x19c>)
 8003e36:	589b      	ldr	r3, [r3, r2]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	b2d9      	uxtb	r1, r3
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	23f7      	movs	r3, #247	; 0xf7
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	54d1      	strb	r1, [r2, r3]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <sync_fs+0x19c>)
 8003e48:	589b      	ldr	r3, [r3, r2]
 8003e4a:	0e1b      	lsrs	r3, r3, #24
 8003e4c:	b2d9      	uxtb	r1, r3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	23f0      	movs	r3, #240	; 0xf0
 8003e52:	33ff      	adds	r3, #255	; 0xff
 8003e54:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <sync_fs+0x1a0>)
 8003e5a:	589b      	ldr	r3, [r3, r2]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4917      	ldr	r1, [pc, #92]	; (8003ec0 <sync_fs+0x1a4>)
 8003e62:	505a      	str	r2, [r3, r1]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <sync_fs+0x1a8>)
 8003e68:	5c98      	ldrb	r0, [r3, r2]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <sync_fs+0x1a4>)
 8003e70:	589a      	ldr	r2, [r3, r2]
 8003e72:	2301      	movs	r3, #1
 8003e74:	f7ff fc3c 	bl	80036f0 <disk_write>
			fs->fsi_flag = 0;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <sync_fs+0x190>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <sync_fs+0x1a8>)
 8003e84:	5c9b      	ldrb	r3, [r3, r2]
 8003e86:	2200      	movs	r2, #0
 8003e88:	2100      	movs	r1, #0
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7ff fc58 	bl	8003740 <disk_ioctl>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d003      	beq.n	8003e9c <sync_fs+0x180>
			res = FR_DISK_ERR;
 8003e94:	230f      	movs	r3, #15
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8003e9c:	230f      	movs	r3, #15
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	781b      	ldrb	r3, [r3, #0]
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	00000405 	.word	0x00000405
 8003eb0:	0000040a 	.word	0x0000040a
 8003eb4:	000001ff 	.word	0x000001ff
 8003eb8:	0000040c 	.word	0x0000040c
 8003ebc:	0000041c 	.word	0x0000041c
 8003ec0:	0000042c 	.word	0x0000042c
 8003ec4:	00000401 	.word	0x00000401

08003ec8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	3b02      	subs	r3, #2
 8003ed6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <clust2sect+0x40>)
 8003edc:	589b      	ldr	r3, [r3, r2]
 8003ede:	3b02      	subs	r3, #2
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d301      	bcc.n	8003eea <clust2sect+0x22>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e00a      	b.n	8003f00 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <clust2sect+0x44>)
 8003eee:	5c9b      	ldrb	r3, [r3, r2]
 8003ef0:	001a      	movs	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	435a      	muls	r2, r3
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	2385      	movs	r3, #133	; 0x85
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	58cb      	ldr	r3, [r1, r3]
 8003efe:	18d3      	adds	r3, r2, r3
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	00000414 	.word	0x00000414
 8003f0c:	00000402 	.word	0x00000402

08003f10 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d905      	bls.n	8003f2c <get_fat+0x1c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a78      	ldr	r2, [pc, #480]	; (8004104 <get_fat+0x1f4>)
 8003f24:	589b      	ldr	r3, [r3, r2]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e0e2      	b.n	80040f8 <get_fat+0x1e8>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003f32:	2301      	movs	r3, #1
 8003f34:	425b      	negs	r3, r3
 8003f36:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d100      	bne.n	8003f46 <get_fat+0x36>
 8003f44:	e095      	b.n	8004072 <get_fat+0x162>
 8003f46:	dd00      	ble.n	8003f4a <get_fat+0x3a>
 8003f48:	e0cc      	b.n	80040e4 <get_fat+0x1d4>
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d002      	beq.n	8003f54 <get_fat+0x44>
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d05e      	beq.n	8004010 <get_fat+0x100>
 8003f52:	e0c7      	b.n	80040e4 <get_fat+0x1d4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	2384      	movs	r3, #132	; 0x84
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	58d4      	ldr	r4, [r2, r3]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a66      	ldr	r2, [pc, #408]	; (8004108 <get_fat+0x1f8>)
 8003f6e:	5a9b      	ldrh	r3, [r3, r2]
 8003f70:	0019      	movs	r1, r3
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7fc f8c8 	bl	8000108 <__udivsi3>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	18e2      	adds	r2, r4, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	0011      	movs	r1, r2
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff fe91 	bl	8003ca8 <move_window>
 8003f86:	1e03      	subs	r3, r0, #0
 8003f88:	d000      	beq.n	8003f8c <get_fat+0x7c>
 8003f8a:	e0ae      	b.n	80040ea <get_fat+0x1da>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	60fa      	str	r2, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	495c      	ldr	r1, [pc, #368]	; (8004108 <get_fat+0x1f8>)
 8003f96:	5a52      	ldrh	r2, [r2, r1]
 8003f98:	0011      	movs	r1, r2
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fc f93a 	bl	8000214 <__aeabi_uidivmod>
 8003fa0:	000b      	movs	r3, r1
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	2384      	movs	r3, #132	; 0x84
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	58d4      	ldr	r4, [r2, r3]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a54      	ldr	r2, [pc, #336]	; (8004108 <get_fat+0x1f8>)
 8003fb6:	5a9b      	ldrh	r3, [r3, r2]
 8003fb8:	0019      	movs	r1, r3
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7fc f8a4 	bl	8000108 <__udivsi3>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	18e2      	adds	r2, r4, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff fe6d 	bl	8003ca8 <move_window>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d000      	beq.n	8003fd4 <get_fat+0xc4>
 8003fd2:	e08c      	b.n	80040ee <get_fat+0x1de>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a4c      	ldr	r2, [pc, #304]	; (8004108 <get_fat+0x1f8>)
 8003fd8:	5a9b      	ldrh	r3, [r3, r2]
 8003fda:	001a      	movs	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fc f917 	bl	8000214 <__aeabi_uidivmod>
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	001a      	movs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d002      	beq.n	8004006 <get_fat+0xf6>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	e002      	b.n	800400c <get_fat+0xfc>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	051b      	lsls	r3, r3, #20
 800400a:	0d1b      	lsrs	r3, r3, #20
 800400c:	617b      	str	r3, [r7, #20]
			break;
 800400e:	e073      	b.n	80040f8 <get_fat+0x1e8>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	2384      	movs	r3, #132	; 0x84
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	58d4      	ldr	r4, [r2, r3]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <get_fat+0x1f8>)
 800401c:	5a9b      	ldrh	r3, [r3, r2]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	0019      	movs	r1, r3
 8004024:	6838      	ldr	r0, [r7, #0]
 8004026:	f7fc f86f 	bl	8000108 <__udivsi3>
 800402a:	0003      	movs	r3, r0
 800402c:	18e2      	adds	r2, r4, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0011      	movs	r1, r2
 8004032:	0018      	movs	r0, r3
 8004034:	f7ff fe38 	bl	8003ca8 <move_window>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d15a      	bne.n	80040f2 <get_fat+0x1e2>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	005a      	lsls	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4931      	ldr	r1, [pc, #196]	; (8004108 <get_fat+0x1f8>)
 8004044:	5a5b      	ldrh	r3, [r3, r1]
 8004046:	0019      	movs	r1, r3
 8004048:	0010      	movs	r0, r2
 800404a:	f7fc f8e3 	bl	8000214 <__aeabi_uidivmod>
 800404e:	000b      	movs	r3, r1
 8004050:	001a      	movs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	189b      	adds	r3, r3, r2
 8004056:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	3301      	adds	r3, #1
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	b21a      	sxth	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b21b      	sxth	r3, r3
 8004068:	4313      	orrs	r3, r2
 800406a:	b21b      	sxth	r3, r3
 800406c:	b29b      	uxth	r3, r3
 800406e:	617b      	str	r3, [r7, #20]
			break;
 8004070:	e042      	b.n	80040f8 <get_fat+0x1e8>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	2384      	movs	r3, #132	; 0x84
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	58d4      	ldr	r4, [r2, r3]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a22      	ldr	r2, [pc, #136]	; (8004108 <get_fat+0x1f8>)
 800407e:	5a9b      	ldrh	r3, [r3, r2]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	b29b      	uxth	r3, r3
 8004084:	0019      	movs	r1, r3
 8004086:	6838      	ldr	r0, [r7, #0]
 8004088:	f7fc f83e 	bl	8000108 <__udivsi3>
 800408c:	0003      	movs	r3, r0
 800408e:	18e2      	adds	r2, r4, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff fe07 	bl	8003ca8 <move_window>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d12b      	bne.n	80040f6 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4918      	ldr	r1, [pc, #96]	; (8004108 <get_fat+0x1f8>)
 80040a6:	5a5b      	ldrh	r3, [r3, r1]
 80040a8:	0019      	movs	r1, r3
 80040aa:	0010      	movs	r0, r2
 80040ac:	f7fc f8b2 	bl	8000214 <__aeabi_uidivmod>
 80040b0:	000b      	movs	r3, r1
 80040b2:	001a      	movs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3303      	adds	r3, #3
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	061a      	lsls	r2, r3, #24
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3302      	adds	r3, #2
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	4313      	orrs	r3, r2
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	3201      	adds	r2, #1
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	0212      	lsls	r2, r2, #8
 80040d4:	4313      	orrs	r3, r2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	617b      	str	r3, [r7, #20]
			break;
 80040e2:	e009      	b.n	80040f8 <get_fat+0x1e8>

		default:
			val = 1;	/* Internal error */
 80040e4:	2301      	movs	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	e006      	b.n	80040f8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	e004      	b.n	80040f8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	e002      	b.n	80040f8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	e000      	b.n	80040f8 <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80040f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 80040f8:	697b      	ldr	r3, [r7, #20]
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b007      	add	sp, #28
 8004100:	bd90      	pop	{r4, r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	00000414 	.word	0x00000414
 8004108:	0000040a 	.word	0x0000040a

0800410c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800410c:	b5b0      	push	{r4, r5, r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d905      	bls.n	800412a <put_fat+0x1e>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4aab      	ldr	r2, [pc, #684]	; (80043d0 <put_fat+0x2c4>)
 8004122:	589b      	ldr	r3, [r3, r2]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	429a      	cmp	r2, r3
 8004128:	d304      	bcc.n	8004134 <put_fat+0x28>
		res = FR_INT_ERR;
 800412a:	231f      	movs	r3, #31
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e145      	b.n	80043c0 <put_fat+0x2b4>

	} else {
		switch (fs->fs_type) {
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	5cd3      	ldrb	r3, [r2, r3]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d100      	bne.n	8004142 <put_fat+0x36>
 8004140:	e0d5      	b.n	80042ee <put_fat+0x1e2>
 8004142:	dd00      	ble.n	8004146 <put_fat+0x3a>
 8004144:	e130      	b.n	80043a8 <put_fat+0x29c>
 8004146:	2b01      	cmp	r3, #1
 8004148:	d003      	beq.n	8004152 <put_fat+0x46>
 800414a:	2b02      	cmp	r3, #2
 800414c:	d100      	bne.n	8004150 <put_fat+0x44>
 800414e:	e092      	b.n	8004276 <put_fat+0x16a>
 8004150:	e12a      	b.n	80043a8 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	2384      	movs	r3, #132	; 0x84
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	58d4      	ldr	r4, [r2, r3]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a9a      	ldr	r2, [pc, #616]	; (80043d4 <put_fat+0x2c8>)
 800416c:	5a9b      	ldrh	r3, [r3, r2]
 800416e:	0019      	movs	r1, r3
 8004170:	6978      	ldr	r0, [r7, #20]
 8004172:	f7fb ffc9 	bl	8000108 <__udivsi3>
 8004176:	0003      	movs	r3, r0
 8004178:	18e2      	adds	r2, r4, r3
 800417a:	251f      	movs	r5, #31
 800417c:	197c      	adds	r4, r7, r5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	0011      	movs	r1, r2
 8004182:	0018      	movs	r0, r3
 8004184:	f7ff fd90 	bl	8003ca8 <move_window>
 8004188:	0003      	movs	r3, r0
 800418a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800418c:	197b      	adds	r3, r7, r5
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d000      	beq.n	8004196 <put_fat+0x8a>
 8004194:	e10d      	b.n	80043b2 <put_fat+0x2a6>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	617a      	str	r2, [r7, #20]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	498d      	ldr	r1, [pc, #564]	; (80043d4 <put_fat+0x2c8>)
 80041a0:	5a52      	ldrh	r2, [r2, r1]
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7fc f835 	bl	8000214 <__aeabi_uidivmod>
 80041aa:	000b      	movs	r3, r1
 80041ac:	001a      	movs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2201      	movs	r2, #1
 80041b8:	4013      	ands	r3, r2
 80041ba:	d00d      	beq.n	80041d8 <put_fat+0xcc>
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	220f      	movs	r2, #15
 80041c4:	4013      	ands	r3, r2
 80041c6:	b25a      	sxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	b25b      	sxtb	r3, r3
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e001      	b.n	80041dc <put_fat+0xd0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a7d      	ldr	r2, [pc, #500]	; (80043d8 <put_fat+0x2cc>)
 80041e4:	2101      	movs	r1, #1
 80041e6:	5499      	strb	r1, [r3, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	2384      	movs	r3, #132	; 0x84
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	58d4      	ldr	r4, [r2, r3]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a78      	ldr	r2, [pc, #480]	; (80043d4 <put_fat+0x2c8>)
 80041f4:	5a9b      	ldrh	r3, [r3, r2]
 80041f6:	0019      	movs	r1, r3
 80041f8:	6978      	ldr	r0, [r7, #20]
 80041fa:	f7fb ff85 	bl	8000108 <__udivsi3>
 80041fe:	0003      	movs	r3, r0
 8004200:	18e2      	adds	r2, r4, r3
 8004202:	251f      	movs	r5, #31
 8004204:	197c      	adds	r4, r7, r5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff fd4c 	bl	8003ca8 <move_window>
 8004210:	0003      	movs	r3, r0
 8004212:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004214:	197b      	adds	r3, r7, r5
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d000      	beq.n	800421e <put_fat+0x112>
 800421c:	e0cb      	b.n	80043b6 <put_fat+0x2aa>
			p = &fs->win.d8[bc % SS(fs)];
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a6c      	ldr	r2, [pc, #432]	; (80043d4 <put_fat+0x2c8>)
 8004222:	5a9b      	ldrh	r3, [r3, r2]
 8004224:	001a      	movs	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f7fb fff2 	bl	8000214 <__aeabi_uidivmod>
 8004230:	000b      	movs	r3, r1
 8004232:	001a      	movs	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	189b      	adds	r3, r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2201      	movs	r2, #1
 800423e:	4013      	ands	r3, r2
 8004240:	d003      	beq.n	800424a <put_fat+0x13e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	b2db      	uxtb	r3, r3
 8004248:	e00e      	b.n	8004268 <put_fat+0x15c>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b25b      	sxtb	r3, r3
 8004250:	220f      	movs	r2, #15
 8004252:	4393      	bics	r3, r2
 8004254:	b25a      	sxtb	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	b25b      	sxtb	r3, r3
 800425c:	210f      	movs	r1, #15
 800425e:	400b      	ands	r3, r1
 8004260:	b25b      	sxtb	r3, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	b25b      	sxtb	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a5a      	ldr	r2, [pc, #360]	; (80043d8 <put_fat+0x2cc>)
 8004270:	2101      	movs	r1, #1
 8004272:	5499      	strb	r1, [r3, r2]
			break;
 8004274:	e0a4      	b.n	80043c0 <put_fat+0x2b4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	2384      	movs	r3, #132	; 0x84
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	58d4      	ldr	r4, [r2, r3]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <put_fat+0x2c8>)
 8004282:	5a9b      	ldrh	r3, [r3, r2]
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	b29b      	uxth	r3, r3
 8004288:	0019      	movs	r1, r3
 800428a:	68b8      	ldr	r0, [r7, #8]
 800428c:	f7fb ff3c 	bl	8000108 <__udivsi3>
 8004290:	0003      	movs	r3, r0
 8004292:	18e2      	adds	r2, r4, r3
 8004294:	251f      	movs	r5, #31
 8004296:	197c      	adds	r4, r7, r5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	0011      	movs	r1, r2
 800429c:	0018      	movs	r0, r3
 800429e:	f7ff fd03 	bl	8003ca8 <move_window>
 80042a2:	0003      	movs	r3, r0
 80042a4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80042a6:	197b      	adds	r3, r7, r5
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d000      	beq.n	80042b0 <put_fat+0x1a4>
 80042ae:	e084      	b.n	80043ba <put_fat+0x2ae>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	005a      	lsls	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4947      	ldr	r1, [pc, #284]	; (80043d4 <put_fat+0x2c8>)
 80042b8:	5a5b      	ldrh	r3, [r3, r1]
 80042ba:	0019      	movs	r1, r3
 80042bc:	0010      	movs	r0, r2
 80042be:	f7fb ffa9 	bl	8000214 <__aeabi_uidivmod>
 80042c2:	000b      	movs	r3, r1
 80042c4:	001a      	movs	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	b29a      	uxth	r2, r3
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	3301      	adds	r3, #1
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a3c      	ldr	r2, [pc, #240]	; (80043d8 <put_fat+0x2cc>)
 80042e8:	2101      	movs	r1, #1
 80042ea:	5499      	strb	r1, [r3, r2]
			break;
 80042ec:	e068      	b.n	80043c0 <put_fat+0x2b4>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	2384      	movs	r3, #132	; 0x84
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	58d4      	ldr	r4, [r2, r3]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a36      	ldr	r2, [pc, #216]	; (80043d4 <put_fat+0x2c8>)
 80042fa:	5a9b      	ldrh	r3, [r3, r2]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	0019      	movs	r1, r3
 8004302:	68b8      	ldr	r0, [r7, #8]
 8004304:	f7fb ff00 	bl	8000108 <__udivsi3>
 8004308:	0003      	movs	r3, r0
 800430a:	18e2      	adds	r2, r4, r3
 800430c:	251f      	movs	r5, #31
 800430e:	197c      	adds	r4, r7, r5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0011      	movs	r1, r2
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff fcc7 	bl	8003ca8 <move_window>
 800431a:	0003      	movs	r3, r0
 800431c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800431e:	197b      	adds	r3, r7, r5
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d14b      	bne.n	80043be <put_fat+0x2b2>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	009a      	lsls	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4929      	ldr	r1, [pc, #164]	; (80043d4 <put_fat+0x2c8>)
 800432e:	5a5b      	ldrh	r3, [r3, r1]
 8004330:	0019      	movs	r1, r3
 8004332:	0010      	movs	r0, r2
 8004334:	f7fb ff6e 	bl	8000214 <__aeabi_uidivmod>
 8004338:	000b      	movs	r3, r1
 800433a:	001a      	movs	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	189b      	adds	r3, r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	3303      	adds	r3, #3
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	061a      	lsls	r2, r3, #24
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	3302      	adds	r3, #2
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	4313      	orrs	r3, r2
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	3201      	adds	r2, #1
 8004358:	7812      	ldrb	r2, [r2, #0]
 800435a:	0212      	lsls	r2, r2, #8
 800435c:	4313      	orrs	r3, r2
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	0f1b      	lsrs	r3, r3, #28
 8004366:	071b      	lsls	r3, r3, #28
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4313      	orrs	r3, r2
 800436c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	b29b      	uxth	r3, r3
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	b29a      	uxth	r2, r3
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3301      	adds	r3, #1
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0c1a      	lsrs	r2, r3, #16
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	3302      	adds	r3, #2
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0e1a      	lsrs	r2, r3, #24
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	3303      	adds	r3, #3
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <put_fat+0x2cc>)
 80043a2:	2101      	movs	r1, #1
 80043a4:	5499      	strb	r1, [r3, r2]
			break;
 80043a6:	e00b      	b.n	80043c0 <put_fat+0x2b4>

		default :
			res = FR_INT_ERR;
 80043a8:	231f      	movs	r3, #31
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2202      	movs	r2, #2
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e006      	b.n	80043c0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	e004      	b.n	80043c0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	e002      	b.n	80043c0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	e000      	b.n	80043c0 <put_fat+0x2b4>
			if (res != FR_OK) break;
 80043be:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80043c0:	231f      	movs	r3, #31
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b008      	add	sp, #32
 80043cc:	bdb0      	pop	{r4, r5, r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	00000414 	.word	0x00000414
 80043d4:	0000040a 	.word	0x0000040a
 80043d8:	00000404 	.word	0x00000404

080043dc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80043dc:	b5b0      	push	{r4, r5, r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d905      	bls.n	80043f8 <remove_chain+0x1c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a31      	ldr	r2, [pc, #196]	; (80044b4 <remove_chain+0xd8>)
 80043f0:	589b      	ldr	r3, [r3, r2]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d304      	bcc.n	8004402 <remove_chain+0x26>
		res = FR_INT_ERR;
 80043f8:	230f      	movs	r3, #15
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	2202      	movs	r2, #2
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e051      	b.n	80044a6 <remove_chain+0xca>

	} else {
		res = FR_OK;
 8004402:	230f      	movs	r3, #15
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800440a:	e042      	b.n	8004492 <remove_chain+0xb6>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff fd7c 	bl	8003f10 <get_fat>
 8004418:	0003      	movs	r3, r0
 800441a:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03e      	beq.n	80044a0 <remove_chain+0xc4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d104      	bne.n	8004432 <remove_chain+0x56>
 8004428:	230f      	movs	r3, #15
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	2202      	movs	r2, #2
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e039      	b.n	80044a6 <remove_chain+0xca>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3301      	adds	r3, #1
 8004436:	d104      	bne.n	8004442 <remove_chain+0x66>
 8004438:	230f      	movs	r3, #15
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e031      	b.n	80044a6 <remove_chain+0xca>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004442:	250f      	movs	r5, #15
 8004444:	197c      	adds	r4, r7, r5
 8004446:	6839      	ldr	r1, [r7, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fe5d 	bl	800410c <put_fat>
 8004452:	0003      	movs	r3, r0
 8004454:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004456:	197b      	adds	r3, r7, r5
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d122      	bne.n	80044a4 <remove_chain+0xc8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	2382      	movs	r3, #130	; 0x82
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	58d3      	ldr	r3, [r2, r3]
 8004466:	3301      	adds	r3, #1
 8004468:	d011      	beq.n	800448e <remove_chain+0xb2>
				fs->free_clust++;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	2382      	movs	r3, #130	; 0x82
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	58d3      	ldr	r3, [r2, r3]
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	2382      	movs	r3, #130	; 0x82
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <remove_chain+0xdc>)
 8004480:	5c9b      	ldrb	r3, [r3, r2]
 8004482:	2201      	movs	r2, #1
 8004484:	4313      	orrs	r3, r2
 8004486:	b2d9      	uxtb	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a0b      	ldr	r2, [pc, #44]	; (80044b8 <remove_chain+0xdc>)
 800448c:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <remove_chain+0xd8>)
 8004496:	589b      	ldr	r3, [r3, r2]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d3b6      	bcc.n	800440c <remove_chain+0x30>
 800449e:	e002      	b.n	80044a6 <remove_chain+0xca>
			if (nxt == 0) break;				/* Empty cluster? */
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	e000      	b.n	80044a6 <remove_chain+0xca>
			if (res != FR_OK) break;
 80044a4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80044a6:	230f      	movs	r3, #15
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	781b      	ldrb	r3, [r3, #0]
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b004      	add	sp, #16
 80044b2:	bdb0      	pop	{r4, r5, r7, pc}
 80044b4:	00000414 	.word	0x00000414
 80044b8:	00000405 	.word	0x00000405

080044bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10f      	bne.n	80044ec <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a51      	ldr	r2, [pc, #324]	; (8004614 <create_chain+0x158>)
 80044d0:	589b      	ldr	r3, [r3, r2]
 80044d2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <create_chain+0x2a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4e      	ldr	r2, [pc, #312]	; (8004618 <create_chain+0x15c>)
 80044de:	589b      	ldr	r3, [r3, r2]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d31e      	bcc.n	8004524 <create_chain+0x68>
 80044e6:	2301      	movs	r3, #1
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	e01b      	b.n	8004524 <create_chain+0x68>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0011      	movs	r1, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	f7ff fd0c 	bl	8003f10 <get_fat>
 80044f8:	0003      	movs	r3, r0
 80044fa:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d801      	bhi.n	8004506 <create_chain+0x4a>
 8004502:	2301      	movs	r3, #1
 8004504:	e082      	b.n	800460c <create_chain+0x150>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	d101      	bne.n	8004510 <create_chain+0x54>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	e07d      	b.n	800460c <create_chain+0x150>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a41      	ldr	r2, [pc, #260]	; (8004618 <create_chain+0x15c>)
 8004514:	589b      	ldr	r3, [r3, r2]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d201      	bcs.n	8004520 <create_chain+0x64>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	e075      	b.n	800460c <create_chain+0x150>
		scl = clst;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3301      	adds	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a39      	ldr	r2, [pc, #228]	; (8004618 <create_chain+0x15c>)
 8004532:	589b      	ldr	r3, [r3, r2]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	429a      	cmp	r2, r3
 8004538:	d307      	bcc.n	800454a <create_chain+0x8e>
			ncl = 2;
 800453a:	2302      	movs	r3, #2
 800453c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	429a      	cmp	r2, r3
 8004544:	d901      	bls.n	800454a <create_chain+0x8e>
 8004546:	2300      	movs	r3, #0
 8004548:	e060      	b.n	800460c <create_chain+0x150>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0011      	movs	r1, r2
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff fcdd 	bl	8003f10 <get_fat>
 8004556:	0003      	movs	r3, r0
 8004558:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00d      	beq.n	800457c <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3301      	adds	r3, #1
 8004564:	d002      	beq.n	800456c <create_chain+0xb0>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <create_chain+0xb4>
			return cs;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	e04d      	b.n	800460c <create_chain+0x150>
		if (ncl == scl) return 0;		/* No free cluster */
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d1d7      	bne.n	8004528 <create_chain+0x6c>
 8004578:	2300      	movs	r3, #0
 800457a:	e047      	b.n	800460c <create_chain+0x150>
		if (cs == 0) break;				/* Found a free cluster */
 800457c:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800457e:	250f      	movs	r5, #15
 8004580:	197c      	adds	r4, r7, r5
 8004582:	4a26      	ldr	r2, [pc, #152]	; (800461c <create_chain+0x160>)
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f7ff fdbf 	bl	800410c <put_fat>
 800458e:	0003      	movs	r3, r0
 8004590:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 8004592:	197b      	adds	r3, r7, r5
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10b      	bne.n	80045b2 <create_chain+0xf6>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <create_chain+0xf6>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80045a0:	197c      	adds	r4, r7, r5
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7ff fdaf 	bl	800410c <put_fat>
 80045ae:	0003      	movs	r3, r0
 80045b0:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 80045b2:	230f      	movs	r3, #15
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11c      	bne.n	80045f6 <create_chain+0x13a>
		fs->last_clust = ncl;			/* Update FSINFO */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4915      	ldr	r1, [pc, #84]	; (8004614 <create_chain+0x158>)
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	505a      	str	r2, [r3, r1]
		if (fs->free_clust != 0xFFFFFFFF) {
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	2382      	movs	r3, #130	; 0x82
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	58d3      	ldr	r3, [r2, r3]
 80045cc:	3301      	adds	r3, #1
 80045ce:	d01c      	beq.n	800460a <create_chain+0x14e>
			fs->free_clust--;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	2382      	movs	r3, #130	; 0x82
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	58d3      	ldr	r3, [r2, r3]
 80045d8:	1e59      	subs	r1, r3, #1
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	2382      	movs	r3, #130	; 0x82
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a0e      	ldr	r2, [pc, #56]	; (8004620 <create_chain+0x164>)
 80045e6:	5c9b      	ldrb	r3, [r3, r2]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b2d9      	uxtb	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <create_chain+0x164>)
 80045f2:	5499      	strb	r1, [r3, r2]
 80045f4:	e009      	b.n	800460a <create_chain+0x14e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80045f6:	230f      	movs	r3, #15
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d102      	bne.n	8004606 <create_chain+0x14a>
 8004600:	2301      	movs	r3, #1
 8004602:	425b      	negs	r3, r3
 8004604:	e000      	b.n	8004608 <create_chain+0x14c>
 8004606:	2301      	movs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800460a:	697b      	ldr	r3, [r7, #20]
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b006      	add	sp, #24
 8004612:	bdb0      	pop	{r4, r5, r7, pc}
 8004614:	0000040c 	.word	0x0000040c
 8004618:	00000414 	.word	0x00000414
 800461c:	0fffffff 	.word	0x0fffffff
 8004620:	00000405 	.word	0x00000405

08004624 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <clmt_clust+0x80>)
 8004632:	589b      	ldr	r3, [r3, r2]
 8004634:	3304      	adds	r3, #4
 8004636:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	58d3      	ldr	r3, [r2, r3]
 8004640:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <clmt_clust+0x84>)
 8004642:	5a9b      	ldrh	r3, [r3, r2]
 8004644:	0019      	movs	r1, r3
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f7fb fd5e 	bl	8000108 <__udivsi3>
 800464c:	0003      	movs	r3, r0
 800464e:	0018      	movs	r0, r3
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	58d3      	ldr	r3, [r2, r3]
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <clmt_clust+0x88>)
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	0019      	movs	r1, r3
 800465e:	f7fb fd53 	bl	8000108 <__udivsi3>
 8004662:	0003      	movs	r3, r0
 8004664:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1d1a      	adds	r2, r3, #4
 800466a:	613a      	str	r2, [r7, #16]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <clmt_clust+0x56>
 8004676:	2300      	movs	r3, #0
 8004678:	e010      	b.n	800469c <clmt_clust+0x78>
		if (cl < ncl) break;	/* In this fragment? */
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	429a      	cmp	r2, r3
 8004680:	d307      	bcc.n	8004692 <clmt_clust+0x6e>
		cl -= ncl; tbl++;		/* Next fragment */
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3304      	adds	r3, #4
 800468e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004690:	e7e9      	b.n	8004666 <clmt_clust+0x42>
		if (cl < ncl) break;	/* In this fragment? */
 8004692:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	18d3      	adds	r3, r2, r3
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b006      	add	sp, #24
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	00000424 	.word	0x00000424
 80046a8:	0000040a 	.word	0x0000040a
 80046ac:	00000402 	.word	0x00000402

080046b0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b299      	uxth	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a5e      	ldr	r2, [pc, #376]	; (800483c <dir_sdi+0x18c>)
 80046c2:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	2381      	movs	r3, #129	; 0x81
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	58d3      	ldr	r3, [r2, r3]
 80046cc:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d008      	beq.n	80046e6 <dir_sdi+0x36>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	58d3      	ldr	r3, [r2, r3]
 80046dc:	4a58      	ldr	r2, [pc, #352]	; (8004840 <dir_sdi+0x190>)
 80046de:	589b      	ldr	r3, [r3, r2]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d301      	bcc.n	80046ea <dir_sdi+0x3a>
		return FR_INT_ERR;
 80046e6:	2302      	movs	r3, #2
 80046e8:	e0a4      	b.n	8004834 <dir_sdi+0x184>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10f      	bne.n	8004710 <dir_sdi+0x60>
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	58d2      	ldr	r2, [r2, r3]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	5cd3      	ldrb	r3, [r2, r3]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d106      	bne.n	8004710 <dir_sdi+0x60>
		clst = dp->fs->dirbase;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	58d3      	ldr	r3, [r2, r3]
 800470a:	4a4e      	ldr	r2, [pc, #312]	; (8004844 <dir_sdi+0x194>)
 800470c:	589b      	ldr	r3, [r3, r2]
 800470e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d114      	bne.n	8004740 <dir_sdi+0x90>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	58d2      	ldr	r2, [r2, r3]
 800471e:	2381      	movs	r3, #129	; 0x81
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	5ad3      	ldrh	r3, [r2, r3]
 8004724:	001a      	movs	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	4293      	cmp	r3, r2
 800472a:	d301      	bcc.n	8004730 <dir_sdi+0x80>
			return FR_INT_ERR;
 800472c:	2302      	movs	r3, #2
 800472e:	e081      	b.n	8004834 <dir_sdi+0x184>
		sect = dp->fs->dirbase;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	58d3      	ldr	r3, [r2, r3]
 8004738:	4a42      	ldr	r2, [pc, #264]	; (8004844 <dir_sdi+0x194>)
 800473a:	589b      	ldr	r3, [r3, r2]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e042      	b.n	80047c6 <dir_sdi+0x116>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	58d3      	ldr	r3, [r2, r3]
 8004748:	4a3f      	ldr	r2, [pc, #252]	; (8004848 <dir_sdi+0x198>)
 800474a:	5a9b      	ldrh	r3, [r3, r2]
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	b29b      	uxth	r3, r3
 8004750:	0019      	movs	r1, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	58d3      	ldr	r3, [r2, r3]
 800475a:	4a3c      	ldr	r2, [pc, #240]	; (800484c <dir_sdi+0x19c>)
 800475c:	5c9b      	ldrb	r3, [r3, r2]
 800475e:	434b      	muls	r3, r1
 8004760:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004762:	e021      	b.n	80047a8 <dir_sdi+0xf8>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	58d3      	ldr	r3, [r2, r3]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	0011      	movs	r1, r2
 8004770:	0018      	movs	r0, r3
 8004772:	f7ff fbcd 	bl	8003f10 <get_fat>
 8004776:	0003      	movs	r3, r0
 8004778:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3301      	adds	r3, #1
 800477e:	d101      	bne.n	8004784 <dir_sdi+0xd4>
 8004780:	2301      	movs	r3, #1
 8004782:	e057      	b.n	8004834 <dir_sdi+0x184>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d908      	bls.n	800479c <dir_sdi+0xec>
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	58d3      	ldr	r3, [r2, r3]
 8004792:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <dir_sdi+0x190>)
 8004794:	589b      	ldr	r3, [r3, r2]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	429a      	cmp	r2, r3
 800479a:	d301      	bcc.n	80047a0 <dir_sdi+0xf0>
				return FR_INT_ERR;
 800479c:	2302      	movs	r3, #2
 800479e:	e049      	b.n	8004834 <dir_sdi+0x184>
			idx -= ic;
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d2d9      	bcs.n	8004764 <dir_sdi+0xb4>
		}
		sect = clust2sect(dp->fs, clst);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	58d3      	ldr	r3, [r2, r3]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	0011      	movs	r1, r2
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff fb83 	bl	8003ec8 <clust2sect>
 80047c2:	0003      	movs	r3, r0
 80047c4:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4921      	ldr	r1, [pc, #132]	; (8004850 <dir_sdi+0x1a0>)
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	505a      	str	r2, [r3, r1]
	if (!sect) return FR_INT_ERR;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <dir_sdi+0x128>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e02d      	b.n	8004834 <dir_sdi+0x184>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	58d3      	ldr	r3, [r2, r3]
 80047e0:	4a19      	ldr	r2, [pc, #100]	; (8004848 <dir_sdi+0x198>)
 80047e2:	5a9b      	ldrh	r3, [r3, r2]
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	0019      	movs	r1, r3
 80047ea:	6838      	ldr	r0, [r7, #0]
 80047ec:	f7fb fc8c 	bl	8000108 <__udivsi3>
 80047f0:	0003      	movs	r3, r0
 80047f2:	001a      	movs	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	18d1      	adds	r1, r2, r3
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	2382      	movs	r3, #130	; 0x82
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	58d3      	ldr	r3, [r2, r3]
 8004808:	001c      	movs	r4, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	58d3      	ldr	r3, [r2, r3]
 8004812:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <dir_sdi+0x198>)
 8004814:	5a9b      	ldrh	r3, [r3, r2]
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	b29b      	uxth	r3, r3
 800481a:	001a      	movs	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	0011      	movs	r1, r2
 8004820:	0018      	movs	r0, r3
 8004822:	f7fb fcf7 	bl	8000214 <__aeabi_uidivmod>
 8004826:	000b      	movs	r3, r1
 8004828:	015b      	lsls	r3, r3, #5
 800482a:	18e2      	adds	r2, r4, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4904      	ldr	r1, [pc, #16]	; (8004840 <dir_sdi+0x190>)
 8004830:	505a      	str	r2, [r3, r1]

	return FR_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b007      	add	sp, #28
 800483a:	bd90      	pop	{r4, r7, pc}
 800483c:	00000406 	.word	0x00000406
 8004840:	00000414 	.word	0x00000414
 8004844:	00000424 	.word	0x00000424
 8004848:	0000040a 	.word	0x0000040a
 800484c:	00000402 	.word	0x00000402
 8004850:	0000040c 	.word	0x0000040c

08004854 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a96      	ldr	r2, [pc, #600]	; (8004abc <dir_next+0x268>)
 8004862:	5a9b      	ldrh	r3, [r3, r2]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	d005      	beq.n	800487c <dir_next+0x28>
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	2382      	movs	r3, #130	; 0x82
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	58d3      	ldr	r3, [r2, r3]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <dir_next+0x2c>
		return FR_NO_FILE;
 800487c:	2304      	movs	r3, #4
 800487e:	e119      	b.n	8004ab4 <dir_next+0x260>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	58d3      	ldr	r3, [r2, r3]
 8004888:	4a8d      	ldr	r2, [pc, #564]	; (8004ac0 <dir_next+0x26c>)
 800488a:	5a9b      	ldrh	r3, [r3, r2]
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	b29b      	uxth	r3, r3
 8004890:	001a      	movs	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0011      	movs	r1, r2
 8004896:	0018      	movs	r0, r3
 8004898:	f7fb fcbc 	bl	8000214 <__aeabi_uidivmod>
 800489c:	1e0b      	subs	r3, r1, #0
 800489e:	d000      	beq.n	80048a2 <dir_next+0x4e>
 80048a0:	e0e9      	b.n	8004a76 <dir_next+0x222>
		dp->sect++;					/* Next sector */
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	2382      	movs	r3, #130	; 0x82
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	58d3      	ldr	r3, [r2, r3]
 80048aa:	1c59      	adds	r1, r3, #1
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	2382      	movs	r3, #130	; 0x82
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a83      	ldr	r2, [pc, #524]	; (8004ac4 <dir_next+0x270>)
 80048b8:	589b      	ldr	r3, [r3, r2]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10d      	bne.n	80048da <dir_next+0x86>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	58d2      	ldr	r2, [r2, r3]
 80048c6:	2381      	movs	r3, #129	; 0x81
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	5ad3      	ldrh	r3, [r2, r3]
 80048cc:	001a      	movs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d200      	bcs.n	80048d6 <dir_next+0x82>
 80048d4:	e0cf      	b.n	8004a76 <dir_next+0x222>
				return FR_NO_FILE;
 80048d6:	2304      	movs	r3, #4
 80048d8:	e0ec      	b.n	8004ab4 <dir_next+0x260>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	58d3      	ldr	r3, [r2, r3]
 80048e2:	4a77      	ldr	r2, [pc, #476]	; (8004ac0 <dir_next+0x26c>)
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	0019      	movs	r1, r3
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7fb fc0b 	bl	8000108 <__udivsi3>
 80048f2:	0003      	movs	r3, r0
 80048f4:	0019      	movs	r1, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	58d3      	ldr	r3, [r2, r3]
 80048fe:	4a72      	ldr	r2, [pc, #456]	; (8004ac8 <dir_next+0x274>)
 8004900:	5c9b      	ldrb	r3, [r3, r2]
 8004902:	3b01      	subs	r3, #1
 8004904:	400b      	ands	r3, r1
 8004906:	d000      	beq.n	800490a <dir_next+0xb6>
 8004908:	e0b5      	b.n	8004a76 <dir_next+0x222>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	58d2      	ldr	r2, [r2, r3]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	496b      	ldr	r1, [pc, #428]	; (8004ac4 <dir_next+0x270>)
 8004916:	585b      	ldr	r3, [r3, r1]
 8004918:	0019      	movs	r1, r3
 800491a:	0010      	movs	r0, r2
 800491c:	f7ff faf8 	bl	8003f10 <get_fat>
 8004920:	0003      	movs	r3, r0
 8004922:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d801      	bhi.n	800492e <dir_next+0xda>
 800492a:	2302      	movs	r3, #2
 800492c:	e0c2      	b.n	8004ab4 <dir_next+0x260>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3301      	adds	r3, #1
 8004932:	d101      	bne.n	8004938 <dir_next+0xe4>
 8004934:	2301      	movs	r3, #1
 8004936:	e0bd      	b.n	8004ab4 <dir_next+0x260>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	58d3      	ldr	r3, [r2, r3]
 8004940:	4a62      	ldr	r2, [pc, #392]	; (8004acc <dir_next+0x278>)
 8004942:	589b      	ldr	r3, [r3, r2]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	429a      	cmp	r2, r3
 8004948:	d200      	bcs.n	800494c <dir_next+0xf8>
 800494a:	e082      	b.n	8004a52 <dir_next+0x1fe>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <dir_next+0x102>
 8004952:	2304      	movs	r3, #4
 8004954:	e0ae      	b.n	8004ab4 <dir_next+0x260>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	58d2      	ldr	r2, [r2, r3]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4958      	ldr	r1, [pc, #352]	; (8004ac4 <dir_next+0x270>)
 8004962:	585b      	ldr	r3, [r3, r1]
 8004964:	0019      	movs	r1, r3
 8004966:	0010      	movs	r0, r2
 8004968:	f7ff fda8 	bl	80044bc <create_chain>
 800496c:	0003      	movs	r3, r0
 800496e:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <dir_next+0x126>
 8004976:	2307      	movs	r3, #7
 8004978:	e09c      	b.n	8004ab4 <dir_next+0x260>
					if (clst == 1) return FR_INT_ERR;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <dir_next+0x130>
 8004980:	2302      	movs	r3, #2
 8004982:	e097      	b.n	8004ab4 <dir_next+0x260>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	3301      	adds	r3, #1
 8004988:	d101      	bne.n	800498e <dir_next+0x13a>
 800498a:	2301      	movs	r3, #1
 800498c:	e092      	b.n	8004ab4 <dir_next+0x260>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	58d3      	ldr	r3, [r2, r3]
 8004996:	0018      	movs	r0, r3
 8004998:	f7ff f92e 	bl	8003bf8 <sync_window>
 800499c:	1e03      	subs	r3, r0, #0
 800499e:	d001      	beq.n	80049a4 <dir_next+0x150>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e087      	b.n	8004ab4 <dir_next+0x260>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	58d3      	ldr	r3, [r2, r3]
 80049ac:	0018      	movs	r0, r3
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	58d3      	ldr	r3, [r2, r3]
 80049b6:	4a42      	ldr	r2, [pc, #264]	; (8004ac0 <dir_next+0x26c>)
 80049b8:	5a9b      	ldrh	r3, [r3, r2]
 80049ba:	001a      	movs	r2, r3
 80049bc:	2100      	movs	r1, #0
 80049be:	f7fe ff04 	bl	80037ca <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	58d0      	ldr	r0, [r2, r3]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	58d4      	ldr	r4, [r2, r3]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	0019      	movs	r1, r3
 80049d6:	f7ff fa77 	bl	8003ec8 <clust2sect>
 80049da:	0003      	movs	r3, r0
 80049dc:	4a3c      	ldr	r2, [pc, #240]	; (8004ad0 <dir_next+0x27c>)
 80049de:	50a3      	str	r3, [r4, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e01d      	b.n	8004a22 <dir_next+0x1ce>
						dp->fs->wflag = 1;
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	58d3      	ldr	r3, [r2, r3]
 80049ee:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <dir_next+0x280>)
 80049f0:	2101      	movs	r1, #1
 80049f2:	5499      	strb	r1, [r3, r2]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	58d3      	ldr	r3, [r2, r3]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7ff f8fb 	bl	8003bf8 <sync_window>
 8004a02:	1e03      	subs	r3, r0, #0
 8004a04:	d001      	beq.n	8004a0a <dir_next+0x1b6>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e054      	b.n	8004ab4 <dir_next+0x260>
						dp->fs->winsect++;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	58d3      	ldr	r3, [r2, r3]
 8004a12:	4a2f      	ldr	r2, [pc, #188]	; (8004ad0 <dir_next+0x27c>)
 8004a14:	589a      	ldr	r2, [r3, r2]
 8004a16:	3201      	adds	r2, #1
 8004a18:	492d      	ldr	r1, [pc, #180]	; (8004ad0 <dir_next+0x27c>)
 8004a1a:	505a      	str	r2, [r3, r1]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	58d3      	ldr	r3, [r2, r3]
 8004a2a:	4a27      	ldr	r2, [pc, #156]	; (8004ac8 <dir_next+0x274>)
 8004a2c:	5c9b      	ldrb	r3, [r3, r2]
 8004a2e:	001a      	movs	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d3d7      	bcc.n	80049e6 <dir_next+0x192>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	58d3      	ldr	r3, [r2, r3]
 8004a3e:	4a24      	ldr	r2, [pc, #144]	; (8004ad0 <dir_next+0x27c>)
 8004a40:	5899      	ldr	r1, [r3, r2]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	58d3      	ldr	r3, [r2, r3]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	1a8a      	subs	r2, r1, r2
 8004a4e:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <dir_next+0x27c>)
 8004a50:	505a      	str	r2, [r3, r1]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	491b      	ldr	r1, [pc, #108]	; (8004ac4 <dir_next+0x270>)
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	505a      	str	r2, [r3, r1]
				dp->sect = clust2sect(dp->fs, clst);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	58d3      	ldr	r3, [r2, r3]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	0011      	movs	r1, r2
 8004a66:	0018      	movs	r0, r3
 8004a68:	f7ff fa2e 	bl	8003ec8 <clust2sect>
 8004a6c:	0001      	movs	r1, r0
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	2382      	movs	r3, #130	; 0x82
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	b299      	uxth	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <dir_next+0x268>)
 8004a7e:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	58d3      	ldr	r3, [r2, r3]
 8004a88:	001c      	movs	r4, r3
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	58d3      	ldr	r3, [r2, r3]
 8004a92:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <dir_next+0x26c>)
 8004a94:	5a9b      	ldrh	r3, [r3, r2]
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	0011      	movs	r1, r2
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7fb fbb7 	bl	8000214 <__aeabi_uidivmod>
 8004aa6:	000b      	movs	r3, r1
 8004aa8:	015b      	lsls	r3, r3, #5
 8004aaa:	18e2      	adds	r2, r4, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4907      	ldr	r1, [pc, #28]	; (8004acc <dir_next+0x278>)
 8004ab0:	505a      	str	r2, [r3, r1]

	return FR_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b007      	add	sp, #28
 8004aba:	bd90      	pop	{r4, r7, pc}
 8004abc:	00000406 	.word	0x00000406
 8004ac0:	0000040a 	.word	0x0000040a
 8004ac4:	0000040c 	.word	0x0000040c
 8004ac8:	00000402 	.word	0x00000402
 8004acc:	00000414 	.word	0x00000414
 8004ad0:	0000042c 	.word	0x0000042c
 8004ad4:	00000404 	.word	0x00000404

08004ad8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004ae2:	250f      	movs	r5, #15
 8004ae4:	197c      	adds	r4, r7, r5
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7ff fde0 	bl	80046b0 <dir_sdi>
 8004af0:	0003      	movs	r3, r0
 8004af2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004af4:	197b      	adds	r3, r7, r5
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d139      	bne.n	8004b70 <dir_alloc+0x98>
		n = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	58d0      	ldr	r0, [r2, r3]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	2382      	movs	r3, #130	; 0x82
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	58d3      	ldr	r3, [r2, r3]
 8004b10:	250f      	movs	r5, #15
 8004b12:	197c      	adds	r4, r7, r5
 8004b14:	0019      	movs	r1, r3
 8004b16:	f7ff f8c7 	bl	8003ca8 <move_window>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004b1e:	197b      	adds	r3, r7, r5
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d123      	bne.n	8004b6e <dir_alloc+0x96>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <dir_alloc+0xb8>)
 8004b2a:	589b      	ldr	r3, [r3, r2]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2be5      	cmp	r3, #229	; 0xe5
 8004b30:	d005      	beq.n	8004b3e <dir_alloc+0x66>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <dir_alloc+0xb8>)
 8004b36:	589b      	ldr	r3, [r3, r2]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d107      	bne.n	8004b4e <dir_alloc+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d102      	bne.n	8004b52 <dir_alloc+0x7a>
 8004b4c:	e010      	b.n	8004b70 <dir_alloc+0x98>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004b52:	250f      	movs	r5, #15
 8004b54:	197c      	adds	r4, r7, r5
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7ff fe7a 	bl	8004854 <dir_next>
 8004b60:	0003      	movs	r3, r0
 8004b62:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8004b64:	197b      	adds	r3, r7, r5
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0c9      	beq.n	8004b00 <dir_alloc+0x28>
 8004b6c:	e000      	b.n	8004b70 <dir_alloc+0x98>
			if (res != FR_OK) break;
 8004b6e:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004b70:	220f      	movs	r2, #15
 8004b72:	18bb      	adds	r3, r7, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d102      	bne.n	8004b80 <dir_alloc+0xa8>
 8004b7a:	18bb      	adds	r3, r7, r2
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	701a      	strb	r2, [r3, #0]
	return res;
 8004b80:	230f      	movs	r3, #15
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	781b      	ldrb	r3, [r3, #0]
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b004      	add	sp, #16
 8004b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	00000414 	.word	0x00000414

08004b94 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	331b      	adds	r3, #27
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	b21a      	sxth	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	331a      	adds	r3, #26
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b21b      	sxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b21b      	sxth	r3, r3
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	5cd3      	ldrb	r3, [r2, r3]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d10f      	bne.n	8004be4 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	3315      	adds	r3, #21
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	b21a      	sxth	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b21b      	sxth	r3, r3
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	041b      	lsls	r3, r3, #16
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

	return cl;
 8004be4:	68fb      	ldr	r3, [r7, #12]
}
 8004be6:	0018      	movs	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b004      	add	sp, #16
 8004bec:	bd80      	pop	{r7, pc}

08004bee <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	331a      	adds	r3, #26
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	331b      	adds	r3, #27
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	0c1a      	lsrs	r2, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3315      	adds	r3, #21
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b002      	add	sp, #8
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004c38:	b5b0      	push	{r4, r5, r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	001a      	movs	r2, r3
 8004c48:	2340      	movs	r3, #64	; 0x40
 8004c4a:	439a      	bics	r2, r3
 8004c4c:	0013      	movs	r3, r2
 8004c4e:	1e5a      	subs	r2, r3, #1
 8004c50:	0013      	movs	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	189b      	adds	r3, r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	230e      	movs	r3, #14
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	2201      	movs	r2, #1
 8004c66:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004c68:	4a30      	ldr	r2, [pc, #192]	; (8004d2c <cmp_lfn+0xf4>)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	18d3      	adds	r3, r2, r3
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	18d3      	adds	r3, r2, r3
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	b21a      	sxth	r2, r3
 8004c7c:	492b      	ldr	r1, [pc, #172]	; (8004d2c <cmp_lfn+0xf4>)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	18cb      	adds	r3, r1, r3
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	0019      	movs	r1, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	185b      	adds	r3, r3, r1
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b21b      	sxth	r3, r3
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b21a      	sxth	r2, r3
 8004c92:	210c      	movs	r1, #12
 8004c94:	187b      	adds	r3, r7, r1
 8004c96:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last character has not been processed */
 8004c98:	250e      	movs	r5, #14
 8004c9a:	197b      	adds	r3, r7, r5
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01c      	beq.n	8004cdc <cmp_lfn+0xa4>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004ca2:	197c      	adds	r4, r7, r5
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f002 f9f9 	bl	80070a0 <ff_wtoupper>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2bfe      	cmp	r3, #254	; 0xfe
 8004cb6:	d80f      	bhi.n	8004cd8 <cmp_lfn+0xa0>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	617a      	str	r2, [r7, #20]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f002 f9ea 	bl	80070a0 <ff_wtoupper>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	001a      	movs	r2, r3
 8004cd0:	197b      	adds	r3, r7, r5
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d009      	beq.n	8004cec <cmp_lfn+0xb4>
				return 0;				/* Not matched */
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e022      	b.n	8004d22 <cmp_lfn+0xea>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004cdc:	230c      	movs	r3, #12
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	4a13      	ldr	r2, [pc, #76]	; (8004d30 <cmp_lfn+0xf8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d001      	beq.n	8004cec <cmp_lfn+0xb4>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e01a      	b.n	8004d22 <cmp_lfn+0xea>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d9b7      	bls.n	8004c68 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	001a      	movs	r2, r3
 8004cfe:	2340      	movs	r3, #64	; 0x40
 8004d00:	4013      	ands	r3, r2
 8004d02:	d00d      	beq.n	8004d20 <cmp_lfn+0xe8>
 8004d04:	230e      	movs	r3, #14
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <cmp_lfn+0xe8>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	18d3      	adds	r3, r2, r3
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <cmp_lfn+0xe8>
		return 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e000      	b.n	8004d22 <cmp_lfn+0xea>

	return 1;						/* The part of LFN matched */
 8004d20:	2301      	movs	r3, #1
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b006      	add	sp, #24
 8004d28:	bdb0      	pop	{r4, r5, r7, pc}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	080072c4 	.word	0x080072c4
 8004d30:	0000ffff 	.word	0x0000ffff

08004d34 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	0019      	movs	r1, r3
 8004d40:	1dfb      	adds	r3, r7, #7
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	1dbb      	adds	r3, r7, #6
 8004d46:	1c0a      	adds	r2, r1, #0
 8004d48:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	330d      	adds	r3, #13
 8004d4e:	1dba      	adds	r2, r7, #6
 8004d50:	7812      	ldrb	r2, [r2, #0]
 8004d52:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	330b      	adds	r3, #11
 8004d58:	220f      	movs	r2, #15
 8004d5a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	331a      	adds	r3, #26
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	331b      	adds	r3, #27
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004d74:	1dfb      	adds	r3, r7, #7
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	1e5a      	subs	r2, r3, #1
 8004d7a:	0013      	movs	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004d86:	2316      	movs	r3, #22
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004d92:	2116      	movs	r1, #22
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <fit_lfn+0x100>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d008      	beq.n	8004db0 <fit_lfn+0x7c>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	61fa      	str	r2, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	18d2      	adds	r2, r2, r3
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	8812      	ldrh	r2, [r2, #0]
 8004dae:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <fit_lfn+0x104>)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	18d3      	adds	r3, r2, r3
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	001a      	movs	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	189b      	adds	r3, r3, r2
 8004dbe:	2016      	movs	r0, #22
 8004dc0:	183a      	adds	r2, r7, r0
 8004dc2:	8812      	ldrh	r2, [r2, #0]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	183b      	adds	r3, r7, r0
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	b299      	uxth	r1, r3
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <fit_lfn+0x104>)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	18d3      	adds	r3, r2, r3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	b2ca      	uxtb	r2, r1
 8004de0:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004de2:	183b      	adds	r3, r7, r0
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <fit_lfn+0xbe>
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	2201      	movs	r2, #1
 8004dee:	4252      	negs	r2, r2
 8004df0:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3301      	adds	r3, #1
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b0c      	cmp	r3, #12
 8004dfc:	d9c9      	bls.n	8004d92 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004dfe:	2316      	movs	r3, #22
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <fit_lfn+0x100>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d006      	beq.n	8004e18 <fit_lfn+0xe4>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	18d3      	adds	r3, r2, r3
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <fit_lfn+0xf0>
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	1dfa      	adds	r2, r7, #7
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	2140      	movs	r1, #64	; 0x40
 8004e20:	430a      	orrs	r2, r1
 8004e22:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	1dfa      	adds	r2, r7, #7
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	701a      	strb	r2, [r3, #0]
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b008      	add	sp, #32
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	0000ffff 	.word	0x0000ffff
 8004e38:	080072c4 	.word	0x080072c4

08004e3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	220b      	movs	r2, #11
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7fe fc9d 	bl	8003790 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d92f      	bls.n	8004ebc <gen_numname+0x80>
		sr = seq;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004e60:	e026      	b.n	8004eb0 <gen_numname+0x74>
			wc = *lfn++;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	2222      	movs	r2, #34	; 0x22
 8004e6a:	18ba      	adds	r2, r7, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8004e70:	2300      	movs	r3, #0
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e74:	e019      	b.n	8004eaa <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	005a      	lsls	r2, r3, #1
 8004e7a:	2022      	movs	r0, #34	; 0x22
 8004e7c:	183b      	adds	r3, r7, r0
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	400b      	ands	r3, r1
 8004e84:	18d3      	adds	r3, r2, r3
 8004e86:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004e88:	183b      	adds	r3, r7, r0
 8004e8a:	183a      	adds	r2, r7, r0
 8004e8c:	8812      	ldrh	r2, [r2, #0]
 8004e8e:	0852      	lsrs	r2, r2, #1
 8004e90:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	025b      	lsls	r3, r3, #9
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <gen_numname+0x68>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4a30      	ldr	r2, [pc, #192]	; (8004f60 <gen_numname+0x124>)
 8004ea0:	4053      	eors	r3, r2
 8004ea2:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	2b0f      	cmp	r3, #15
 8004eae:	d9e2      	bls.n	8004e76 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1d4      	bne.n	8004e62 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004ebc:	2307      	movs	r3, #7
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	212f      	movs	r1, #47	; 0x2f
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	3230      	adds	r2, #48	; 0x30
 8004ed0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b39      	cmp	r3, #57	; 0x39
 8004ed8:	d904      	bls.n	8004ee4 <gen_numname+0xa8>
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	187a      	adds	r2, r7, r1
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	3207      	adds	r2, #7
 8004ee2:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	1e5a      	subs	r2, r3, #1
 8004ee8:	62ba      	str	r2, [r7, #40]	; 0x28
 8004eea:	2014      	movs	r0, #20
 8004eec:	183a      	adds	r2, r7, r0
 8004eee:	212f      	movs	r1, #47	; 0x2f
 8004ef0:	1879      	adds	r1, r7, r1
 8004ef2:	7809      	ldrb	r1, [r1, #0]
 8004ef4:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1de      	bne.n	8004ec0 <gen_numname+0x84>
	ns[i] = '~';
 8004f02:	183a      	adds	r2, r7, r0
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	18d3      	adds	r3, r2, r3
 8004f08:	227e      	movs	r2, #126	; 0x7e
 8004f0a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f10:	e002      	b.n	8004f18 <gen_numname+0xdc>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	3301      	adds	r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d205      	bcs.n	8004f2c <gen_numname+0xf0>
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	18d3      	adds	r3, r2, r3
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d1f2      	bne.n	8004f12 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2b07      	cmp	r3, #7
 8004f30:	d806      	bhi.n	8004f40 <gen_numname+0x104>
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f38:	2214      	movs	r2, #20
 8004f3a:	18ba      	adds	r2, r7, r2
 8004f3c:	5cd1      	ldrb	r1, [r2, r3]
 8004f3e:	e000      	b.n	8004f42 <gen_numname+0x106>
 8004f40:	2120      	movs	r1, #32
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	627a      	str	r2, [r7, #36]	; 0x24
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	18d3      	adds	r3, r2, r3
 8004f4c:	1c0a      	adds	r2, r1, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	2b07      	cmp	r3, #7
 8004f54:	d9ea      	bls.n	8004f2c <gen_numname+0xf0>
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b00c      	add	sp, #48	; 0x30
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	00011021 	.word	0x00011021

08004f64 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8004f74:	230b      	movs	r3, #11
 8004f76:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004f78:	200f      	movs	r0, #15
 8004f7a:	183b      	adds	r3, r7, r0
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	0852      	lsrs	r2, r2, #1
 8004f82:	01db      	lsls	r3, r3, #7
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b2d9      	uxtb	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	183b      	adds	r3, r7, r0
 8004f92:	188a      	adds	r2, r1, r2
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	60bb      	str	r3, [r7, #8]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1ea      	bne.n	8004f78 <sum_sfn+0x14>
	return sum;
 8004fa2:	183b      	adds	r3, r7, r0
 8004fa4:	781b      	ldrb	r3, [r3, #0]
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b004      	add	sp, #16
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004fb0:	b5b0      	push	{r4, r5, r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004fb8:	2517      	movs	r5, #23
 8004fba:	197c      	adds	r4, r7, r5
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f7ff fb75 	bl	80046b0 <dir_sdi>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8004fca:	197b      	adds	r3, r7, r5
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <dir_find+0x28>
 8004fd2:	197b      	adds	r3, r7, r5
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	e0e5      	b.n	80051a4 <dir_find+0x1f4>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004fd8:	2114      	movs	r1, #20
 8004fda:	187b      	adds	r3, r7, r1
 8004fdc:	22ff      	movs	r2, #255	; 0xff
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	2315      	movs	r3, #21
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	187a      	adds	r2, r7, r1
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a6f      	ldr	r2, [pc, #444]	; (80051ac <dir_find+0x1fc>)
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4249      	negs	r1, r1
 8004ff2:	5299      	strh	r1, [r3, r2]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	58d0      	ldr	r0, [r2, r3]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	2382      	movs	r3, #130	; 0x82
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	58d3      	ldr	r3, [r2, r3]
 8005004:	2517      	movs	r5, #23
 8005006:	197c      	adds	r4, r7, r5
 8005008:	0019      	movs	r1, r3
 800500a:	f7fe fe4d 	bl	8003ca8 <move_window>
 800500e:	0003      	movs	r3, r0
 8005010:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8005012:	0029      	movs	r1, r5
 8005014:	187b      	adds	r3, r7, r1
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d000      	beq.n	800501e <dir_find+0x6e>
 800501c:	e0ba      	b.n	8005194 <dir_find+0x1e4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <dir_find+0x200>)
 8005022:	589b      	ldr	r3, [r3, r2]
 8005024:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005026:	2016      	movs	r0, #22
 8005028:	183b      	adds	r3, r7, r0
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	7812      	ldrb	r2, [r2, #0]
 800502e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005030:	183b      	adds	r3, r7, r0
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <dir_find+0x90>
 8005038:	187b      	adds	r3, r7, r1
 800503a:	2204      	movs	r2, #4
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e0ae      	b.n	800519e <dir_find+0x1ee>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	330b      	adds	r3, #11
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	200f      	movs	r0, #15
 8005048:	183b      	adds	r3, r7, r0
 800504a:	213f      	movs	r1, #63	; 0x3f
 800504c:	400a      	ands	r2, r1
 800504e:	701a      	strb	r2, [r3, #0]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005050:	2316      	movs	r3, #22
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2be5      	cmp	r3, #229	; 0xe5
 8005058:	d008      	beq.n	800506c <dir_find+0xbc>
 800505a:	183b      	adds	r3, r7, r0
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2208      	movs	r2, #8
 8005060:	4013      	ands	r3, r2
 8005062:	d00d      	beq.n	8005080 <dir_find+0xd0>
 8005064:	183b      	adds	r3, r7, r0
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b0f      	cmp	r3, #15
 800506a:	d009      	beq.n	8005080 <dir_find+0xd0>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800506c:	2315      	movs	r3, #21
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	22ff      	movs	r2, #255	; 0xff
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a4d      	ldr	r2, [pc, #308]	; (80051ac <dir_find+0x1fc>)
 8005078:	2101      	movs	r1, #1
 800507a:	4249      	negs	r1, r1
 800507c:	5299      	strh	r1, [r3, r2]
 800507e:	e07a      	b.n	8005176 <dir_find+0x1c6>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005080:	230f      	movs	r3, #15
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	d147      	bne.n	800511a <dir_find+0x16a>
				if (dp->lfn) {
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	2384      	movs	r3, #132	; 0x84
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	58d3      	ldr	r3, [r2, r3]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d100      	bne.n	8005098 <dir_find+0xe8>
 8005096:	e06e      	b.n	8005176 <dir_find+0x1c6>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005098:	2016      	movs	r0, #22
 800509a:	183b      	adds	r3, r7, r0
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2240      	movs	r2, #64	; 0x40
 80050a0:	4013      	ands	r3, r2
 80050a2:	d015      	beq.n	80050d0 <dir_find+0x120>
						sum = dir[LDIR_Chksum];
 80050a4:	2314      	movs	r3, #20
 80050a6:	18fb      	adds	r3, r7, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	7b52      	ldrb	r2, [r2, #13]
 80050ac:	701a      	strb	r2, [r3, #0]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80050ae:	183b      	adds	r3, r7, r0
 80050b0:	183a      	adds	r2, r7, r0
 80050b2:	7812      	ldrb	r2, [r2, #0]
 80050b4:	2140      	movs	r1, #64	; 0x40
 80050b6:	438a      	bics	r2, r1
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	2315      	movs	r3, #21
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	183a      	adds	r2, r7, r0
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	701a      	strb	r2, [r3, #0]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <dir_find+0x204>)
 80050c8:	5a99      	ldrh	r1, [r3, r2]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a37      	ldr	r2, [pc, #220]	; (80051ac <dir_find+0x1fc>)
 80050ce:	5299      	strh	r1, [r3, r2]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80050d0:	2316      	movs	r3, #22
 80050d2:	18fa      	adds	r2, r7, r3
 80050d4:	2415      	movs	r4, #21
 80050d6:	193b      	adds	r3, r7, r4
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d117      	bne.n	8005110 <dir_find+0x160>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	330d      	adds	r3, #13
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2214      	movs	r2, #20
 80050e8:	18ba      	adds	r2, r7, r2
 80050ea:	7812      	ldrb	r2, [r2, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d10f      	bne.n	8005110 <dir_find+0x160>
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	2384      	movs	r3, #132	; 0x84
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	58d3      	ldr	r3, [r2, r3]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	0011      	movs	r1, r2
 80050fc:	0018      	movs	r0, r3
 80050fe:	f7ff fd9b 	bl	8004c38 <cmp_lfn>
 8005102:	1e03      	subs	r3, r0, #0
 8005104:	d004      	beq.n	8005110 <dir_find+0x160>
 8005106:	193b      	adds	r3, r7, r4
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	3b01      	subs	r3, #1
 800510c:	b2da      	uxtb	r2, r3
 800510e:	e000      	b.n	8005112 <dir_find+0x162>
 8005110:	22ff      	movs	r2, #255	; 0xff
 8005112:	2315      	movs	r3, #21
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e02d      	b.n	8005176 <dir_find+0x1c6>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800511a:	2315      	movs	r3, #21
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <dir_find+0x18a>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	0018      	movs	r0, r3
 8005128:	f7ff ff1c 	bl	8004f64 <sum_sfn>
 800512c:	0003      	movs	r3, r0
 800512e:	001a      	movs	r2, r3
 8005130:	2314      	movs	r3, #20
 8005132:	18fb      	adds	r3, r7, r3
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	4293      	cmp	r3, r2
 8005138:	d02e      	beq.n	8005198 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	2383      	movs	r3, #131	; 0x83
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	58d3      	ldr	r3, [r2, r3]
 8005142:	330b      	adds	r3, #11
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	001a      	movs	r2, r3
 8005148:	2301      	movs	r3, #1
 800514a:	4013      	ands	r3, r2
 800514c:	d10a      	bne.n	8005164 <dir_find+0x1b4>
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	2383      	movs	r3, #131	; 0x83
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	58d1      	ldr	r1, [r2, r3]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	220b      	movs	r2, #11
 800515a:	0018      	movs	r0, r3
 800515c:	f7fe fb4e 	bl	80037fc <mem_cmp>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d01b      	beq.n	800519c <dir_find+0x1ec>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005164:	2315      	movs	r3, #21
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <dir_find+0x1fc>)
 8005170:	2101      	movs	r1, #1
 8005172:	4249      	negs	r1, r1
 8005174:	5299      	strh	r1, [r3, r2]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005176:	2517      	movs	r5, #23
 8005178:	197c      	adds	r4, r7, r5
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2100      	movs	r1, #0
 800517e:	0018      	movs	r0, r3
 8005180:	f7ff fb68 	bl	8004854 <dir_next>
 8005184:	0003      	movs	r3, r0
 8005186:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8005188:	197b      	adds	r3, r7, r5
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d100      	bne.n	8005192 <dir_find+0x1e2>
 8005190:	e730      	b.n	8004ff4 <dir_find+0x44>
 8005192:	e004      	b.n	800519e <dir_find+0x1ee>
		if (res != FR_OK) break;
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	e002      	b.n	800519e <dir_find+0x1ee>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	e000      	b.n	800519e <dir_find+0x1ee>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800519c:	46c0      	nop			; (mov r8, r8)

	return res;
 800519e:	2317      	movs	r3, #23
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	781b      	ldrb	r3, [r3, #0]
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b006      	add	sp, #24
 80051aa:	bdb0      	pop	{r4, r5, r7, pc}
 80051ac:	00000424 	.word	0x00000424
 80051b0:	00000414 	.word	0x00000414
 80051b4:	00000406 	.word	0x00000406

080051b8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80051b8:	b5b0      	push	{r4, r5, r7, lr}
 80051ba:	b08c      	sub	sp, #48	; 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	2383      	movs	r3, #131	; 0x83
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	58d3      	ldr	r3, [r2, r3]
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	2384      	movs	r3, #132	; 0x84
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	58d3      	ldr	r3, [r2, r3]
 80051d2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80051d4:	6a39      	ldr	r1, [r7, #32]
 80051d6:	240c      	movs	r4, #12
 80051d8:	193b      	adds	r3, r7, r4
 80051da:	220c      	movs	r2, #12
 80051dc:	0018      	movs	r0, r3
 80051de:	f7fe fad7 	bl	8003790 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80051e2:	193b      	adds	r3, r7, r4
 80051e4:	7adb      	ldrb	r3, [r3, #11]
 80051e6:	001a      	movs	r2, r3
 80051e8:	2301      	movs	r3, #1
 80051ea:	4013      	ands	r3, r2
 80051ec:	d03e      	beq.n	800526c <dir_register+0xb4>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	330b      	adds	r3, #11
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	2384      	movs	r3, #132	; 0x84
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	2100      	movs	r1, #0
 80051fe:	50d1      	str	r1, [r2, r3]
		for (n = 1; n < 100; n++) {
 8005200:	2301      	movs	r3, #1
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
 8005204:	e015      	b.n	8005232 <dir_register+0x7a>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	210c      	movs	r1, #12
 800520c:	1879      	adds	r1, r7, r1
 800520e:	6a38      	ldr	r0, [r7, #32]
 8005210:	f7ff fe14 	bl	8004e3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005214:	252f      	movs	r5, #47	; 0x2f
 8005216:	197c      	adds	r4, r7, r5
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	0018      	movs	r0, r3
 800521c:	f7ff fec8 	bl	8004fb0 <dir_find>
 8005220:	0003      	movs	r3, r0
 8005222:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005224:	197b      	adds	r3, r7, r5
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <dir_register+0x82>
		for (n = 1; n < 100; n++) {
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	3301      	adds	r3, #1
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	2b63      	cmp	r3, #99	; 0x63
 8005236:	d9e6      	bls.n	8005206 <dir_register+0x4e>
 8005238:	e000      	b.n	800523c <dir_register+0x84>
			if (res != FR_OK) break;
 800523a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b64      	cmp	r3, #100	; 0x64
 8005240:	d101      	bne.n	8005246 <dir_register+0x8e>
 8005242:	2307      	movs	r3, #7
 8005244:	e0e5      	b.n	8005412 <dir_register+0x25a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005246:	222f      	movs	r2, #47	; 0x2f
 8005248:	18bb      	adds	r3, r7, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d002      	beq.n	8005256 <dir_register+0x9e>
 8005250:	18bb      	adds	r3, r7, r2
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	e0dd      	b.n	8005412 <dir_register+0x25a>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	330b      	adds	r3, #11
 800525a:	220c      	movs	r2, #12
 800525c:	18ba      	adds	r2, r7, r2
 800525e:	7ad2      	ldrb	r2, [r2, #11]
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	2384      	movs	r3, #132	; 0x84
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	69f9      	ldr	r1, [r7, #28]
 800526a:	50d1      	str	r1, [r2, r3]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800526c:	230c      	movs	r3, #12
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	7adb      	ldrb	r3, [r3, #11]
 8005272:	001a      	movs	r2, r3
 8005274:	2302      	movs	r3, #2
 8005276:	4013      	ands	r3, r2
 8005278:	d015      	beq.n	80052a6 <dir_register+0xee>
		for (n = 0; lfn[n]; n++) ;
 800527a:	2300      	movs	r3, #0
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
 800527e:	e002      	b.n	8005286 <dir_register+0xce>
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	3301      	adds	r3, #1
 8005284:	62bb      	str	r3, [r7, #40]	; 0x28
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f5      	bne.n	8005280 <dir_register+0xc8>
		nent = (n + 25) / 13;
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	3319      	adds	r3, #25
 8005298:	210d      	movs	r1, #13
 800529a:	0018      	movs	r0, r3
 800529c:	f7fa ff34 	bl	8000108 <__udivsi3>
 80052a0:	0003      	movs	r3, r0
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	e001      	b.n	80052aa <dir_register+0xf2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80052a6:	2301      	movs	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80052aa:	252f      	movs	r5, #47	; 0x2f
 80052ac:	197c      	adds	r4, r7, r5
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	0011      	movs	r1, r2
 80052b4:	0018      	movs	r0, r3
 80052b6:	f7ff fc0f 	bl	8004ad8 <dir_alloc>
 80052ba:	0003      	movs	r3, r0
 80052bc:	7023      	strb	r3, [r4, #0]

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80052be:	0029      	movs	r1, r5
 80052c0:	187b      	adds	r3, r7, r1
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d161      	bne.n	800538c <dir_register+0x1d4>
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	3b01      	subs	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d05b      	beq.n	800538c <dir_register+0x1d4>
		res = dir_sdi(dp, dp->index - nent);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a51      	ldr	r2, [pc, #324]	; (800541c <dir_register+0x264>)
 80052d8:	5a9b      	ldrh	r3, [r3, r2]
 80052da:	001a      	movs	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad2      	subs	r2, r2, r3
 80052e0:	000d      	movs	r5, r1
 80052e2:	187c      	adds	r4, r7, r1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0011      	movs	r1, r2
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7ff f9e1 	bl	80046b0 <dir_sdi>
 80052ee:	0003      	movs	r3, r0
 80052f0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80052f2:	197b      	adds	r3, r7, r5
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d148      	bne.n	800538c <dir_register+0x1d4>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	2383      	movs	r3, #131	; 0x83
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	58d3      	ldr	r3, [r2, r3]
 8005302:	221b      	movs	r2, #27
 8005304:	18bc      	adds	r4, r7, r2
 8005306:	0018      	movs	r0, r3
 8005308:	f7ff fe2c 	bl	8004f64 <sum_sfn>
 800530c:	0003      	movs	r3, r0
 800530e:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	58d0      	ldr	r0, [r2, r3]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	2382      	movs	r3, #130	; 0x82
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	58d3      	ldr	r3, [r2, r3]
 8005320:	252f      	movs	r5, #47	; 0x2f
 8005322:	197c      	adds	r4, r7, r5
 8005324:	0019      	movs	r1, r3
 8005326:	f7fe fcbf 	bl	8003ca8 <move_window>
 800532a:	0003      	movs	r3, r0
 800532c:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800532e:	002c      	movs	r4, r5
 8005330:	193b      	adds	r3, r7, r4
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d128      	bne.n	800538a <dir_register+0x1d2>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	2384      	movs	r3, #132	; 0x84
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	58d0      	ldr	r0, [r2, r3]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a37      	ldr	r2, [pc, #220]	; (8005420 <dir_register+0x268>)
 8005344:	5899      	ldr	r1, [r3, r2]
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	b2da      	uxtb	r2, r3
 800534a:	231b      	movs	r3, #27
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f7ff fcf0 	bl	8004d34 <fit_lfn>
				dp->fs->wflag = 1;
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	58d3      	ldr	r3, [r2, r3]
 800535c:	4a31      	ldr	r2, [pc, #196]	; (8005424 <dir_register+0x26c>)
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
				res = dir_next(dp, 0);	/* Next entry */
 8005362:	0025      	movs	r5, r4
 8005364:	193c      	adds	r4, r7, r4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2100      	movs	r1, #0
 800536a:	0018      	movs	r0, r3
 800536c:	f7ff fa72 	bl	8004854 <dir_next>
 8005370:	0003      	movs	r3, r0
 8005372:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 8005374:	197b      	adds	r3, r7, r5
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d107      	bne.n	800538c <dir_register+0x1d4>
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	3b01      	subs	r3, #1
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1c3      	bne.n	8005310 <dir_register+0x158>
 8005388:	e000      	b.n	800538c <dir_register+0x1d4>
				if (res != FR_OK) break;
 800538a:	46c0      	nop			; (mov r8, r8)
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800538c:	212f      	movs	r1, #47	; 0x2f
 800538e:	187b      	adds	r3, r7, r1
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d13a      	bne.n	800540c <dir_register+0x254>
		res = move_window(dp->fs, dp->sect);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	58d0      	ldr	r0, [r2, r3]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	2382      	movs	r3, #130	; 0x82
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	58d3      	ldr	r3, [r2, r3]
 80053a6:	000d      	movs	r5, r1
 80053a8:	187c      	adds	r4, r7, r1
 80053aa:	0019      	movs	r1, r3
 80053ac:	f7fe fc7c 	bl	8003ca8 <move_window>
 80053b0:	0003      	movs	r3, r0
 80053b2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80053b4:	197b      	adds	r3, r7, r5
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d127      	bne.n	800540c <dir_register+0x254>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <dir_register+0x268>)
 80053c0:	589b      	ldr	r3, [r3, r2]
 80053c2:	2220      	movs	r2, #32
 80053c4:	2100      	movs	r1, #0
 80053c6:	0018      	movs	r0, r3
 80053c8:	f7fe f9ff 	bl	80037ca <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a14      	ldr	r2, [pc, #80]	; (8005420 <dir_register+0x268>)
 80053d0:	5898      	ldr	r0, [r3, r2]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	2383      	movs	r3, #131	; 0x83
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	58d3      	ldr	r3, [r2, r3]
 80053da:	220b      	movs	r2, #11
 80053dc:	0019      	movs	r1, r3
 80053de:	f7fe f9d7 	bl	8003790 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	2383      	movs	r3, #131	; 0x83
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	58d3      	ldr	r3, [r2, r3]
 80053ea:	330b      	adds	r3, #11
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	490b      	ldr	r1, [pc, #44]	; (8005420 <dir_register+0x268>)
 80053f2:	585b      	ldr	r3, [r3, r1]
 80053f4:	330c      	adds	r3, #12
 80053f6:	2118      	movs	r1, #24
 80053f8:	400a      	ands	r2, r1
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	58d3      	ldr	r3, [r2, r3]
 8005406:	4a07      	ldr	r2, [pc, #28]	; (8005424 <dir_register+0x26c>)
 8005408:	2101      	movs	r1, #1
 800540a:	5499      	strb	r1, [r3, r2]
		}
	}

	return res;
 800540c:	232f      	movs	r3, #47	; 0x2f
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	781b      	ldrb	r3, [r3, #0]
}
 8005412:	0018      	movs	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	b00c      	add	sp, #48	; 0x30
 8005418:	bdb0      	pop	{r4, r5, r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	00000406 	.word	0x00000406
 8005420:	00000414 	.word	0x00000414
 8005424:	00000404 	.word	0x00000404

08005428 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005428:	b5b0      	push	{r4, r5, r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e002      	b.n	8005440 <create_name+0x18>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3301      	adds	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b2f      	cmp	r3, #47	; 0x2f
 8005446:	d0f8      	beq.n	800543a <create_name+0x12>
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b5c      	cmp	r3, #92	; 0x5c
 800544e:	d0f4      	beq.n	800543a <create_name+0x12>
	lfn = dp->lfn;
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	2384      	movs	r3, #132	; 0x84
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	58d3      	ldr	r3, [r2, r3]
 8005458:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	61ba      	str	r2, [r7, #24]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	18d3      	adds	r3, r2, r3
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	2124      	movs	r1, #36	; 0x24
 8005470:	187b      	adds	r3, r7, r1
 8005472:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005474:	000a      	movs	r2, r1
 8005476:	18bb      	adds	r3, r7, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	2b1f      	cmp	r3, #31
 800547c:	d93d      	bls.n	80054fa <create_name+0xd2>
 800547e:	18bb      	adds	r3, r7, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	2b2f      	cmp	r3, #47	; 0x2f
 8005484:	d039      	beq.n	80054fa <create_name+0xd2>
 8005486:	18bb      	adds	r3, r7, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	2b5c      	cmp	r3, #92	; 0x5c
 800548c:	d035      	beq.n	80054fa <create_name+0xd2>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2bfe      	cmp	r3, #254	; 0xfe
 8005492:	d901      	bls.n	8005498 <create_name+0x70>
			return FR_INVALID_NAME;
 8005494:	2306      	movs	r3, #6
 8005496:	e1cb      	b.n	8005830 <create_name+0x408>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005498:	2524      	movs	r5, #36	; 0x24
 800549a:	197b      	adds	r3, r7, r5
 800549c:	197a      	adds	r2, r7, r5
 800549e:	8812      	ldrh	r2, [r2, #0]
 80054a0:	21ff      	movs	r1, #255	; 0xff
 80054a2:	400a      	ands	r2, r1
 80054a4:	801a      	strh	r2, [r3, #0]
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80054a6:	197c      	adds	r4, r7, r5
 80054a8:	197b      	adds	r3, r7, r5
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	2101      	movs	r1, #1
 80054ae:	0018      	movs	r0, r3
 80054b0:	f001 fda4 	bl	8006ffc <ff_convert>
 80054b4:	0003      	movs	r3, r0
 80054b6:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80054b8:	197b      	adds	r3, r7, r5
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <create_name+0x9c>
 80054c0:	2306      	movs	r3, #6
 80054c2:	e1b5      	b.n	8005830 <create_name+0x408>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80054c4:	2224      	movs	r2, #36	; 0x24
 80054c6:	18bb      	adds	r3, r7, r2
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	2b7f      	cmp	r3, #127	; 0x7f
 80054cc:	d80a      	bhi.n	80054e4 <create_name+0xbc>
 80054ce:	18bb      	adds	r3, r7, r2
 80054d0:	881a      	ldrh	r2, [r3, #0]
 80054d2:	4ba8      	ldr	r3, [pc, #672]	; (8005774 <create_name+0x34c>)
 80054d4:	0011      	movs	r1, r2
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7fe f9b5 	bl	8003846 <chk_chr>
 80054dc:	1e03      	subs	r3, r0, #0
 80054de:	d001      	beq.n	80054e4 <create_name+0xbc>
			return FR_INVALID_NAME;
 80054e0:	2306      	movs	r3, #6
 80054e2:	e1a5      	b.n	8005830 <create_name+0x408>
		lfn[di++] = w;					/* Store the Unicode character */
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	617a      	str	r2, [r7, #20]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	18d3      	adds	r3, r2, r3
 80054f0:	2224      	movs	r2, #36	; 0x24
 80054f2:	18ba      	adds	r2, r7, r2
 80054f4:	8812      	ldrh	r2, [r2, #0]
 80054f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80054f8:	e7b3      	b.n	8005462 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	18d2      	adds	r2, r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005504:	2324      	movs	r3, #36	; 0x24
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	2b1f      	cmp	r3, #31
 800550c:	d801      	bhi.n	8005512 <create_name+0xea>
 800550e:	2204      	movs	r2, #4
 8005510:	e000      	b.n	8005514 <create_name+0xec>
 8005512:	2200      	movs	r2, #0
 8005514:	2327      	movs	r3, #39	; 0x27
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800551a:	e016      	b.n	800554a <create_name+0x122>
		w = lfn[di - 1];
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4a96      	ldr	r2, [pc, #600]	; (8005778 <create_name+0x350>)
 8005520:	4694      	mov	ip, r2
 8005522:	4463      	add	r3, ip
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	18d2      	adds	r2, r2, r3
 800552a:	2124      	movs	r1, #36	; 0x24
 800552c:	187b      	adds	r3, r7, r1
 800552e:	8812      	ldrh	r2, [r2, #0]
 8005530:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8005532:	000a      	movs	r2, r1
 8005534:	18bb      	adds	r3, r7, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2b20      	cmp	r3, #32
 800553a:	d003      	beq.n	8005544 <create_name+0x11c>
 800553c:	18bb      	adds	r3, r7, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	2b2e      	cmp	r3, #46	; 0x2e
 8005542:	d106      	bne.n	8005552 <create_name+0x12a>
		di--;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	3b01      	subs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e5      	bne.n	800551c <create_name+0xf4>
 8005550:	e000      	b.n	8005554 <create_name+0x12c>
		if (w != ' ' && w != '.') break;
 8005552:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <create_name+0x136>
 800555a:	2306      	movs	r3, #6
 800555c:	e168      	b.n	8005830 <create_name+0x408>

	lfn[di] = 0;						/* LFN is created */
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	18d3      	adds	r3, r2, r3
 8005566:	2200      	movs	r2, #0
 8005568:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	2383      	movs	r3, #131	; 0x83
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	58d3      	ldr	r3, [r2, r3]
 8005572:	220b      	movs	r2, #11
 8005574:	2120      	movs	r1, #32
 8005576:	0018      	movs	r0, r3
 8005578:	f7fe f927 	bl	80037ca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	e002      	b.n	8005588 <create_name+0x160>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	3301      	adds	r3, #1
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	2b20      	cmp	r3, #32
 8005594:	d0f5      	beq.n	8005582 <create_name+0x15a>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	18d3      	adds	r3, r2, r3
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	2b2e      	cmp	r3, #46	; 0x2e
 80055a2:	d0ee      	beq.n	8005582 <create_name+0x15a>
	if (si) cf |= NS_LOSS | NS_LFN;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <create_name+0x198>
 80055aa:	2227      	movs	r2, #39	; 0x27
 80055ac:	18bb      	adds	r3, r7, r2
 80055ae:	18ba      	adds	r2, r7, r2
 80055b0:	7812      	ldrb	r2, [r2, #0]
 80055b2:	2103      	movs	r1, #3
 80055b4:	430a      	orrs	r2, r1
 80055b6:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80055b8:	e002      	b.n	80055c0 <create_name+0x198>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3b01      	subs	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <create_name+0x1b2>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	4a6b      	ldr	r2, [pc, #428]	; (8005778 <create_name+0x350>)
 80055ca:	4694      	mov	ip, r2
 80055cc:	4463      	add	r3, ip
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	2b2e      	cmp	r3, #46	; 0x2e
 80055d8:	d1ef      	bne.n	80055ba <create_name+0x192>

	b = i = 0; ni = 8;
 80055da:	2300      	movs	r3, #0
 80055dc:	623b      	str	r3, [r7, #32]
 80055de:	2326      	movs	r3, #38	; 0x26
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	2308      	movs	r3, #8
 80055e8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	61ba      	str	r2, [r7, #24]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	18d2      	adds	r2, r2, r3
 80055f6:	2124      	movs	r1, #36	; 0x24
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 80055fe:	000a      	movs	r2, r1
 8005600:	18bb      	adds	r3, r7, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d100      	bne.n	800560a <create_name+0x1e2>
 8005608:	e0b1      	b.n	800576e <create_name+0x346>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800560a:	18bb      	adds	r3, r7, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	2b20      	cmp	r3, #32
 8005610:	d007      	beq.n	8005622 <create_name+0x1fa>
 8005612:	18bb      	adds	r3, r7, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	2b2e      	cmp	r3, #46	; 0x2e
 8005618:	d10b      	bne.n	8005632 <create_name+0x20a>
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	429a      	cmp	r2, r3
 8005620:	d007      	beq.n	8005632 <create_name+0x20a>
			cf |= NS_LOSS | NS_LFN; continue;
 8005622:	2227      	movs	r2, #39	; 0x27
 8005624:	18bb      	adds	r3, r7, r2
 8005626:	18ba      	adds	r2, r7, r2
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	2103      	movs	r1, #3
 800562c:	430a      	orrs	r2, r1
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	e09c      	b.n	800576c <create_name+0x344>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005632:	6a3a      	ldr	r2, [r7, #32]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	429a      	cmp	r2, r3
 8005638:	d203      	bcs.n	8005642 <create_name+0x21a>
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	429a      	cmp	r2, r3
 8005640:	d127      	bne.n	8005692 <create_name+0x26a>
			if (ni == 11) {				/* Long extension */
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b0b      	cmp	r3, #11
 8005646:	d107      	bne.n	8005658 <create_name+0x230>
				cf |= NS_LOSS | NS_LFN; break;
 8005648:	2227      	movs	r2, #39	; 0x27
 800564a:	18bb      	adds	r3, r7, r2
 800564c:	18ba      	adds	r2, r7, r2
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	2103      	movs	r1, #3
 8005652:	430a      	orrs	r2, r1
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e096      	b.n	8005786 <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d006      	beq.n	800566e <create_name+0x246>
 8005660:	2227      	movs	r2, #39	; 0x27
 8005662:	18bb      	adds	r3, r7, r2
 8005664:	18ba      	adds	r2, r7, r2
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	2103      	movs	r1, #3
 800566a:	430a      	orrs	r2, r1
 800566c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	429a      	cmp	r2, r3
 8005674:	d900      	bls.n	8005678 <create_name+0x250>
 8005676:	e085      	b.n	8005784 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	2308      	movs	r3, #8
 800567e:	623b      	str	r3, [r7, #32]
 8005680:	230b      	movs	r3, #11
 8005682:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005684:	2226      	movs	r2, #38	; 0x26
 8005686:	18bb      	adds	r3, r7, r2
 8005688:	18ba      	adds	r2, r7, r2
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	0092      	lsls	r2, r2, #2
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	e06c      	b.n	800576c <create_name+0x344>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005692:	2524      	movs	r5, #36	; 0x24
 8005694:	197b      	adds	r3, r7, r5
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	2b7f      	cmp	r3, #127	; 0x7f
 800569a:	d91a      	bls.n	80056d2 <create_name+0x2aa>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800569c:	197c      	adds	r4, r7, r5
 800569e:	197b      	adds	r3, r7, r5
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	2100      	movs	r1, #0
 80056a4:	0018      	movs	r0, r3
 80056a6:	f001 fca9 	bl	8006ffc <ff_convert>
 80056aa:	0003      	movs	r3, r0
 80056ac:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80056ae:	197b      	adds	r3, r7, r5
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <create_name+0x29c>
 80056b6:	197b      	adds	r3, r7, r5
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	3b80      	subs	r3, #128	; 0x80
 80056bc:	4a2f      	ldr	r2, [pc, #188]	; (800577c <create_name+0x354>)
 80056be:	5cd2      	ldrb	r2, [r2, r3]
 80056c0:	197b      	adds	r3, r7, r5
 80056c2:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80056c4:	2227      	movs	r2, #39	; 0x27
 80056c6:	18bb      	adds	r3, r7, r2
 80056c8:	18ba      	adds	r2, r7, r2
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	2102      	movs	r1, #2
 80056ce:	430a      	orrs	r2, r1
 80056d0:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80056d2:	2224      	movs	r2, #36	; 0x24
 80056d4:	18bb      	adds	r3, r7, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <create_name+0x2c6>
 80056dc:	18bb      	adds	r3, r7, r2
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	4b27      	ldr	r3, [pc, #156]	; (8005780 <create_name+0x358>)
 80056e2:	0011      	movs	r1, r2
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7fe f8ae 	bl	8003846 <chk_chr>
 80056ea:	1e03      	subs	r3, r0, #0
 80056ec:	d00b      	beq.n	8005706 <create_name+0x2de>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80056ee:	2324      	movs	r3, #36	; 0x24
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	225f      	movs	r2, #95	; 0x5f
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	2227      	movs	r2, #39	; 0x27
 80056f8:	18bb      	adds	r3, r7, r2
 80056fa:	18ba      	adds	r2, r7, r2
 80056fc:	7812      	ldrb	r2, [r2, #0]
 80056fe:	2103      	movs	r1, #3
 8005700:	430a      	orrs	r2, r1
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	e025      	b.n	8005752 <create_name+0x32a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	18bb      	adds	r3, r7, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d90b      	bls.n	8005728 <create_name+0x300>
 8005710:	18bb      	adds	r3, r7, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	2b5a      	cmp	r3, #90	; 0x5a
 8005716:	d807      	bhi.n	8005728 <create_name+0x300>
					b |= 2;
 8005718:	2226      	movs	r2, #38	; 0x26
 800571a:	18bb      	adds	r3, r7, r2
 800571c:	18ba      	adds	r2, r7, r2
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	2102      	movs	r1, #2
 8005722:	430a      	orrs	r2, r1
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e014      	b.n	8005752 <create_name+0x32a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005728:	2024      	movs	r0, #36	; 0x24
 800572a:	183b      	adds	r3, r7, r0
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	2b60      	cmp	r3, #96	; 0x60
 8005730:	d90f      	bls.n	8005752 <create_name+0x32a>
 8005732:	183b      	adds	r3, r7, r0
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	2b7a      	cmp	r3, #122	; 0x7a
 8005738:	d80b      	bhi.n	8005752 <create_name+0x32a>
						b |= 1; w -= 0x20;
 800573a:	2226      	movs	r2, #38	; 0x26
 800573c:	18bb      	adds	r3, r7, r2
 800573e:	18ba      	adds	r2, r7, r2
 8005740:	7812      	ldrb	r2, [r2, #0]
 8005742:	2101      	movs	r1, #1
 8005744:	430a      	orrs	r2, r1
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	183b      	adds	r3, r7, r0
 800574a:	183a      	adds	r2, r7, r0
 800574c:	8812      	ldrh	r2, [r2, #0]
 800574e:	3a20      	subs	r2, #32
 8005750:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	2383      	movs	r3, #131	; 0x83
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	58d2      	ldr	r2, [r2, r3]
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	1c59      	adds	r1, r3, #1
 800575e:	6239      	str	r1, [r7, #32]
 8005760:	18d3      	adds	r3, r2, r3
 8005762:	2224      	movs	r2, #36	; 0x24
 8005764:	18ba      	adds	r2, r7, r2
 8005766:	8812      	ldrh	r2, [r2, #0]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800576c:	e73d      	b.n	80055ea <create_name+0x1c2>
		if (!w) break;					/* Break on end of the LFN */
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	e009      	b.n	8005786 <create_name+0x35e>
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	0800718c 	.word	0x0800718c
 8005778:	7fffffff 	.word	0x7fffffff
 800577c:	08007244 	.word	0x08007244
 8005780:	08007198 	.word	0x08007198
			if (si > di) break;			/* No extension */
 8005784:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	2383      	movs	r3, #131	; 0x83
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	58d3      	ldr	r3, [r2, r3]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2be5      	cmp	r3, #229	; 0xe5
 8005792:	d105      	bne.n	80057a0 <create_name+0x378>
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	2383      	movs	r3, #131	; 0x83
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	58d3      	ldr	r3, [r2, r3]
 800579c:	2205      	movs	r2, #5
 800579e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d105      	bne.n	80057b2 <create_name+0x38a>
 80057a6:	2226      	movs	r2, #38	; 0x26
 80057a8:	18bb      	adds	r3, r7, r2
 80057aa:	18ba      	adds	r2, r7, r2
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	0092      	lsls	r2, r2, #2
 80057b0:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80057b2:	2126      	movs	r1, #38	; 0x26
 80057b4:	187b      	adds	r3, r7, r1
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	220c      	movs	r2, #12
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b0c      	cmp	r3, #12
 80057be:	d005      	beq.n	80057cc <create_name+0x3a4>
 80057c0:	187b      	adds	r3, r7, r1
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d106      	bne.n	80057da <create_name+0x3b2>
		cf |= NS_LFN;
 80057cc:	2227      	movs	r2, #39	; 0x27
 80057ce:	18bb      	adds	r3, r7, r2
 80057d0:	18ba      	adds	r2, r7, r2
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	2102      	movs	r1, #2
 80057d6:	430a      	orrs	r2, r1
 80057d8:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80057da:	2127      	movs	r1, #39	; 0x27
 80057dc:	187b      	adds	r3, r7, r1
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2202      	movs	r2, #2
 80057e2:	4013      	ands	r3, r2
 80057e4:	d11a      	bne.n	800581c <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80057e6:	2326      	movs	r3, #38	; 0x26
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2203      	movs	r2, #3
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d105      	bne.n	8005800 <create_name+0x3d8>
 80057f4:	187b      	adds	r3, r7, r1
 80057f6:	187a      	adds	r2, r7, r1
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	2110      	movs	r1, #16
 80057fc:	430a      	orrs	r2, r1
 80057fe:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005800:	2326      	movs	r3, #38	; 0x26
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	220c      	movs	r2, #12
 8005808:	4013      	ands	r3, r2
 800580a:	2b04      	cmp	r3, #4
 800580c:	d106      	bne.n	800581c <create_name+0x3f4>
 800580e:	2227      	movs	r2, #39	; 0x27
 8005810:	18bb      	adds	r3, r7, r2
 8005812:	18ba      	adds	r2, r7, r2
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	2108      	movs	r1, #8
 8005818:	430a      	orrs	r2, r1
 800581a:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	2383      	movs	r3, #131	; 0x83
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	58d3      	ldr	r3, [r2, r3]
 8005824:	330b      	adds	r3, #11
 8005826:	2227      	movs	r2, #39	; 0x27
 8005828:	18ba      	adds	r2, r7, r2
 800582a:	7812      	ldrb	r2, [r2, #0]
 800582c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800582e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b00a      	add	sp, #40	; 0x28
 8005836:	bdb0      	pop	{r4, r5, r7, pc}

08005838 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005838:	b5b0      	push	{r4, r5, r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b2f      	cmp	r3, #47	; 0x2f
 8005848:	d003      	beq.n	8005852 <follow_path+0x1a>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b5c      	cmp	r3, #92	; 0x5c
 8005850:	d102      	bne.n	8005858 <follow_path+0x20>
		path++;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	2381      	movs	r3, #129	; 0x81
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	2100      	movs	r1, #0
 8005860:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b1f      	cmp	r3, #31
 8005868:	d80d      	bhi.n	8005886 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800586a:	230f      	movs	r3, #15
 800586c:	18fc      	adds	r4, r7, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2100      	movs	r1, #0
 8005872:	0018      	movs	r0, r3
 8005874:	f7fe ff1c 	bl	80046b0 <dir_sdi>
 8005878:	0003      	movs	r3, r0
 800587a:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a31      	ldr	r2, [pc, #196]	; (8005944 <follow_path+0x10c>)
 8005880:	2100      	movs	r1, #0
 8005882:	5099      	str	r1, [r3, r2]
 8005884:	e057      	b.n	8005936 <follow_path+0xfe>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005886:	250f      	movs	r5, #15
 8005888:	197c      	adds	r4, r7, r5
 800588a:	003a      	movs	r2, r7
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff fdc9 	bl	8005428 <create_name>
 8005896:	0003      	movs	r3, r0
 8005898:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800589a:	197b      	adds	r3, r7, r5
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d144      	bne.n	800592c <follow_path+0xf4>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80058a2:	197c      	adds	r4, r7, r5
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f7ff fb82 	bl	8004fb0 <dir_find>
 80058ac:	0003      	movs	r3, r0
 80058ae:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	2383      	movs	r3, #131	; 0x83
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	58d2      	ldr	r2, [r2, r3]
 80058b8:	210e      	movs	r1, #14
 80058ba:	187b      	adds	r3, r7, r1
 80058bc:	7ad2      	ldrb	r2, [r2, #11]
 80058be:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80058c0:	197b      	adds	r3, r7, r5
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <follow_path+0xaa>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80058c8:	197b      	adds	r3, r7, r5
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d12f      	bne.n	8005930 <follow_path+0xf8>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80058d0:	187b      	adds	r3, r7, r1
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2204      	movs	r2, #4
 80058d6:	4013      	ands	r3, r2
 80058d8:	d12a      	bne.n	8005930 <follow_path+0xf8>
 80058da:	197b      	adds	r3, r7, r5
 80058dc:	2205      	movs	r2, #5
 80058de:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80058e0:	e026      	b.n	8005930 <follow_path+0xf8>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058e2:	230e      	movs	r3, #14
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2204      	movs	r2, #4
 80058ea:	4013      	ands	r3, r2
 80058ec:	d122      	bne.n	8005934 <follow_path+0xfc>
			dir = dp->dir;						/* Follow the sub-directory */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a14      	ldr	r2, [pc, #80]	; (8005944 <follow_path+0x10c>)
 80058f2:	589b      	ldr	r3, [r3, r2]
 80058f4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	330b      	adds	r3, #11
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	001a      	movs	r2, r3
 80058fe:	2310      	movs	r3, #16
 8005900:	4013      	ands	r3, r2
 8005902:	d104      	bne.n	800590e <follow_path+0xd6>
				res = FR_NO_PATH; break;
 8005904:	230f      	movs	r3, #15
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	2205      	movs	r2, #5
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e013      	b.n	8005936 <follow_path+0xfe>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	58d3      	ldr	r3, [r2, r3]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	0011      	movs	r1, r2
 800591a:	0018      	movs	r0, r3
 800591c:	f7ff f93a 	bl	8004b94 <ld_clust>
 8005920:	0001      	movs	r1, r0
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	2381      	movs	r3, #129	; 0x81
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800592a:	e7ac      	b.n	8005886 <follow_path+0x4e>
			if (res != FR_OK) break;
 800592c:	46c0      	nop			; (mov r8, r8)
 800592e:	e002      	b.n	8005936 <follow_path+0xfe>
				break;
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	e000      	b.n	8005936 <follow_path+0xfe>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005934:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8005936:	230f      	movs	r3, #15
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	781b      	ldrb	r3, [r3, #0]
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b004      	add	sp, #16
 8005942:	bdb0      	pop	{r4, r5, r7, pc}
 8005944:	00000414 	.word	0x00000414

08005948 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005950:	2301      	movs	r3, #1
 8005952:	425b      	negs	r3, r3
 8005954:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d031      	beq.n	80059c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e002      	b.n	800596c <get_ldnumber+0x24>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3301      	adds	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b1f      	cmp	r3, #31
 8005972:	d903      	bls.n	800597c <get_ldnumber+0x34>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b3a      	cmp	r3, #58	; 0x3a
 800597a:	d1f4      	bne.n	8005966 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b3a      	cmp	r3, #58	; 0x3a
 8005982:	d11c      	bne.n	80059be <get_ldnumber+0x76>
			tp = *path;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	60fa      	str	r2, [r7, #12]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	3b30      	subs	r3, #48	; 0x30
 8005994:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b09      	cmp	r3, #9
 800599a:	d80e      	bhi.n	80059ba <get_ldnumber+0x72>
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d10a      	bne.n	80059ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <get_ldnumber+0x72>
					vol = (int)i;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	3301      	adds	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	e002      	b.n	80059c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80059c2:	693b      	ldr	r3, [r7, #16]
}
 80059c4:	0018      	movs	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	b006      	add	sp, #24
 80059ca:	bd80      	pop	{r7, pc}

080059cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <check_fs+0xd0>)
 80059da:	2100      	movs	r1, #0
 80059dc:	5499      	strb	r1, [r3, r2]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	492f      	ldr	r1, [pc, #188]	; (8005aa0 <check_fs+0xd4>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	4252      	negs	r2, r2
 80059e6:	505a      	str	r2, [r3, r1]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	0011      	movs	r1, r2
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7fe f95a 	bl	8003ca8 <move_window>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d001      	beq.n	80059fc <check_fs+0x30>
		return 3;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e04b      	b.n	8005a94 <check_fs+0xc8>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	33ff      	adds	r3, #255	; 0xff
 8005a00:	33ff      	adds	r3, #255	; 0xff
 8005a02:	3301      	adds	r3, #1
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	b21a      	sxth	r2, r3
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	23ff      	movs	r3, #255	; 0xff
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	5ccb      	ldrb	r3, [r1, r3]
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b21b      	sxth	r3, r3
 8005a18:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <check_fs+0xd8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d001      	beq.n	8005a22 <check_fs+0x56>
		return 2;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e038      	b.n	8005a94 <check_fs+0xc8>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3336      	adds	r3, #54	; 0x36
 8005a26:	3303      	adds	r3, #3
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	061a      	lsls	r2, r3, #24
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3336      	adds	r3, #54	; 0x36
 8005a30:	3302      	adds	r3, #2
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	4313      	orrs	r3, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	3236      	adds	r2, #54	; 0x36
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	0212      	lsls	r2, r2, #8
 8005a42:	4313      	orrs	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	2136      	movs	r1, #54	; 0x36
 8005a48:	5c52      	ldrb	r2, [r2, r1]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <check_fs+0xdc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <check_fs+0x8e>
		return 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e01c      	b.n	8005a94 <check_fs+0xc8>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3352      	adds	r3, #82	; 0x52
 8005a5e:	3303      	adds	r3, #3
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	061a      	lsls	r2, r3, #24
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3352      	adds	r3, #82	; 0x52
 8005a68:	3302      	adds	r3, #2
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	3252      	adds	r2, #82	; 0x52
 8005a74:	3201      	adds	r2, #1
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	0212      	lsls	r2, r2, #8
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	2152      	movs	r1, #82	; 0x52
 8005a80:	5c52      	ldrb	r2, [r2, r1]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <check_fs+0xdc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d101      	bne.n	8005a92 <check_fs+0xc6>
		return 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e000      	b.n	8005a94 <check_fs+0xc8>

	return 1;
 8005a92:	2301      	movs	r3, #1
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	00000404 	.word	0x00000404
 8005aa0:	0000042c 	.word	0x0000042c
 8005aa4:	ffffaa55 	.word	0xffffaa55
 8005aa8:	00544146 	.word	0x00544146

08005aac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005aac:	b5b0      	push	{r4, r5, r7, lr}
 8005aae:	b096      	sub	sp, #88	; 0x58
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	1dfb      	adds	r3, r7, #7
 8005ab8:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7ff ff40 	bl	8005948 <get_ldnumber>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da01      	bge.n	8005ad6 <find_volume+0x2a>
 8005ad2:	230b      	movs	r3, #11
 8005ad4:	e321      	b.n	800611a <find_volume+0x66e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ad6:	4bd0      	ldr	r3, [pc, #832]	; (8005e18 <find_volume+0x36c>)
 8005ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ada:	0092      	lsls	r2, r2, #2
 8005adc:	58d3      	ldr	r3, [r2, r3]
 8005ade:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <find_volume+0x3e>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	e317      	b.n	800611a <find_volume+0x66e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aee:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01c      	beq.n	8005b36 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	4ac7      	ldr	r2, [pc, #796]	; (8005e1c <find_volume+0x370>)
 8005b00:	5c9b      	ldrb	r3, [r3, r2]
 8005b02:	2537      	movs	r5, #55	; 0x37
 8005b04:	197c      	adds	r4, r7, r5
 8005b06:	0018      	movs	r0, r3
 8005b08:	f7fd fd78 	bl	80035fc <disk_status>
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b10:	0029      	movs	r1, r5
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d10c      	bne.n	8005b36 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005b1c:	1dfb      	adds	r3, r7, #7
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <find_volume+0x86>
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d001      	beq.n	8005b32 <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8005b2e:	230a      	movs	r3, #10
 8005b30:	e2f3      	b.n	800611a <find_volume+0x66e>
			return FR_OK;				/* The file system object is valid */
 8005b32:	2300      	movs	r3, #0
 8005b34:	e2f1      	b.n	800611a <find_volume+0x66e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b42:	b2d9      	uxtb	r1, r3
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	4ab5      	ldr	r2, [pc, #724]	; (8005e1c <find_volume+0x370>)
 8005b48:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	4ab3      	ldr	r2, [pc, #716]	; (8005e1c <find_volume+0x370>)
 8005b4e:	5c9b      	ldrb	r3, [r3, r2]
 8005b50:	2537      	movs	r5, #55	; 0x37
 8005b52:	197c      	adds	r4, r7, r5
 8005b54:	0018      	movs	r0, r3
 8005b56:	f7fd fd73 	bl	8003640 <disk_initialize>
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005b5e:	197b      	adds	r3, r7, r5
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	4013      	ands	r3, r2
 8005b66:	d001      	beq.n	8005b6c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e2d6      	b.n	800611a <find_volume+0x66e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005b6c:	1dfb      	adds	r3, r7, #7
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <find_volume+0xd8>
 8005b74:	2337      	movs	r3, #55	; 0x37
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d001      	beq.n	8005b84 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8005b80:	230a      	movs	r3, #10
 8005b82:	e2ca      	b.n	800611a <find_volume+0x66e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	4aa5      	ldr	r2, [pc, #660]	; (8005e1c <find_volume+0x370>)
 8005b88:	5c98      	ldrb	r0, [r3, r2]
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	4aa4      	ldr	r2, [pc, #656]	; (8005e20 <find_volume+0x374>)
 8005b8e:	4694      	mov	ip, r2
 8005b90:	4463      	add	r3, ip
 8005b92:	001a      	movs	r2, r3
 8005b94:	2102      	movs	r1, #2
 8005b96:	f7fd fdd3 	bl	8003740 <disk_ioctl>
 8005b9a:	1e03      	subs	r3, r0, #0
 8005b9c:	d10d      	bne.n	8005bba <find_volume+0x10e>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	4a9f      	ldr	r2, [pc, #636]	; (8005e20 <find_volume+0x374>)
 8005ba2:	5a9a      	ldrh	r2, [r3, r2]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d306      	bcc.n	8005bba <find_volume+0x10e>
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	4a9c      	ldr	r2, [pc, #624]	; (8005e20 <find_volume+0x374>)
 8005bb0:	5a9a      	ldrh	r2, [r3, r2]
 8005bb2:	2380      	movs	r3, #128	; 0x80
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d901      	bls.n	8005bbe <find_volume+0x112>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e2ad      	b.n	800611a <find_volume+0x66e>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005bc2:	2557      	movs	r5, #87	; 0x57
 8005bc4:	197c      	adds	r4, r7, r5
 8005bc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	0011      	movs	r1, r2
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7ff fefd 	bl	80059cc <check_fs>
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005bd6:	197b      	adds	r3, r7, r5
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d155      	bne.n	8005c8a <find_volume+0x1de>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005bde:	2300      	movs	r3, #0
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
 8005be2:	e027      	b.n	8005c34 <find_volume+0x188>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	33bf      	adds	r3, #191	; 0xbf
 8005bec:	33ff      	adds	r3, #255	; 0xff
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d012      	beq.n	8005c22 <find_volume+0x176>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	330b      	adds	r3, #11
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	061a      	lsls	r2, r3, #24
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	330a      	adds	r3, #10
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c10:	3209      	adds	r2, #9
 8005c12:	7812      	ldrb	r2, [r2, #0]
 8005c14:	0212      	lsls	r2, r2, #8
 8005c16:	4313      	orrs	r3, r2
 8005c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1a:	3208      	adds	r2, #8
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	e000      	b.n	8005c24 <find_volume+0x178>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2214      	movs	r2, #20
 8005c26:	18ba      	adds	r2, r7, r2
 8005c28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c2a:	0089      	lsls	r1, r1, #2
 8005c2c:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c30:	3301      	adds	r3, #1
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40
 8005c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d9d4      	bls.n	8005be4 <find_volume+0x138>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <find_volume+0x19e>
 8005c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c46:	3b01      	subs	r3, #1
 8005c48:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005c4a:	2314      	movs	r3, #20
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	58d3      	ldr	r3, [r2, r3]
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <find_volume+0x1c2>
 8005c5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7ff feb2 	bl	80059cc <check_fs>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	e000      	b.n	8005c70 <find_volume+0x1c4>
 8005c6e:	2202      	movs	r2, #2
 8005c70:	2157      	movs	r1, #87	; 0x57
 8005c72:	187b      	adds	r3, r7, r1
 8005c74:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <find_volume+0x1de>
 8005c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c80:	3301      	adds	r3, #1
 8005c82:	643b      	str	r3, [r7, #64]	; 0x40
 8005c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d9df      	bls.n	8005c4a <find_volume+0x19e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005c8a:	2357      	movs	r3, #87	; 0x57
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d101      	bne.n	8005c98 <find_volume+0x1ec>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e240      	b.n	800611a <find_volume+0x66e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005c98:	2357      	movs	r3, #87	; 0x57
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <find_volume+0x1fa>
 8005ca2:	230d      	movs	r3, #13
 8005ca4:	e239      	b.n	800611a <find_volume+0x66e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	7b1b      	ldrb	r3, [r3, #12]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	b21a      	sxth	r2, r3
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	7adb      	ldrb	r3, [r3, #11]
 8005cb2:	b21b      	sxth	r3, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	b21a      	sxth	r2, r3
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	4959      	ldr	r1, [pc, #356]	; (8005e20 <find_volume+0x374>)
 8005cbc:	5a5b      	ldrh	r3, [r3, r1]
 8005cbe:	b21b      	sxth	r3, r3
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <find_volume+0x21c>
		return FR_NO_FILESYSTEM;
 8005cc4:	230d      	movs	r3, #13
 8005cc6:	e228      	b.n	800611a <find_volume+0x66e>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	7ddb      	ldrb	r3, [r3, #23]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	b21a      	sxth	r2, r3
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	7d9b      	ldrb	r3, [r3, #22]
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b21b      	sxth	r3, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d112      	bne.n	8005d0a <find_volume+0x25e>
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	2227      	movs	r2, #39	; 0x27
 8005ce8:	5c9b      	ldrb	r3, [r3, r2]
 8005cea:	061a      	lsls	r2, r3, #24
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	2126      	movs	r1, #38	; 0x26
 8005cf0:	5c5b      	ldrb	r3, [r3, r1]
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf8:	2125      	movs	r1, #37	; 0x25
 8005cfa:	5c52      	ldrb	r2, [r2, r1]
 8005cfc:	0212      	lsls	r2, r2, #8
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d02:	2124      	movs	r1, #36	; 0x24
 8005d04:	5c52      	ldrb	r2, [r2, r1]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0c:	2383      	movs	r3, #131	; 0x83
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005d12:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	7c19      	ldrb	r1, [r3, #16]
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	4a42      	ldr	r2, [pc, #264]	; (8005e24 <find_volume+0x378>)
 8005d1c:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	4a40      	ldr	r2, [pc, #256]	; (8005e24 <find_volume+0x378>)
 8005d22:	5c9b      	ldrb	r3, [r3, r2]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d006      	beq.n	8005d36 <find_volume+0x28a>
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	4a3e      	ldr	r2, [pc, #248]	; (8005e24 <find_volume+0x378>)
 8005d2c:	5c9b      	ldrb	r3, [r3, r2]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d001      	beq.n	8005d36 <find_volume+0x28a>
		return FR_NO_FILESYSTEM;
 8005d32:	230d      	movs	r3, #13
 8005d34:	e1f1      	b.n	800611a <find_volume+0x66e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	4a3a      	ldr	r2, [pc, #232]	; (8005e24 <find_volume+0x378>)
 8005d3a:	5c9b      	ldrb	r3, [r3, r2]
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	4353      	muls	r3, r2
 8005d42:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	7b59      	ldrb	r1, [r3, #13]
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	4a37      	ldr	r2, [pc, #220]	; (8005e28 <find_volume+0x37c>)
 8005d4c:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	4a35      	ldr	r2, [pc, #212]	; (8005e28 <find_volume+0x37c>)
 8005d52:	5c9b      	ldrb	r3, [r3, r2]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <find_volume+0x2c0>
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	4a33      	ldr	r2, [pc, #204]	; (8005e28 <find_volume+0x37c>)
 8005d5c:	5c9b      	ldrb	r3, [r3, r2]
 8005d5e:	0019      	movs	r1, r3
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	4a31      	ldr	r2, [pc, #196]	; (8005e28 <find_volume+0x37c>)
 8005d64:	5c9b      	ldrb	r3, [r3, r2]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	400b      	ands	r3, r1
 8005d6a:	d001      	beq.n	8005d70 <find_volume+0x2c4>
		return FR_NO_FILESYSTEM;
 8005d6c:	230d      	movs	r3, #13
 8005d6e:	e1d4      	b.n	800611a <find_volume+0x66e>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	7c9b      	ldrb	r3, [r3, #18]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	b21a      	sxth	r2, r3
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	7c5b      	ldrb	r3, [r3, #17]
 8005d7c:	b21b      	sxth	r3, r3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	b299      	uxth	r1, r3
 8005d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d86:	2381      	movs	r3, #129	; 0x81
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d8e:	2381      	movs	r3, #129	; 0x81
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	5ad2      	ldrh	r2, [r2, r3]
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	4922      	ldr	r1, [pc, #136]	; (8005e20 <find_volume+0x374>)
 8005d98:	5a5b      	ldrh	r3, [r3, r1]
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	0019      	movs	r1, r3
 8005da0:	0010      	movs	r0, r2
 8005da2:	f7fa fa37 	bl	8000214 <__aeabi_uidivmod>
 8005da6:	000b      	movs	r3, r1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <find_volume+0x306>
		return FR_NO_FILESYSTEM;
 8005dae:	230d      	movs	r3, #13
 8005db0:	e1b3      	b.n	800611a <find_volume+0x66e>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	7d1b      	ldrb	r3, [r3, #20]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	7cdb      	ldrb	r3, [r3, #19]
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b21b      	sxth	r3, r3
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d112      	bne.n	8005df4 <find_volume+0x348>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	2223      	movs	r2, #35	; 0x23
 8005dd2:	5c9b      	ldrb	r3, [r3, r2]
 8005dd4:	061a      	lsls	r2, r3, #24
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2122      	movs	r1, #34	; 0x22
 8005dda:	5c5b      	ldrb	r3, [r3, r1]
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	4313      	orrs	r3, r2
 8005de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005de2:	2121      	movs	r1, #33	; 0x21
 8005de4:	5c52      	ldrb	r2, [r2, r1]
 8005de6:	0212      	lsls	r2, r2, #8
 8005de8:	4313      	orrs	r3, r2
 8005dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dec:	2120      	movs	r1, #32
 8005dee:	5c52      	ldrb	r2, [r2, r1]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	7bdb      	ldrb	r3, [r3, #15]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	b21a      	sxth	r2, r3
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	7b9b      	ldrb	r3, [r3, #14]
 8005e00:	b21b      	sxth	r3, r3
 8005e02:	4313      	orrs	r3, r2
 8005e04:	b21a      	sxth	r2, r3
 8005e06:	212e      	movs	r1, #46	; 0x2e
 8005e08:	187b      	adds	r3, r7, r1
 8005e0a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10b      	bne.n	8005e2c <find_volume+0x380>
 8005e14:	230d      	movs	r3, #13
 8005e16:	e180      	b.n	800611a <find_volume+0x66e>
 8005e18:	200009a0 	.word	0x200009a0
 8005e1c:	00000401 	.word	0x00000401
 8005e20:	0000040a 	.word	0x0000040a
 8005e24:	00000403 	.word	0x00000403
 8005e28:	00000402 	.word	0x00000402

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005e2c:	232e      	movs	r3, #46	; 0x2e
 8005e2e:	18fb      	adds	r3, r7, r3
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e34:	18d4      	adds	r4, r2, r3
 8005e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e38:	2381      	movs	r3, #129	; 0x81
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	5ad2      	ldrh	r2, [r2, r3]
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	49b8      	ldr	r1, [pc, #736]	; (8006124 <find_volume+0x678>)
 8005e42:	5a5b      	ldrh	r3, [r3, r1]
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	0019      	movs	r1, r3
 8005e4a:	0010      	movs	r0, r2
 8005e4c:	f7fa f95c 	bl	8000108 <__udivsi3>
 8005e50:	0003      	movs	r3, r0
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	18e3      	adds	r3, r4, r3
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d201      	bcs.n	8005e64 <find_volume+0x3b8>
 8005e60:	230d      	movs	r3, #13
 8005e62:	e15a      	b.n	800611a <find_volume+0x66e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	1ad2      	subs	r2, r2, r3
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	49ae      	ldr	r1, [pc, #696]	; (8006128 <find_volume+0x67c>)
 8005e6e:	5c5b      	ldrb	r3, [r3, r1]
 8005e70:	0019      	movs	r1, r3
 8005e72:	0010      	movs	r0, r2
 8005e74:	f7fa f948 	bl	8000108 <__udivsi3>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <find_volume+0x3da>
 8005e82:	230d      	movs	r3, #13
 8005e84:	e149      	b.n	800611a <find_volume+0x66e>
	fmt = FS_FAT12;
 8005e86:	2157      	movs	r1, #87	; 0x57
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	4aa6      	ldr	r2, [pc, #664]	; (800612c <find_volume+0x680>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d902      	bls.n	8005e9c <find_volume+0x3f0>
 8005e96:	187b      	adds	r3, r7, r1
 8005e98:	2202      	movs	r2, #2
 8005e9a:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	4aa4      	ldr	r2, [pc, #656]	; (8006130 <find_volume+0x684>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d903      	bls.n	8005eac <find_volume+0x400>
 8005ea4:	2357      	movs	r3, #87	; 0x57
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	1c9a      	adds	r2, r3, #2
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	49a0      	ldr	r1, [pc, #640]	; (8006134 <find_volume+0x688>)
 8005eb4:	505a      	str	r2, [r3, r1]
	fs->volbase = bsect;								/* Volume start sector */
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	499f      	ldr	r1, [pc, #636]	; (8006138 <find_volume+0x68c>)
 8005eba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ebc:	505a      	str	r2, [r3, r1]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005ebe:	232e      	movs	r3, #46	; 0x2e
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	881a      	ldrh	r2, [r3, #0]
 8005ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec6:	18d1      	adds	r1, r2, r3
 8005ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eca:	2384      	movs	r3, #132	; 0x84
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8005ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	18d1      	adds	r1, r2, r3
 8005ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed8:	2385      	movs	r3, #133	; 0x85
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8005ede:	2357      	movs	r3, #87	; 0x57
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d122      	bne.n	8005f2e <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eea:	2381      	movs	r3, #129	; 0x81
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	5ad3      	ldrh	r3, [r2, r3]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <find_volume+0x44c>
 8005ef4:	230d      	movs	r3, #13
 8005ef6:	e110      	b.n	800611a <find_volume+0x66e>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	222f      	movs	r2, #47	; 0x2f
 8005efc:	5c9b      	ldrb	r3, [r3, r2]
 8005efe:	061a      	lsls	r2, r3, #24
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	212e      	movs	r1, #46	; 0x2e
 8005f04:	5c5b      	ldrb	r3, [r3, r1]
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f0c:	212d      	movs	r1, #45	; 0x2d
 8005f0e:	5c52      	ldrb	r2, [r2, r1]
 8005f10:	0212      	lsls	r2, r2, #8
 8005f12:	4313      	orrs	r3, r2
 8005f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f16:	212c      	movs	r1, #44	; 0x2c
 8005f18:	5c52      	ldrb	r2, [r2, r1]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	4987      	ldr	r1, [pc, #540]	; (800613c <find_volume+0x690>)
 8005f20:	505a      	str	r2, [r3, r1]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	4a83      	ldr	r2, [pc, #524]	; (8006134 <find_volume+0x688>)
 8005f26:	589b      	ldr	r3, [r3, r2]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2c:	e028      	b.n	8005f80 <find_volume+0x4d4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f30:	2381      	movs	r3, #129	; 0x81
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	5ad3      	ldrh	r3, [r2, r3]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <find_volume+0x492>
 8005f3a:	230d      	movs	r3, #13
 8005f3c:	e0ed      	b.n	800611a <find_volume+0x66e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f40:	2384      	movs	r3, #132	; 0x84
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	58d2      	ldr	r2, [r2, r3]
 8005f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f48:	18d2      	adds	r2, r2, r3
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	497b      	ldr	r1, [pc, #492]	; (800613c <find_volume+0x690>)
 8005f4e:	505a      	str	r2, [r3, r1]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f50:	2357      	movs	r3, #87	; 0x57
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d104      	bne.n	8005f64 <find_volume+0x4b8>
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	4a75      	ldr	r2, [pc, #468]	; (8006134 <find_volume+0x688>)
 8005f5e:	589b      	ldr	r3, [r3, r2]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	e00c      	b.n	8005f7e <find_volume+0x4d2>
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	4a73      	ldr	r2, [pc, #460]	; (8006134 <find_volume+0x688>)
 8005f68:	589a      	ldr	r2, [r3, r2]
 8005f6a:	0013      	movs	r3, r2
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	189b      	adds	r3, r3, r2
 8005f70:	085a      	lsrs	r2, r3, #1
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	496f      	ldr	r1, [pc, #444]	; (8006134 <find_volume+0x688>)
 8005f76:	585b      	ldr	r3, [r3, r1]
 8005f78:	2101      	movs	r1, #1
 8005f7a:	400b      	ands	r3, r1
 8005f7c:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005f7e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f82:	2383      	movs	r3, #131	; 0x83
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	58d4      	ldr	r4, [r2, r3]
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	4a66      	ldr	r2, [pc, #408]	; (8006124 <find_volume+0x678>)
 8005f8c:	5a9b      	ldrh	r3, [r3, r2]
 8005f8e:	001a      	movs	r2, r3
 8005f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f92:	18d3      	adds	r3, r2, r3
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	4962      	ldr	r1, [pc, #392]	; (8006124 <find_volume+0x678>)
 8005f9a:	5a5b      	ldrh	r3, [r3, r1]
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	0010      	movs	r0, r2
 8005fa0:	f7fa f8b2 	bl	8000108 <__udivsi3>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d201      	bcs.n	8005fae <find_volume+0x502>
		return FR_NO_FILESYSTEM;
 8005faa:	230d      	movs	r3, #13
 8005fac:	e0b5      	b.n	800611a <find_volume+0x66e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb0:	2382      	movs	r3, #130	; 0x82
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4249      	negs	r1, r1
 8005fb8:	50d1      	str	r1, [r2, r3]
 8005fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fbc:	2382      	movs	r3, #130	; 0x82
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	58d2      	ldr	r2, [r2, r3]
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	495e      	ldr	r1, [pc, #376]	; (8006140 <find_volume+0x694>)
 8005fc6:	505a      	str	r2, [r3, r1]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	4a5e      	ldr	r2, [pc, #376]	; (8006144 <find_volume+0x698>)
 8005fcc:	2180      	movs	r1, #128	; 0x80
 8005fce:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005fd0:	2357      	movs	r3, #87	; 0x57
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d000      	beq.n	8005fdc <find_volume+0x530>
 8005fda:	e087      	b.n	80060ec <find_volume+0x640>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	2231      	movs	r2, #49	; 0x31
 8005fe0:	5c9b      	ldrb	r3, [r3, r2]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	b21a      	sxth	r2, r3
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	2130      	movs	r1, #48	; 0x30
 8005fea:	5c5b      	ldrb	r3, [r3, r1]
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b21b      	sxth	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d000      	beq.n	8005ff8 <find_volume+0x54c>
 8005ff6:	e079      	b.n	80060ec <find_volume+0x640>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	0011      	movs	r1, r2
 8006000:	0018      	movs	r0, r3
 8006002:	f7fd fe51 	bl	8003ca8 <move_window>
 8006006:	1e03      	subs	r3, r0, #0
 8006008:	d170      	bne.n	80060ec <find_volume+0x640>
	{
		fs->fsi_flag = 0;
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	4a4d      	ldr	r2, [pc, #308]	; (8006144 <find_volume+0x698>)
 800600e:	2100      	movs	r1, #0
 8006010:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	4a4c      	ldr	r2, [pc, #304]	; (8006148 <find_volume+0x69c>)
 8006016:	5c9b      	ldrb	r3, [r3, r2]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	b21a      	sxth	r2, r3
 800601c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800601e:	23ff      	movs	r3, #255	; 0xff
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	5ccb      	ldrb	r3, [r1, r3]
 8006024:	b21b      	sxth	r3, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	b21b      	sxth	r3, r3
 800602a:	4a48      	ldr	r2, [pc, #288]	; (800614c <find_volume+0x6a0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d15d      	bne.n	80060ec <find_volume+0x640>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	78db      	ldrb	r3, [r3, #3]
 8006034:	061a      	lsls	r2, r3, #24
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	789b      	ldrb	r3, [r3, #2]
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	4313      	orrs	r3, r2
 800603e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006040:	7852      	ldrb	r2, [r2, #1]
 8006042:	0212      	lsls	r2, r2, #8
 8006044:	4313      	orrs	r3, r2
 8006046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006048:	7812      	ldrb	r2, [r2, #0]
 800604a:	4313      	orrs	r3, r2
 800604c:	4a40      	ldr	r2, [pc, #256]	; (8006150 <find_volume+0x6a4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d14c      	bne.n	80060ec <find_volume+0x640>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006054:	23e8      	movs	r3, #232	; 0xe8
 8006056:	33ff      	adds	r3, #255	; 0xff
 8006058:	5cd3      	ldrb	r3, [r2, r3]
 800605a:	061a      	lsls	r2, r3, #24
 800605c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800605e:	23f3      	movs	r3, #243	; 0xf3
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	4313      	orrs	r3, r2
 8006068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800606a:	22e6      	movs	r2, #230	; 0xe6
 800606c:	32ff      	adds	r2, #255	; 0xff
 800606e:	5c8a      	ldrb	r2, [r1, r2]
 8006070:	0212      	lsls	r2, r2, #8
 8006072:	4313      	orrs	r3, r2
 8006074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006076:	22f2      	movs	r2, #242	; 0xf2
 8006078:	0052      	lsls	r2, r2, #1
 800607a:	5c8a      	ldrb	r2, [r1, r2]
 800607c:	4313      	orrs	r3, r2
 800607e:	4a35      	ldr	r2, [pc, #212]	; (8006154 <find_volume+0x6a8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d133      	bne.n	80060ec <find_volume+0x640>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006086:	23ec      	movs	r3, #236	; 0xec
 8006088:	33ff      	adds	r3, #255	; 0xff
 800608a:	5cd3      	ldrb	r3, [r2, r3]
 800608c:	061a      	lsls	r2, r3, #24
 800608e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006090:	23f5      	movs	r3, #245	; 0xf5
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	5ccb      	ldrb	r3, [r1, r3]
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	4313      	orrs	r3, r2
 800609a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800609c:	22ea      	movs	r2, #234	; 0xea
 800609e:	32ff      	adds	r2, #255	; 0xff
 80060a0:	5c8a      	ldrb	r2, [r1, r2]
 80060a2:	0212      	lsls	r2, r2, #8
 80060a4:	4313      	orrs	r3, r2
 80060a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060a8:	22f4      	movs	r2, #244	; 0xf4
 80060aa:	0052      	lsls	r2, r2, #1
 80060ac:	5c8a      	ldrb	r2, [r1, r2]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b4:	2382      	movs	r3, #130	; 0x82
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80060ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060bc:	23f0      	movs	r3, #240	; 0xf0
 80060be:	33ff      	adds	r3, #255	; 0xff
 80060c0:	5cd3      	ldrb	r3, [r2, r3]
 80060c2:	061a      	lsls	r2, r3, #24
 80060c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c6:	23f7      	movs	r3, #247	; 0xf7
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	5ccb      	ldrb	r3, [r1, r3]
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	4313      	orrs	r3, r2
 80060d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060d2:	22ee      	movs	r2, #238	; 0xee
 80060d4:	32ff      	adds	r2, #255	; 0xff
 80060d6:	5c8a      	ldrb	r2, [r1, r2]
 80060d8:	0212      	lsls	r2, r2, #8
 80060da:	4313      	orrs	r3, r2
 80060dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060de:	22f6      	movs	r2, #246	; 0xf6
 80060e0:	0052      	lsls	r2, r2, #1
 80060e2:	5c8a      	ldrb	r2, [r1, r2]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	4915      	ldr	r1, [pc, #84]	; (8006140 <find_volume+0x694>)
 80060ea:	505a      	str	r2, [r3, r1]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80060ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ee:	2357      	movs	r3, #87	; 0x57
 80060f0:	18f9      	adds	r1, r7, r3
 80060f2:	2380      	movs	r3, #128	; 0x80
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	7809      	ldrb	r1, [r1, #0]
 80060f8:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80060fa:	4b17      	ldr	r3, [pc, #92]	; (8006158 <find_volume+0x6ac>)
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <find_volume+0x6ac>)
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <find_volume+0x6ac>)
 8006108:	8819      	ldrh	r1, [r3, #0]
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <find_volume+0x6b0>)
 800610e:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	0018      	movs	r0, r3
 8006114:	f7fd fd4a 	bl	8003bac <clear_lock>
#endif

	return FR_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b016      	add	sp, #88	; 0x58
 8006120:	bdb0      	pop	{r4, r5, r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	0000040a 	.word	0x0000040a
 8006128:	00000402 	.word	0x00000402
 800612c:	00000ff5 	.word	0x00000ff5
 8006130:	0000fff5 	.word	0x0000fff5
 8006134:	00000414 	.word	0x00000414
 8006138:	0000041c 	.word	0x0000041c
 800613c:	00000424 	.word	0x00000424
 8006140:	0000040c 	.word	0x0000040c
 8006144:	00000405 	.word	0x00000405
 8006148:	000001ff 	.word	0x000001ff
 800614c:	ffffaa55 	.word	0xffffaa55
 8006150:	41615252 	.word	0x41615252
 8006154:	61417272 	.word	0x61417272
 8006158:	200009a4 	.word	0x200009a4
 800615c:	00000406 	.word	0x00000406

08006160 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d027      	beq.n	80061c2 <validate+0x62>
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	58d3      	ldr	r3, [r2, r3]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d021      	beq.n	80061c2 <validate+0x62>
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	58d2      	ldr	r2, [r2, r3]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d018      	beq.n	80061c2 <validate+0x62>
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	58d3      	ldr	r3, [r2, r3]
 8006198:	4a0d      	ldr	r2, [pc, #52]	; (80061d0 <validate+0x70>)
 800619a:	5a9a      	ldrh	r2, [r3, r2]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	490d      	ldr	r1, [pc, #52]	; (80061d4 <validate+0x74>)
 80061a0:	5a5b      	ldrh	r3, [r3, r1]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d10d      	bne.n	80061c2 <validate+0x62>
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	58d3      	ldr	r3, [r2, r3]
 80061ae:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <validate+0x78>)
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7fd fa22 	bl	80035fc <disk_status>
 80061b8:	0003      	movs	r3, r0
 80061ba:	001a      	movs	r2, r3
 80061bc:	2301      	movs	r3, #1
 80061be:	4013      	ands	r3, r2
 80061c0:	d001      	beq.n	80061c6 <validate+0x66>
		return FR_INVALID_OBJECT;
 80061c2:	2309      	movs	r3, #9
 80061c4:	e000      	b.n	80061c8 <validate+0x68>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	0018      	movs	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b004      	add	sp, #16
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	00000406 	.word	0x00000406
 80061d4:	00000404 	.word	0x00000404
 80061d8:	00000401 	.word	0x00000401

080061dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061dc:	b5b0      	push	{r4, r5, r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	1dfb      	adds	r3, r7, #7
 80061e8:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80061ee:	2310      	movs	r3, #16
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	0018      	movs	r0, r3
 80061f4:	f7ff fba8 	bl	8005948 <get_ldnumber>
 80061f8:	0003      	movs	r3, r0
 80061fa:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da01      	bge.n	8006206 <f_mount+0x2a>
 8006202:	230b      	movs	r3, #11
 8006204:	e034      	b.n	8006270 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006206:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <f_mount+0x9c>)
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	0092      	lsls	r2, r2, #2
 800620c:	58d3      	ldr	r3, [r2, r3]
 800620e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	0018      	movs	r0, r3
 800621a:	f7fd fcc7 	bl	8003bac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	2100      	movs	r1, #0
 8006226:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	2100      	movs	r1, #0
 8006236:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006238:	68f9      	ldr	r1, [r7, #12]
 800623a:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <f_mount+0x9c>)
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	0092      	lsls	r2, r2, #2
 8006240:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <f_mount+0x74>
 8006248:	1dfb      	adds	r3, r7, #7
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d001      	beq.n	8006254 <f_mount+0x78>
 8006250:	2300      	movs	r3, #0
 8006252:	e00d      	b.n	8006270 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006254:	2517      	movs	r5, #23
 8006256:	197c      	adds	r4, r7, r5
 8006258:	2308      	movs	r3, #8
 800625a:	18f9      	adds	r1, r7, r3
 800625c:	230c      	movs	r3, #12
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	0018      	movs	r0, r3
 8006264:	f7ff fc22 	bl	8005aac <find_volume>
 8006268:	0003      	movs	r3, r0
 800626a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800626c:	197b      	adds	r3, r7, r5
 800626e:	781b      	ldrb	r3, [r3, #0]
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b008      	add	sp, #32
 8006276:	bdb0      	pop	{r4, r5, r7, pc}
 8006278:	200009a0 	.word	0x200009a0

0800627c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800627c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627e:	4cd0      	ldr	r4, [pc, #832]	; (80065c0 <f_open+0x344>)
 8006280:	44a5      	add	sp, r4
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	4bce      	ldr	r3, [pc, #824]	; (80065c4 <f_open+0x348>)
 800628a:	218b      	movs	r1, #139	; 0x8b
 800628c:	00c9      	lsls	r1, r1, #3
 800628e:	185b      	adds	r3, r3, r1
 8006290:	19db      	adds	r3, r3, r7
 8006292:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <f_open+0x22>
 800629a:	2309      	movs	r3, #9
 800629c:	e26a      	b.n	8006774 <f_open+0x4f8>
	fp->fs = 0;			/* Clear file object */
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	2100      	movs	r1, #0
 80062a6:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80062a8:	4bc6      	ldr	r3, [pc, #792]	; (80065c4 <f_open+0x348>)
 80062aa:	258b      	movs	r5, #139	; 0x8b
 80062ac:	00ed      	lsls	r5, r5, #3
 80062ae:	195b      	adds	r3, r3, r5
 80062b0:	19db      	adds	r3, r3, r7
 80062b2:	4ac4      	ldr	r2, [pc, #784]	; (80065c4 <f_open+0x348>)
 80062b4:	1952      	adds	r2, r2, r5
 80062b6:	19d2      	adds	r2, r2, r7
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	211f      	movs	r1, #31
 80062bc:	400a      	ands	r2, r1
 80062be:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80062c0:	4bc0      	ldr	r3, [pc, #768]	; (80065c4 <f_open+0x348>)
 80062c2:	195b      	adds	r3, r3, r5
 80062c4:	19db      	adds	r3, r3, r7
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2201      	movs	r2, #1
 80062ca:	4393      	bics	r3, r2
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4ebe      	ldr	r6, [pc, #760]	; (80065c8 <f_open+0x34c>)
 80062d0:	19bc      	adds	r4, r7, r6
 80062d2:	2308      	movs	r3, #8
 80062d4:	18f9      	adds	r1, r7, r3
 80062d6:	2320      	movs	r3, #32
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	2080      	movs	r0, #128	; 0x80
 80062dc:	00c0      	lsls	r0, r0, #3
 80062de:	4684      	mov	ip, r0
 80062e0:	4463      	add	r3, ip
 80062e2:	0018      	movs	r0, r3
 80062e4:	f7ff fbe2 	bl	8005aac <find_volume>
 80062e8:	0003      	movs	r3, r0
 80062ea:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80062ec:	0030      	movs	r0, r6
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d000      	beq.n	80062f8 <f_open+0x7c>
 80062f6:	e23a      	b.n	800676e <f_open+0x4f2>
		INIT_BUF(dj);
 80062f8:	4bb4      	ldr	r3, [pc, #720]	; (80065cc <f_open+0x350>)
 80062fa:	195a      	adds	r2, r3, r5
 80062fc:	19d2      	adds	r2, r2, r7
 80062fe:	2383      	movs	r3, #131	; 0x83
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	2114      	movs	r1, #20
 8006304:	1879      	adds	r1, r7, r1
 8006306:	50d1      	str	r1, [r2, r3]
 8006308:	4bb0      	ldr	r3, [pc, #704]	; (80065cc <f_open+0x350>)
 800630a:	195a      	adds	r2, r3, r5
 800630c:	19d2      	adds	r2, r2, r7
 800630e:	2384      	movs	r3, #132	; 0x84
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	49af      	ldr	r1, [pc, #700]	; (80065d0 <f_open+0x354>)
 8006314:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	0006      	movs	r6, r0
 800631a:	183c      	adds	r4, r7, r0
 800631c:	2320      	movs	r3, #32
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	0011      	movs	r1, r2
 8006322:	0018      	movs	r0, r3
 8006324:	f7ff fa88 	bl	8005838 <follow_path>
 8006328:	0003      	movs	r3, r0
 800632a:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 800632c:	4ba7      	ldr	r3, [pc, #668]	; (80065cc <f_open+0x350>)
 800632e:	195b      	adds	r3, r3, r5
 8006330:	19db      	adds	r3, r3, r7
 8006332:	4aa8      	ldr	r2, [pc, #672]	; (80065d4 <f_open+0x358>)
 8006334:	589b      	ldr	r3, [r3, r2]
 8006336:	228a      	movs	r2, #138	; 0x8a
 8006338:	00d2      	lsls	r2, r2, #3
 800633a:	18b9      	adds	r1, r7, r2
 800633c:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800633e:	19bb      	adds	r3, r7, r6
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d11d      	bne.n	8006382 <f_open+0x106>
			if (!dir)	/* Default directory itself */
 8006346:	18bb      	adds	r3, r7, r2
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <f_open+0xda>
				res = FR_INVALID_NAME;
 800634e:	19bb      	adds	r3, r7, r6
 8006350:	2206      	movs	r2, #6
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	e015      	b.n	8006382 <f_open+0x106>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006356:	4b9b      	ldr	r3, [pc, #620]	; (80065c4 <f_open+0x348>)
 8006358:	228b      	movs	r2, #139	; 0x8b
 800635a:	00d2      	lsls	r2, r2, #3
 800635c:	189b      	adds	r3, r3, r2
 800635e:	19db      	adds	r3, r3, r7
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	4393      	bics	r3, r2
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	4193      	sbcs	r3, r2
 800636a:	b2db      	uxtb	r3, r3
 800636c:	001a      	movs	r2, r3
 800636e:	4b96      	ldr	r3, [pc, #600]	; (80065c8 <f_open+0x34c>)
 8006370:	18fc      	adds	r4, r7, r3
 8006372:	2320      	movs	r3, #32
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	0011      	movs	r1, r2
 8006378:	0018      	movs	r0, r3
 800637a:	f7fd fa7d 	bl	8003878 <chk_lock>
 800637e:	0003      	movs	r3, r0
 8006380:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006382:	4b90      	ldr	r3, [pc, #576]	; (80065c4 <f_open+0x348>)
 8006384:	228b      	movs	r2, #139	; 0x8b
 8006386:	00d2      	lsls	r2, r2, #3
 8006388:	189b      	adds	r3, r3, r2
 800638a:	19db      	adds	r3, r3, r7
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	221c      	movs	r2, #28
 8006390:	4013      	ands	r3, r2
 8006392:	d100      	bne.n	8006396 <f_open+0x11a>
 8006394:	e101      	b.n	800659a <f_open+0x31e>
			if (res != FR_OK) {					/* No file, create new */
 8006396:	4a8c      	ldr	r2, [pc, #560]	; (80065c8 <f_open+0x34c>)
 8006398:	18bb      	adds	r3, r7, r2
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d029      	beq.n	80063f4 <f_open+0x178>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80063a0:	18bb      	adds	r3, r7, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d10f      	bne.n	80063c8 <f_open+0x14c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80063a8:	f7fd fad4 	bl	8003954 <enq_lock>
 80063ac:	1e03      	subs	r3, r0, #0
 80063ae:	d007      	beq.n	80063c0 <f_open+0x144>
 80063b0:	2320      	movs	r3, #32
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7fe feff 	bl	80051b8 <dir_register>
 80063ba:	0003      	movs	r3, r0
 80063bc:	001a      	movs	r2, r3
 80063be:	e000      	b.n	80063c2 <f_open+0x146>
 80063c0:	2212      	movs	r2, #18
 80063c2:	4b81      	ldr	r3, [pc, #516]	; (80065c8 <f_open+0x34c>)
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80063c8:	4b7e      	ldr	r3, [pc, #504]	; (80065c4 <f_open+0x348>)
 80063ca:	208b      	movs	r0, #139	; 0x8b
 80063cc:	00c0      	lsls	r0, r0, #3
 80063ce:	181b      	adds	r3, r3, r0
 80063d0:	19db      	adds	r3, r3, r7
 80063d2:	4a7c      	ldr	r2, [pc, #496]	; (80065c4 <f_open+0x348>)
 80063d4:	1812      	adds	r2, r2, r0
 80063d6:	19d2      	adds	r2, r2, r7
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	2108      	movs	r1, #8
 80063dc:	430a      	orrs	r2, r1
 80063de:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80063e0:	4b7a      	ldr	r3, [pc, #488]	; (80065cc <f_open+0x350>)
 80063e2:	181b      	adds	r3, r3, r0
 80063e4:	19db      	adds	r3, r3, r7
 80063e6:	4a7b      	ldr	r2, [pc, #492]	; (80065d4 <f_open+0x358>)
 80063e8:	589b      	ldr	r3, [r3, r2]
 80063ea:	228a      	movs	r2, #138	; 0x8a
 80063ec:	00d2      	lsls	r2, r2, #3
 80063ee:	18ba      	adds	r2, r7, r2
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e01b      	b.n	800642c <f_open+0x1b0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80063f4:	238a      	movs	r3, #138	; 0x8a
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	18fb      	adds	r3, r7, r3
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330b      	adds	r3, #11
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	001a      	movs	r2, r3
 8006402:	2311      	movs	r3, #17
 8006404:	4013      	ands	r3, r2
 8006406:	d004      	beq.n	8006412 <f_open+0x196>
					res = FR_DENIED;
 8006408:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <f_open+0x34c>)
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	2207      	movs	r2, #7
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e00c      	b.n	800642c <f_open+0x1b0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006412:	4b6c      	ldr	r3, [pc, #432]	; (80065c4 <f_open+0x348>)
 8006414:	228b      	movs	r2, #139	; 0x8b
 8006416:	00d2      	lsls	r2, r2, #3
 8006418:	189b      	adds	r3, r3, r2
 800641a:	19db      	adds	r3, r3, r7
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2204      	movs	r2, #4
 8006420:	4013      	ands	r3, r2
 8006422:	d003      	beq.n	800642c <f_open+0x1b0>
						res = FR_EXIST;
 8006424:	4b68      	ldr	r3, [pc, #416]	; (80065c8 <f_open+0x34c>)
 8006426:	18fb      	adds	r3, r7, r3
 8006428:	2208      	movs	r2, #8
 800642a:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800642c:	4866      	ldr	r0, [pc, #408]	; (80065c8 <f_open+0x34c>)
 800642e:	183b      	adds	r3, r7, r0
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d000      	beq.n	8006438 <f_open+0x1bc>
 8006436:	e0ee      	b.n	8006616 <f_open+0x39a>
 8006438:	4b62      	ldr	r3, [pc, #392]	; (80065c4 <f_open+0x348>)
 800643a:	248b      	movs	r4, #139	; 0x8b
 800643c:	00e4      	lsls	r4, r4, #3
 800643e:	191b      	adds	r3, r3, r4
 8006440:	19db      	adds	r3, r3, r7
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2208      	movs	r2, #8
 8006446:	4013      	ands	r3, r2
 8006448:	d100      	bne.n	800644c <f_open+0x1d0>
 800644a:	e0e4      	b.n	8006616 <f_open+0x39a>
				dw = GET_FATTIME();				/* Created time */
 800644c:	f7fd f868 	bl	8003520 <get_fattime>
 8006450:	0003      	movs	r3, r0
 8006452:	4e61      	ldr	r6, [pc, #388]	; (80065d8 <f_open+0x35c>)
 8006454:	19ba      	adds	r2, r7, r6
 8006456:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006458:	218a      	movs	r1, #138	; 0x8a
 800645a:	00c9      	lsls	r1, r1, #3
 800645c:	187b      	adds	r3, r7, r1
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330e      	adds	r3, #14
 8006462:	19ba      	adds	r2, r7, r6
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	19bb      	adds	r3, r7, r6
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	b29a      	uxth	r2, r3
 8006474:	187b      	adds	r3, r7, r1
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330f      	adds	r3, #15
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	19bb      	adds	r3, r7, r6
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	0c1a      	lsrs	r2, r3, #16
 8006484:	187b      	adds	r3, r7, r1
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3310      	adds	r3, #16
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	19bb      	adds	r3, r7, r6
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	0e1a      	lsrs	r2, r3, #24
 8006494:	187b      	adds	r3, r7, r1
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3311      	adds	r3, #17
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800649e:	187b      	adds	r3, r7, r1
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330b      	adds	r3, #11
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	331c      	adds	r3, #28
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	187b      	adds	r3, r7, r1
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	331d      	adds	r3, #29
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	187b      	adds	r3, r7, r1
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	331e      	adds	r3, #30
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	187b      	adds	r3, r7, r1
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	331f      	adds	r3, #31
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80064d0:	4b3e      	ldr	r3, [pc, #248]	; (80065cc <f_open+0x350>)
 80064d2:	0025      	movs	r5, r4
 80064d4:	191b      	adds	r3, r3, r4
 80064d6:	19da      	adds	r2, r3, r7
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	58d3      	ldr	r3, [r2, r3]
 80064de:	000c      	movs	r4, r1
 80064e0:	187a      	adds	r2, r7, r1
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7fe fb54 	bl	8004b94 <ld_clust>
 80064ec:	0003      	movs	r3, r0
 80064ee:	2189      	movs	r1, #137	; 0x89
 80064f0:	00c9      	lsls	r1, r1, #3
 80064f2:	187a      	adds	r2, r7, r1
 80064f4:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80064f6:	193b      	adds	r3, r7, r4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2100      	movs	r1, #0
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7fe fb76 	bl	8004bee <st_clust>
				dj.fs->wflag = 1;
 8006502:	4b32      	ldr	r3, [pc, #200]	; (80065cc <f_open+0x350>)
 8006504:	195b      	adds	r3, r3, r5
 8006506:	19da      	adds	r2, r3, r7
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	58d3      	ldr	r3, [r2, r3]
 800650e:	4a33      	ldr	r2, [pc, #204]	; (80065dc <f_open+0x360>)
 8006510:	2101      	movs	r1, #1
 8006512:	5499      	strb	r1, [r3, r2]
				if (cl) {						/* Remove the cluster chain if exist */
 8006514:	2189      	movs	r1, #137	; 0x89
 8006516:	00c9      	lsls	r1, r1, #3
 8006518:	187b      	adds	r3, r7, r1
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d100      	bne.n	8006522 <f_open+0x2a6>
 8006520:	e079      	b.n	8006616 <f_open+0x39a>
					dw = dj.fs->winsect;
 8006522:	4b2a      	ldr	r3, [pc, #168]	; (80065cc <f_open+0x350>)
 8006524:	195b      	adds	r3, r3, r5
 8006526:	19da      	adds	r2, r3, r7
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	58d3      	ldr	r3, [r2, r3]
 800652e:	4a2c      	ldr	r2, [pc, #176]	; (80065e0 <f_open+0x364>)
 8006530:	589b      	ldr	r3, [r3, r2]
 8006532:	19ba      	adds	r2, r7, r6
 8006534:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006536:	4b25      	ldr	r3, [pc, #148]	; (80065cc <f_open+0x350>)
 8006538:	195b      	adds	r3, r3, r5
 800653a:	19da      	adds	r2, r3, r7
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	58d3      	ldr	r3, [r2, r3]
 8006542:	4821      	ldr	r0, [pc, #132]	; (80065c8 <f_open+0x34c>)
 8006544:	183c      	adds	r4, r7, r0
 8006546:	187a      	adds	r2, r7, r1
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	0011      	movs	r1, r2
 800654c:	0018      	movs	r0, r3
 800654e:	f7fd ff45 	bl	80043dc <remove_chain>
 8006552:	0003      	movs	r3, r0
 8006554:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 8006556:	481c      	ldr	r0, [pc, #112]	; (80065c8 <f_open+0x34c>)
 8006558:	183b      	adds	r3, r7, r0
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d15a      	bne.n	8006616 <f_open+0x39a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006560:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <f_open+0x350>)
 8006562:	195b      	adds	r3, r3, r5
 8006564:	19da      	adds	r2, r3, r7
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	58d3      	ldr	r3, [r2, r3]
 800656c:	2189      	movs	r1, #137	; 0x89
 800656e:	00c9      	lsls	r1, r1, #3
 8006570:	187a      	adds	r2, r7, r1
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	3a01      	subs	r2, #1
 8006576:	491b      	ldr	r1, [pc, #108]	; (80065e4 <f_open+0x368>)
 8006578:	505a      	str	r2, [r3, r1]
						res = move_window(dj.fs, dw);
 800657a:	4b14      	ldr	r3, [pc, #80]	; (80065cc <f_open+0x350>)
 800657c:	195b      	adds	r3, r3, r5
 800657e:	19da      	adds	r2, r3, r7
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	58d3      	ldr	r3, [r2, r3]
 8006586:	183c      	adds	r4, r7, r0
 8006588:	19ba      	adds	r2, r7, r6
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	0011      	movs	r1, r2
 800658e:	0018      	movs	r0, r3
 8006590:	f7fd fb8a 	bl	8003ca8 <move_window>
 8006594:	0003      	movs	r3, r0
 8006596:	7023      	strb	r3, [r4, #0]
 8006598:	e03d      	b.n	8006616 <f_open+0x39a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800659a:	490b      	ldr	r1, [pc, #44]	; (80065c8 <f_open+0x34c>)
 800659c:	187b      	adds	r3, r7, r1
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d138      	bne.n	8006616 <f_open+0x39a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80065a4:	238a      	movs	r3, #138	; 0x8a
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330b      	adds	r3, #11
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	001a      	movs	r2, r3
 80065b2:	2310      	movs	r3, #16
 80065b4:	4013      	ands	r3, r2
 80065b6:	d017      	beq.n	80065e8 <f_open+0x36c>
					res = FR_NO_FILE;
 80065b8:	187b      	adds	r3, r7, r1
 80065ba:	2204      	movs	r2, #4
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e02a      	b.n	8006616 <f_open+0x39a>
 80065c0:	fffffba4 	.word	0xfffffba4
 80065c4:	fffffbaf 	.word	0xfffffbaf
 80065c8:	00000457 	.word	0x00000457
 80065cc:	fffffbc8 	.word	0xfffffbc8
 80065d0:	200009c0 	.word	0x200009c0
 80065d4:	00000414 	.word	0x00000414
 80065d8:	0000044c 	.word	0x0000044c
 80065dc:	00000404 	.word	0x00000404
 80065e0:	0000042c 	.word	0x0000042c
 80065e4:	0000040c 	.word	0x0000040c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80065e8:	4b65      	ldr	r3, [pc, #404]	; (8006780 <f_open+0x504>)
 80065ea:	228b      	movs	r2, #139	; 0x8b
 80065ec:	00d2      	lsls	r2, r2, #3
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	19db      	adds	r3, r3, r7
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2202      	movs	r2, #2
 80065f6:	4013      	ands	r3, r2
 80065f8:	d00d      	beq.n	8006616 <f_open+0x39a>
 80065fa:	238a      	movs	r3, #138	; 0x8a
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330b      	adds	r3, #11
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	001a      	movs	r2, r3
 8006608:	2301      	movs	r3, #1
 800660a:	4013      	ands	r3, r2
 800660c:	d003      	beq.n	8006616 <f_open+0x39a>
						res = FR_DENIED;
 800660e:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <f_open+0x508>)
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	2207      	movs	r2, #7
 8006614:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006616:	4b5b      	ldr	r3, [pc, #364]	; (8006784 <f_open+0x508>)
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d146      	bne.n	80066ae <f_open+0x432>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006620:	4b57      	ldr	r3, [pc, #348]	; (8006780 <f_open+0x504>)
 8006622:	218b      	movs	r1, #139	; 0x8b
 8006624:	00c9      	lsls	r1, r1, #3
 8006626:	185b      	adds	r3, r3, r1
 8006628:	19db      	adds	r3, r3, r7
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2208      	movs	r2, #8
 800662e:	4013      	ands	r3, r2
 8006630:	d009      	beq.n	8006646 <f_open+0x3ca>
				mode |= FA__WRITTEN;
 8006632:	4b53      	ldr	r3, [pc, #332]	; (8006780 <f_open+0x504>)
 8006634:	185b      	adds	r3, r3, r1
 8006636:	19db      	adds	r3, r3, r7
 8006638:	4a51      	ldr	r2, [pc, #324]	; (8006780 <f_open+0x504>)
 800663a:	1852      	adds	r2, r2, r1
 800663c:	19d2      	adds	r2, r2, r7
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	2120      	movs	r1, #32
 8006642:	430a      	orrs	r2, r1
 8006644:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006646:	4b50      	ldr	r3, [pc, #320]	; (8006788 <f_open+0x50c>)
 8006648:	208b      	movs	r0, #139	; 0x8b
 800664a:	00c0      	lsls	r0, r0, #3
 800664c:	181b      	adds	r3, r3, r0
 800664e:	19da      	adds	r2, r3, r7
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	58d3      	ldr	r3, [r2, r3]
 8006656:	4a4d      	ldr	r2, [pc, #308]	; (800678c <f_open+0x510>)
 8006658:	589a      	ldr	r2, [r3, r2]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	494c      	ldr	r1, [pc, #304]	; (8006790 <f_open+0x514>)
 800665e:	505a      	str	r2, [r3, r1]
			fp->dir_ptr = dir;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	2384      	movs	r3, #132	; 0x84
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	218a      	movs	r1, #138	; 0x8a
 8006668:	00c9      	lsls	r1, r1, #3
 800666a:	1879      	adds	r1, r7, r1
 800666c:	6809      	ldr	r1, [r1, #0]
 800666e:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006670:	4b43      	ldr	r3, [pc, #268]	; (8006780 <f_open+0x504>)
 8006672:	181b      	adds	r3, r3, r0
 8006674:	19db      	adds	r3, r3, r7
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	4393      	bics	r3, r2
 800667c:	1e5a      	subs	r2, r3, #1
 800667e:	4193      	sbcs	r3, r2
 8006680:	b2db      	uxtb	r3, r3
 8006682:	001a      	movs	r2, r3
 8006684:	2320      	movs	r3, #32
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	0011      	movs	r1, r2
 800668a:	0018      	movs	r0, r3
 800668c:	f7fd f982 	bl	8003994 <inc_lock>
 8006690:	0001      	movs	r1, r0
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	2385      	movs	r3, #133	; 0x85
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	2385      	movs	r3, #133	; 0x85
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	58d3      	ldr	r3, [r2, r3]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <f_open+0x432>
 80066a6:	4b37      	ldr	r3, [pc, #220]	; (8006784 <f_open+0x508>)
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2202      	movs	r2, #2
 80066ac:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80066ae:	4b35      	ldr	r3, [pc, #212]	; (8006784 <f_open+0x508>)
 80066b0:	18fb      	adds	r3, r7, r3
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d15a      	bne.n	800676e <f_open+0x4f2>
			fp->flag = mode;					/* File access mode */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a31      	ldr	r2, [pc, #196]	; (8006780 <f_open+0x504>)
 80066bc:	258b      	movs	r5, #139	; 0x8b
 80066be:	00ed      	lsls	r5, r5, #3
 80066c0:	1952      	adds	r2, r2, r5
 80066c2:	19d2      	adds	r2, r2, r7
 80066c4:	4933      	ldr	r1, [pc, #204]	; (8006794 <f_open+0x518>)
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4a32      	ldr	r2, [pc, #200]	; (8006798 <f_open+0x51c>)
 80066ce:	2100      	movs	r1, #0
 80066d0:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80066d2:	4b2d      	ldr	r3, [pc, #180]	; (8006788 <f_open+0x50c>)
 80066d4:	195b      	adds	r3, r3, r5
 80066d6:	19da      	adds	r2, r3, r7
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	58d3      	ldr	r3, [r2, r3]
 80066de:	248a      	movs	r4, #138	; 0x8a
 80066e0:	00e4      	lsls	r4, r4, #3
 80066e2:	193a      	adds	r2, r7, r4
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	0011      	movs	r1, r2
 80066e8:	0018      	movs	r0, r3
 80066ea:	f7fe fa53 	bl	8004b94 <ld_clust>
 80066ee:	0001      	movs	r1, r0
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	2382      	movs	r3, #130	; 0x82
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80066f8:	0021      	movs	r1, r4
 80066fa:	187b      	adds	r3, r7, r1
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	331f      	adds	r3, #31
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	061a      	lsls	r2, r3, #24
 8006704:	187b      	adds	r3, r7, r1
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	331e      	adds	r3, #30
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	041b      	lsls	r3, r3, #16
 800670e:	4313      	orrs	r3, r2
 8006710:	187a      	adds	r2, r7, r1
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	321d      	adds	r2, #29
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	0212      	lsls	r2, r2, #8
 800671a:	4313      	orrs	r3, r2
 800671c:	187a      	adds	r2, r7, r1
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	321c      	adds	r2, #28
 8006722:	7812      	ldrb	r2, [r2, #0]
 8006724:	431a      	orrs	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	491c      	ldr	r1, [pc, #112]	; (800679c <f_open+0x520>)
 800672a:	505a      	str	r2, [r3, r1]
			fp->fptr = 0;						/* File pointer */
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	2381      	movs	r3, #129	; 0x81
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	2100      	movs	r1, #0
 8006734:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	2383      	movs	r3, #131	; 0x83
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	2100      	movs	r1, #0
 800673e:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <f_open+0x524>)
 8006744:	2100      	movs	r1, #0
 8006746:	5099      	str	r1, [r3, r2]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <f_open+0x50c>)
 800674a:	195b      	adds	r3, r3, r5
 800674c:	19da      	adds	r2, r3, r7
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	58d1      	ldr	r1, [r2, r3]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	2380      	movs	r3, #128	; 0x80
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	2380      	movs	r3, #128	; 0x80
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	58d3      	ldr	r3, [r2, r3]
 8006764:	4a0b      	ldr	r2, [pc, #44]	; (8006794 <f_open+0x518>)
 8006766:	5a99      	ldrh	r1, [r3, r2]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a0e      	ldr	r2, [pc, #56]	; (80067a4 <f_open+0x528>)
 800676c:	5299      	strh	r1, [r3, r2]
		}
	}

	LEAVE_FF(dj.fs, res);
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <f_open+0x508>)
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	781b      	ldrb	r3, [r3, #0]
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <f_open+0x52c>)
 800677a:	449d      	add	sp, r3
 800677c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	fffffbaf 	.word	0xfffffbaf
 8006784:	00000457 	.word	0x00000457
 8006788:	fffffbc8 	.word	0xfffffbc8
 800678c:	0000042c 	.word	0x0000042c
 8006790:	0000041c 	.word	0x0000041c
 8006794:	00000406 	.word	0x00000406
 8006798:	00000407 	.word	0x00000407
 800679c:	0000040c 	.word	0x0000040c
 80067a0:	00000424 	.word	0x00000424
 80067a4:	00000404 	.word	0x00000404
 80067a8:	0000045c 	.word	0x0000045c

080067ac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80067ac:	b5b0      	push	{r4, r5, r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80067c4:	2517      	movs	r5, #23
 80067c6:	197c      	adds	r4, r7, r5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	0018      	movs	r0, r3
 80067cc:	f7ff fcc8 	bl	8006160 <validate>
 80067d0:	0003      	movs	r3, r0
 80067d2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80067d4:	197b      	adds	r3, r7, r5
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <f_write+0x36>
 80067dc:	197b      	adds	r3, r7, r5
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	e20b      	b.n	8006bfa <f_write+0x44e>
	if (fp->err)							/* Check error */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4ac0      	ldr	r2, [pc, #768]	; (8006ae8 <f_write+0x33c>)
 80067e6:	5c9b      	ldrb	r3, [r3, r2]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4abe      	ldr	r2, [pc, #760]	; (8006ae8 <f_write+0x33c>)
 80067f0:	5c9b      	ldrb	r3, [r3, r2]
 80067f2:	e202      	b.n	8006bfa <f_write+0x44e>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4abd      	ldr	r2, [pc, #756]	; (8006aec <f_write+0x340>)
 80067f8:	5c9b      	ldrb	r3, [r3, r2]
 80067fa:	001a      	movs	r2, r3
 80067fc:	2302      	movs	r3, #2
 80067fe:	4013      	ands	r3, r2
 8006800:	d101      	bne.n	8006806 <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006802:	2307      	movs	r3, #7
 8006804:	e1f9      	b.n	8006bfa <f_write+0x44e>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	2381      	movs	r3, #129	; 0x81
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	58d2      	ldr	r2, [r2, r3]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	18d2      	adds	r2, r2, r3
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	2381      	movs	r3, #129	; 0x81
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	58cb      	ldr	r3, [r1, r3]
 800681a:	429a      	cmp	r2, r3
 800681c:	d300      	bcc.n	8006820 <f_write+0x74>
 800681e:	e1cc      	b.n	8006bba <f_write+0x40e>
 8006820:	2300      	movs	r3, #0
 8006822:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006824:	e1c9      	b.n	8006bba <f_write+0x40e>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	2381      	movs	r3, #129	; 0x81
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	58d0      	ldr	r0, [r2, r3]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	2380      	movs	r3, #128	; 0x80
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	58d3      	ldr	r3, [r2, r3]
 8006836:	4aae      	ldr	r2, [pc, #696]	; (8006af0 <f_write+0x344>)
 8006838:	5a9b      	ldrh	r3, [r3, r2]
 800683a:	0019      	movs	r1, r3
 800683c:	f7f9 fcea 	bl	8000214 <__aeabi_uidivmod>
 8006840:	1e0b      	subs	r3, r1, #0
 8006842:	d000      	beq.n	8006846 <f_write+0x9a>
 8006844:	e165      	b.n	8006b12 <f_write+0x366>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	2381      	movs	r3, #129	; 0x81
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	58d0      	ldr	r0, [r2, r3]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	58d3      	ldr	r3, [r2, r3]
 8006856:	4aa6      	ldr	r2, [pc, #664]	; (8006af0 <f_write+0x344>)
 8006858:	5a9b      	ldrh	r3, [r3, r2]
 800685a:	0019      	movs	r1, r3
 800685c:	f7f9 fc54 	bl	8000108 <__udivsi3>
 8006860:	0003      	movs	r3, r0
 8006862:	b2da      	uxtb	r2, r3
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	2380      	movs	r3, #128	; 0x80
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	58cb      	ldr	r3, [r1, r3]
 800686c:	49a1      	ldr	r1, [pc, #644]	; (8006af4 <f_write+0x348>)
 800686e:	5c5b      	ldrb	r3, [r3, r1]
 8006870:	3b01      	subs	r3, #1
 8006872:	b2d9      	uxtb	r1, r3
 8006874:	2016      	movs	r0, #22
 8006876:	183b      	adds	r3, r7, r0
 8006878:	400a      	ands	r2, r1
 800687a:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 800687c:	183b      	adds	r3, r7, r0
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d15b      	bne.n	800693c <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	2381      	movs	r3, #129	; 0x81
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	58d3      	ldr	r3, [r2, r3]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d112      	bne.n	80068b6 <f_write+0x10a>
					clst = fp->sclust;		/* Follow from the origin */
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	2382      	movs	r3, #130	; 0x82
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	58d3      	ldr	r3, [r2, r3]
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	d128      	bne.n	80068f2 <f_write+0x146>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	58d3      	ldr	r3, [r2, r3]
 80068a8:	2100      	movs	r1, #0
 80068aa:	0018      	movs	r0, r3
 80068ac:	f7fd fe06 	bl	80044bc <create_chain>
 80068b0:	0003      	movs	r3, r0
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
 80068b4:	e01d      	b.n	80068f2 <f_write+0x146>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4a8f      	ldr	r2, [pc, #572]	; (8006af8 <f_write+0x34c>)
 80068ba:	589b      	ldr	r3, [r3, r2]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <f_write+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	2381      	movs	r3, #129	; 0x81
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	58d2      	ldr	r2, [r2, r3]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	0011      	movs	r1, r2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7fd fea9 	bl	8004624 <clmt_clust>
 80068d2:	0003      	movs	r3, r0
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
 80068d6:	e00c      	b.n	80068f2 <f_write+0x146>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	2380      	movs	r3, #128	; 0x80
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	58d2      	ldr	r2, [r2, r3]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4986      	ldr	r1, [pc, #536]	; (8006afc <f_write+0x350>)
 80068e4:	585b      	ldr	r3, [r3, r1]
 80068e6:	0019      	movs	r1, r3
 80068e8:	0010      	movs	r0, r2
 80068ea:	f7fd fde7 	bl	80044bc <create_chain>
 80068ee:	0003      	movs	r3, r0
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d100      	bne.n	80068fa <f_write+0x14e>
 80068f8:	e164      	b.n	8006bc4 <f_write+0x418>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d105      	bne.n	800690c <f_write+0x160>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a79      	ldr	r2, [pc, #484]	; (8006ae8 <f_write+0x33c>)
 8006904:	2102      	movs	r1, #2
 8006906:	5499      	strb	r1, [r3, r2]
 8006908:	2302      	movs	r3, #2
 800690a:	e176      	b.n	8006bfa <f_write+0x44e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	3301      	adds	r3, #1
 8006910:	d105      	bne.n	800691e <f_write+0x172>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a74      	ldr	r2, [pc, #464]	; (8006ae8 <f_write+0x33c>)
 8006916:	2101      	movs	r1, #1
 8006918:	5499      	strb	r1, [r3, r2]
 800691a:	2301      	movs	r3, #1
 800691c:	e16d      	b.n	8006bfa <f_write+0x44e>
				fp->clust = clst;			/* Update current cluster */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4976      	ldr	r1, [pc, #472]	; (8006afc <f_write+0x350>)
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	505a      	str	r2, [r3, r1]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	2382      	movs	r3, #130	; 0x82
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	58d3      	ldr	r3, [r2, r3]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <f_write+0x190>
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	2382      	movs	r3, #130	; 0x82
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800693a:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a6b      	ldr	r2, [pc, #428]	; (8006aec <f_write+0x340>)
 8006940:	5c9b      	ldrb	r3, [r3, r2]
 8006942:	001a      	movs	r2, r3
 8006944:	2340      	movs	r3, #64	; 0x40
 8006946:	4013      	ands	r3, r2
 8006948:	d01e      	beq.n	8006988 <f_write+0x1dc>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	58d3      	ldr	r3, [r2, r3]
 8006952:	4a6b      	ldr	r2, [pc, #428]	; (8006b00 <f_write+0x354>)
 8006954:	5c98      	ldrb	r0, [r3, r2]
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	2383      	movs	r3, #131	; 0x83
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	58d2      	ldr	r2, [r2, r3]
 8006960:	2301      	movs	r3, #1
 8006962:	f7fc fec5 	bl	80036f0 <disk_write>
 8006966:	1e03      	subs	r3, r0, #0
 8006968:	d005      	beq.n	8006976 <f_write+0x1ca>
					ABORT(fp->fs, FR_DISK_ERR);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a5e      	ldr	r2, [pc, #376]	; (8006ae8 <f_write+0x33c>)
 800696e:	2101      	movs	r1, #1
 8006970:	5499      	strb	r1, [r3, r2]
 8006972:	2301      	movs	r3, #1
 8006974:	e141      	b.n	8006bfa <f_write+0x44e>
				fp->flag &= ~FA__DIRTY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a5c      	ldr	r2, [pc, #368]	; (8006aec <f_write+0x340>)
 800697a:	5c9b      	ldrb	r3, [r3, r2]
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	4393      	bics	r3, r2
 8006980:	b2d9      	uxtb	r1, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a59      	ldr	r2, [pc, #356]	; (8006aec <f_write+0x340>)
 8006986:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	2380      	movs	r3, #128	; 0x80
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	58d2      	ldr	r2, [r2, r3]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	495a      	ldr	r1, [pc, #360]	; (8006afc <f_write+0x350>)
 8006994:	585b      	ldr	r3, [r3, r1]
 8006996:	0019      	movs	r1, r3
 8006998:	0010      	movs	r0, r2
 800699a:	f7fd fa95 	bl	8003ec8 <clust2sect>
 800699e:	0003      	movs	r3, r0
 80069a0:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <f_write+0x208>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a4f      	ldr	r2, [pc, #316]	; (8006ae8 <f_write+0x33c>)
 80069ac:	2102      	movs	r1, #2
 80069ae:	5499      	strb	r1, [r3, r2]
 80069b0:	2302      	movs	r3, #2
 80069b2:	e122      	b.n	8006bfa <f_write+0x44e>
			sect += csect;
 80069b4:	2416      	movs	r4, #22
 80069b6:	193b      	adds	r3, r7, r4
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	18d3      	adds	r3, r2, r3
 80069be:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	2380      	movs	r3, #128	; 0x80
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	58d3      	ldr	r3, [r2, r3]
 80069c8:	4a49      	ldr	r2, [pc, #292]	; (8006af0 <f_write+0x344>)
 80069ca:	5a9b      	ldrh	r3, [r3, r2]
 80069cc:	0019      	movs	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7f9 fb9a 	bl	8000108 <__udivsi3>
 80069d4:	0003      	movs	r3, r0
 80069d6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d060      	beq.n	8006aa0 <f_write+0x2f4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80069de:	0020      	movs	r0, r4
 80069e0:	183b      	adds	r3, r7, r0
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	68f9      	ldr	r1, [r7, #12]
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	00d2      	lsls	r2, r2, #3
 80069ee:	588a      	ldr	r2, [r1, r2]
 80069f0:	4940      	ldr	r1, [pc, #256]	; (8006af4 <f_write+0x348>)
 80069f2:	5c52      	ldrb	r2, [r2, r1]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d90a      	bls.n	8006a0e <f_write+0x262>
					cc = fp->fs->csize - csect;
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	2380      	movs	r3, #128	; 0x80
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	58d3      	ldr	r3, [r2, r3]
 8006a00:	4a3c      	ldr	r2, [pc, #240]	; (8006af4 <f_write+0x348>)
 8006a02:	5c9b      	ldrb	r3, [r3, r2]
 8006a04:	001a      	movs	r2, r3
 8006a06:	183b      	adds	r3, r7, r0
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	58d3      	ldr	r3, [r2, r3]
 8006a16:	4a3a      	ldr	r2, [pc, #232]	; (8006b00 <f_write+0x354>)
 8006a18:	5c98      	ldrb	r0, [r3, r2]
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	69b9      	ldr	r1, [r7, #24]
 8006a20:	f7fc fe66 	bl	80036f0 <disk_write>
 8006a24:	1e03      	subs	r3, r0, #0
 8006a26:	d005      	beq.n	8006a34 <f_write+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4a2f      	ldr	r2, [pc, #188]	; (8006ae8 <f_write+0x33c>)
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	5499      	strb	r1, [r3, r2]
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0e2      	b.n	8006bfa <f_write+0x44e>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	2383      	movs	r3, #131	; 0x83
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	58d2      	ldr	r2, [r2, r3]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d921      	bls.n	8006a8a <f_write+0x2de>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	2383      	movs	r3, #131	; 0x83
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	58d2      	ldr	r2, [r2, r3]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	2280      	movs	r2, #128	; 0x80
 8006a58:	00d2      	lsls	r2, r2, #3
 8006a5a:	588a      	ldr	r2, [r1, r2]
 8006a5c:	4924      	ldr	r1, [pc, #144]	; (8006af0 <f_write+0x344>)
 8006a5e:	5a52      	ldrh	r2, [r2, r1]
 8006a60:	4353      	muls	r3, r2
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	18d1      	adds	r1, r2, r3
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	2380      	movs	r3, #128	; 0x80
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	58d3      	ldr	r3, [r2, r3]
 8006a6e:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <f_write+0x344>)
 8006a70:	5a9b      	ldrh	r3, [r3, r2]
 8006a72:	001a      	movs	r2, r3
 8006a74:	f7fc fe8c 	bl	8003790 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <f_write+0x340>)
 8006a7c:	5c9b      	ldrb	r3, [r3, r2]
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	4393      	bics	r3, r2
 8006a82:	b2d9      	uxtb	r1, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a19      	ldr	r2, [pc, #100]	; (8006aec <f_write+0x340>)
 8006a88:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	2380      	movs	r3, #128	; 0x80
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	58d3      	ldr	r3, [r2, r3]
 8006a92:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <f_write+0x344>)
 8006a94:	5a9b      	ldrh	r3, [r3, r2]
 8006a96:	001a      	movs	r2, r3
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4353      	muls	r3, r2
 8006a9c:	623b      	str	r3, [r7, #32]
				continue;
 8006a9e:	e074      	b.n	8006b8a <f_write+0x3de>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	2383      	movs	r3, #131	; 0x83
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	58d3      	ldr	r3, [r2, r3]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d02c      	beq.n	8006b08 <f_write+0x35c>
				if (fp->fptr < fp->fsize &&
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	2381      	movs	r3, #129	; 0x81
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	58d2      	ldr	r2, [r2, r3]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4912      	ldr	r1, [pc, #72]	; (8006b04 <f_write+0x358>)
 8006aba:	585b      	ldr	r3, [r3, r1]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d223      	bcs.n	8006b08 <f_write+0x35c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	58d3      	ldr	r3, [r2, r3]
 8006ac8:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <f_write+0x354>)
 8006aca:	5c98      	ldrb	r0, [r3, r2]
 8006acc:	68f9      	ldr	r1, [r7, #12]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f7fc fde5 	bl	80036a0 <disk_read>
 8006ad6:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8006ad8:	d016      	beq.n	8006b08 <f_write+0x35c>
						ABORT(fp->fs, FR_DISK_ERR);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a02      	ldr	r2, [pc, #8]	; (8006ae8 <f_write+0x33c>)
 8006ade:	2101      	movs	r1, #1
 8006ae0:	5499      	strb	r1, [r3, r2]
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e089      	b.n	8006bfa <f_write+0x44e>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	00000407 	.word	0x00000407
 8006aec:	00000406 	.word	0x00000406
 8006af0:	0000040a 	.word	0x0000040a
 8006af4:	00000402 	.word	0x00000402
 8006af8:	00000424 	.word	0x00000424
 8006afc:	00000414 	.word	0x00000414
 8006b00:	00000401 	.word	0x00000401
 8006b04:	0000040c 	.word	0x0000040c
			}
#endif
			fp->dsect = sect;
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	2383      	movs	r3, #131	; 0x83
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	6939      	ldr	r1, [r7, #16]
 8006b10:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	58d3      	ldr	r3, [r2, r3]
 8006b1a:	4a3a      	ldr	r2, [pc, #232]	; (8006c04 <f_write+0x458>)
 8006b1c:	5a9b      	ldrh	r3, [r3, r2]
 8006b1e:	001c      	movs	r4, r3
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	2381      	movs	r3, #129	; 0x81
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	58d0      	ldr	r0, [r2, r3]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	2380      	movs	r3, #128	; 0x80
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	58d3      	ldr	r3, [r2, r3]
 8006b30:	4a34      	ldr	r2, [pc, #208]	; (8006c04 <f_write+0x458>)
 8006b32:	5a9b      	ldrh	r3, [r3, r2]
 8006b34:	0019      	movs	r1, r3
 8006b36:	f7f9 fb6d 	bl	8000214 <__aeabi_uidivmod>
 8006b3a:	000b      	movs	r3, r1
 8006b3c:	1ae3      	subs	r3, r4, r3
 8006b3e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006b40:	6a3a      	ldr	r2, [r7, #32]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d901      	bls.n	8006b4c <f_write+0x3a0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	2381      	movs	r3, #129	; 0x81
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	58d0      	ldr	r0, [r2, r3]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	2380      	movs	r3, #128	; 0x80
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	58d3      	ldr	r3, [r2, r3]
 8006b5c:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <f_write+0x458>)
 8006b5e:	5a9b      	ldrh	r3, [r3, r2]
 8006b60:	0019      	movs	r1, r3
 8006b62:	f7f9 fb57 	bl	8000214 <__aeabi_uidivmod>
 8006b66:	000b      	movs	r3, r1
 8006b68:	001a      	movs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	189b      	adds	r3, r3, r2
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	69b9      	ldr	r1, [r7, #24]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7fc fe0c 	bl	8003790 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <f_write+0x45c>)
 8006b7c:	5c9b      	ldrb	r3, [r3, r2]
 8006b7e:	2240      	movs	r2, #64	; 0x40
 8006b80:	4313      	orrs	r3, r2
 8006b82:	b2d9      	uxtb	r1, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a20      	ldr	r2, [pc, #128]	; (8006c08 <f_write+0x45c>)
 8006b88:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	18d3      	adds	r3, r2, r3
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	2381      	movs	r3, #129	; 0x81
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	58d2      	ldr	r2, [r2, r3]
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	18d1      	adds	r1, r2, r3
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	2381      	movs	r3, #129	; 0x81
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	50d1      	str	r1, [r2, r3]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	18d2      	adds	r2, r2, r3
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d000      	beq.n	8006bc2 <f_write+0x416>
 8006bc0:	e631      	b.n	8006826 <f_write+0x7a>
 8006bc2:	e000      	b.n	8006bc6 <f_write+0x41a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006bc4:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	2381      	movs	r3, #129	; 0x81
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	58d2      	ldr	r2, [r2, r3]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	490e      	ldr	r1, [pc, #56]	; (8006c0c <f_write+0x460>)
 8006bd2:	585b      	ldr	r3, [r3, r1]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d906      	bls.n	8006be6 <f_write+0x43a>
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	2381      	movs	r3, #129	; 0x81
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	58d2      	ldr	r2, [r2, r3]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	490a      	ldr	r1, [pc, #40]	; (8006c0c <f_write+0x460>)
 8006be4:	505a      	str	r2, [r3, r1]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4a07      	ldr	r2, [pc, #28]	; (8006c08 <f_write+0x45c>)
 8006bea:	5c9b      	ldrb	r3, [r3, r2]
 8006bec:	2220      	movs	r2, #32
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b2d9      	uxtb	r1, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <f_write+0x45c>)
 8006bf6:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b00a      	add	sp, #40	; 0x28
 8006c00:	bdb0      	pop	{r4, r5, r7, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	0000040a 	.word	0x0000040a
 8006c08:	00000406 	.word	0x00000406
 8006c0c:	0000040c 	.word	0x0000040c

08006c10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006c10:	b5b0      	push	{r4, r5, r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006c18:	2517      	movs	r5, #23
 8006c1a:	197c      	adds	r4, r7, r5
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7ff fa9e 	bl	8006160 <validate>
 8006c24:	0003      	movs	r3, r0
 8006c26:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006c28:	197b      	adds	r3, r7, r5
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d000      	beq.n	8006c32 <f_sync+0x22>
 8006c30:	e0b4      	b.n	8006d9c <f_sync+0x18c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a5d      	ldr	r2, [pc, #372]	; (8006dac <f_sync+0x19c>)
 8006c36:	5c9b      	ldrb	r3, [r3, r2]
 8006c38:	001a      	movs	r2, r3
 8006c3a:	2320      	movs	r3, #32
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d100      	bne.n	8006c42 <f_sync+0x32>
 8006c40:	e0ac      	b.n	8006d9c <f_sync+0x18c>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a59      	ldr	r2, [pc, #356]	; (8006dac <f_sync+0x19c>)
 8006c46:	5c9b      	ldrb	r3, [r3, r2]
 8006c48:	001a      	movs	r2, r3
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d01a      	beq.n	8006c86 <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	2380      	movs	r3, #128	; 0x80
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	58d3      	ldr	r3, [r2, r3]
 8006c58:	4a55      	ldr	r2, [pc, #340]	; (8006db0 <f_sync+0x1a0>)
 8006c5a:	5c98      	ldrb	r0, [r3, r2]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	2383      	movs	r3, #131	; 0x83
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	58d2      	ldr	r2, [r2, r3]
 8006c66:	2301      	movs	r3, #1
 8006c68:	f7fc fd42 	bl	80036f0 <disk_write>
 8006c6c:	1e03      	subs	r3, r0, #0
 8006c6e:	d001      	beq.n	8006c74 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006c70:	2301      	movs	r3, #1
 8006c72:	e096      	b.n	8006da2 <f_sync+0x192>
				fp->flag &= ~FA__DIRTY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a4d      	ldr	r2, [pc, #308]	; (8006dac <f_sync+0x19c>)
 8006c78:	5c9b      	ldrb	r3, [r3, r2]
 8006c7a:	2240      	movs	r2, #64	; 0x40
 8006c7c:	4393      	bics	r3, r2
 8006c7e:	b2d9      	uxtb	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a4a      	ldr	r2, [pc, #296]	; (8006dac <f_sync+0x19c>)
 8006c84:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	58d2      	ldr	r2, [r2, r3]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4948      	ldr	r1, [pc, #288]	; (8006db4 <f_sync+0x1a4>)
 8006c92:	585b      	ldr	r3, [r3, r1]
 8006c94:	2517      	movs	r5, #23
 8006c96:	197c      	adds	r4, r7, r5
 8006c98:	0019      	movs	r1, r3
 8006c9a:	0010      	movs	r0, r2
 8006c9c:	f7fd f804 	bl	8003ca8 <move_window>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8006ca4:	002c      	movs	r4, r5
 8006ca6:	193b      	adds	r3, r7, r4
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d176      	bne.n	8006d9c <f_sync+0x18c>
				dir = fp->dir_ptr;
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	2384      	movs	r3, #132	; 0x84
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	58d3      	ldr	r3, [r2, r3]
 8006cb6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	330b      	adds	r3, #11
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	330b      	adds	r3, #11
 8006cc2:	2120      	movs	r1, #32
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a3a      	ldr	r2, [pc, #232]	; (8006db8 <f_sync+0x1a8>)
 8006cce:	589a      	ldr	r2, [r3, r2]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	331c      	adds	r3, #28
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a37      	ldr	r2, [pc, #220]	; (8006db8 <f_sync+0x1a8>)
 8006cdc:	589b      	ldr	r3, [r3, r2]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	331d      	adds	r3, #29
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a32      	ldr	r2, [pc, #200]	; (8006db8 <f_sync+0x1a8>)
 8006cf0:	589b      	ldr	r3, [r3, r2]
 8006cf2:	0c1a      	lsrs	r2, r3, #16
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	331e      	adds	r3, #30
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <f_sync+0x1a8>)
 8006d00:	589b      	ldr	r3, [r3, r2]
 8006d02:	0e1a      	lsrs	r2, r3, #24
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	331f      	adds	r3, #31
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	2382      	movs	r3, #130	; 0x82
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	58d2      	ldr	r2, [r2, r3]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	0011      	movs	r1, r2
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7fd ff68 	bl	8004bee <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006d1e:	f7fc fbff 	bl	8003520 <get_fattime>
 8006d22:	0003      	movs	r3, r0
 8006d24:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3316      	adds	r3, #22
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	3317      	adds	r3, #23
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	0c1a      	lsrs	r2, r3, #16
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	3318      	adds	r3, #24
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0e1a      	lsrs	r2, r3, #24
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3319      	adds	r3, #25
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	3312      	adds	r3, #18
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	3313      	adds	r3, #19
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a10      	ldr	r2, [pc, #64]	; (8006dac <f_sync+0x19c>)
 8006d6c:	5c9b      	ldrb	r3, [r3, r2]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	4393      	bics	r3, r2
 8006d72:	b2d9      	uxtb	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <f_sync+0x19c>)
 8006d78:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	58d3      	ldr	r3, [r2, r3]
 8006d82:	4a0e      	ldr	r2, [pc, #56]	; (8006dbc <f_sync+0x1ac>)
 8006d84:	2101      	movs	r1, #1
 8006d86:	5499      	strb	r1, [r3, r2]
				res = sync_fs(fp->fs);
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	2380      	movs	r3, #128	; 0x80
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	58d3      	ldr	r3, [r2, r3]
 8006d90:	193c      	adds	r4, r7, r4
 8006d92:	0018      	movs	r0, r3
 8006d94:	f7fc ffc2 	bl	8003d1c <sync_fs>
 8006d98:	0003      	movs	r3, r0
 8006d9a:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006d9c:	2317      	movs	r3, #23
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	781b      	ldrb	r3, [r3, #0]
}
 8006da2:	0018      	movs	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b006      	add	sp, #24
 8006da8:	bdb0      	pop	{r4, r5, r7, pc}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	00000406 	.word	0x00000406
 8006db0:	00000401 	.word	0x00000401
 8006db4:	0000041c 	.word	0x0000041c
 8006db8:	0000040c 	.word	0x0000040c
 8006dbc:	00000404 	.word	0x00000404

08006dc0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006dc0:	b5b0      	push	{r4, r5, r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006dc8:	250f      	movs	r5, #15
 8006dca:	197c      	adds	r4, r7, r5
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7ff ff1e 	bl	8006c10 <f_sync>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8006dd8:	197b      	adds	r3, r7, r5
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d11f      	bne.n	8006e20 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006de0:	197c      	adds	r4, r7, r5
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7ff f9bb 	bl	8006160 <validate>
 8006dea:	0003      	movs	r3, r0
 8006dec:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006dee:	0029      	movs	r1, r5
 8006df0:	187b      	adds	r3, r7, r1
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d113      	bne.n	8006e20 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	2385      	movs	r3, #133	; 0x85
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	58d3      	ldr	r3, [r2, r3]
 8006e00:	000d      	movs	r5, r1
 8006e02:	187c      	adds	r4, r7, r1
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7fc fe7d 	bl	8003b04 <dec_lock>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8006e0e:	197b      	adds	r3, r7, r5
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e20:	230f      	movs	r3, #15
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	781b      	ldrb	r3, [r3, #0]
}
 8006e26:	0018      	movs	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b004      	add	sp, #16
 8006e2c:	bdb0      	pop	{r4, r5, r7, pc}

08006e2e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	000a      	movs	r2, r1
 8006e38:	1cfb      	adds	r3, r7, #3
 8006e3a:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006e3c:	1cfb      	adds	r3, r7, #3
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b0a      	cmp	r3, #10
 8006e42:	d104      	bne.n	8006e4e <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	210d      	movs	r1, #13
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f7ff fff0 	bl	8006e2e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	db26      	blt.n	8006ea8 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	60fa      	str	r2, [r7, #12]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	18d3      	adds	r3, r2, r3
 8006e64:	1cfa      	adds	r2, r7, #3
 8006e66:	7812      	ldrb	r2, [r2, #0]
 8006e68:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b3c      	cmp	r3, #60	; 0x3c
 8006e6e:	dd12      	ble.n	8006e96 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	330c      	adds	r3, #12
 8006e78:	0019      	movs	r1, r3
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	f7ff fc94 	bl	80067ac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d101      	bne.n	8006e90 <putc_bfd+0x62>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e001      	b.n	8006e94 <putc_bfd+0x66>
 8006e90:	2301      	movs	r3, #1
 8006e92:	425b      	negs	r3, r3
 8006e94:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	609a      	str	r2, [r3, #8]
 8006ea6:	e000      	b.n	8006eaa <putc_bfd+0x7c>
	if (i < 0) return;
 8006ea8:	46c0      	nop			; (mov r8, r8)
}
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b004      	add	sp, #16
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006eb0:	b5b0      	push	{r4, r5, r7, lr}
 8006eb2:	b096      	sub	sp, #88	; 0x58
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006eba:	210c      	movs	r1, #12
 8006ebc:	187b      	adds	r3, r7, r1
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	601a      	str	r2, [r3, #0]
	pb.nchr = pb.idx = 0;
 8006ec2:	187b      	adds	r3, r7, r1
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	605a      	str	r2, [r3, #4]
 8006ec8:	187b      	adds	r3, r7, r1
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	187b      	adds	r3, r7, r1
 8006ece:	609a      	str	r2, [r3, #8]

	while (*str)			/* Put the string */
 8006ed0:	e009      	b.n	8006ee6 <f_puts+0x36>
		putc_bfd(&pb, *str++);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	230c      	movs	r3, #12
 8006edc:	18fb      	adds	r3, r7, r3
 8006ede:	0011      	movs	r1, r2
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7ff ffa4 	bl	8006e2e <putc_bfd>
	while (*str)			/* Put the string */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f1      	bne.n	8006ed2 <f_puts+0x22>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006eee:	250c      	movs	r5, #12
 8006ef0:	197b      	adds	r3, r7, r5
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	db17      	blt.n	8006f28 <f_puts+0x78>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006ef8:	197b      	adds	r3, r7, r5
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	197b      	adds	r3, r7, r5
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	001c      	movs	r4, r3
 8006f02:	2308      	movs	r3, #8
 8006f04:	18fa      	adds	r2, r7, r3
 8006f06:	197b      	adds	r3, r7, r5
 8006f08:	330c      	adds	r3, #12
 8006f0a:	0019      	movs	r1, r3
 8006f0c:	0013      	movs	r3, r2
 8006f0e:	0022      	movs	r2, r4
 8006f10:	f7ff fc4c 	bl	80067ac <f_write>
 8006f14:	1e03      	subs	r3, r0, #0
 8006f16:	d107      	bne.n	8006f28 <f_puts+0x78>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006f18:	197b      	adds	r3, r7, r5
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d102      	bne.n	8006f28 <f_puts+0x78>
 8006f22:	197b      	adds	r3, r7, r5
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	e001      	b.n	8006f2c <f_puts+0x7c>
	return EOF;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	425b      	negs	r3, r3
}
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b016      	add	sp, #88	; 0x58
 8006f32:	bdb0      	pop	{r4, r5, r7, pc}

08006f34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	1dfb      	adds	r3, r7, #7
 8006f40:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8006f42:	2417      	movs	r4, #23
 8006f44:	193b      	adds	r3, r7, r4
 8006f46:	2201      	movs	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8006f4a:	2016      	movs	r0, #22
 8006f4c:	183b      	adds	r3, r7, r0
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8006f52:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f54:	7a5b      	ldrb	r3, [r3, #9]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d836      	bhi.n	8006fca <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f5e:	7a5b      	ldrb	r3, [r3, #9]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	001a      	movs	r2, r3
 8006f64:	4b1c      	ldr	r3, [pc, #112]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f66:	2100      	movs	r1, #0
 8006f68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f6c:	7a5b      	ldrb	r3, [r3, #9]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	4a19      	ldr	r2, [pc, #100]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	18d3      	adds	r3, r2, r3
 8006f76:	3304      	adds	r3, #4
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8006f7c:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f7e:	7a5b      	ldrb	r3, [r3, #9]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	001a      	movs	r2, r3
 8006f84:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f86:	189b      	adds	r3, r3, r2
 8006f88:	1dfa      	adds	r2, r7, #7
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f8e:	4b12      	ldr	r3, [pc, #72]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f90:	7a5b      	ldrb	r3, [r3, #9]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	b2d1      	uxtb	r1, r2
 8006f98:	4a0f      	ldr	r2, [pc, #60]	; (8006fd8 <FATFS_LinkDriverEx+0xa4>)
 8006f9a:	7251      	strb	r1, [r2, #9]
 8006f9c:	183a      	adds	r2, r7, r0
 8006f9e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8006fa0:	183b      	adds	r3, r7, r0
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	3330      	adds	r3, #48	; 0x30
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	223a      	movs	r2, #58	; 0x3a
 8006fb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3302      	adds	r3, #2
 8006fb8:	222f      	movs	r2, #47	; 0x2f
 8006fba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006fc4:	193b      	adds	r3, r7, r4
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8006fca:	2317      	movs	r3, #23
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	781b      	ldrb	r3, [r3, #0]
}
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	b007      	add	sp, #28
 8006fd6:	bd90      	pop	{r4, r7, pc}
 8006fd8:	20000bc0 	.word	0x20000bc0

08006fdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7ff ffa1 	bl	8006f34 <FATFS_LinkDriverEx>
 8006ff2:	0003      	movs	r3, r0
}
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b002      	add	sp, #8
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	0002      	movs	r2, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	1dbb      	adds	r3, r7, #6
 8007008:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800700a:	1dbb      	adds	r3, r7, #6
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	2b7f      	cmp	r3, #127	; 0x7f
 8007010:	d805      	bhi.n	800701e <ff_convert+0x22>
		c = chr;
 8007012:	230e      	movs	r3, #14
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	1dba      	adds	r2, r7, #6
 8007018:	8812      	ldrh	r2, [r2, #0]
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	e037      	b.n	800708e <ff_convert+0x92>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d010      	beq.n	8007046 <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007024:	1dbb      	adds	r3, r7, #6
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	2bff      	cmp	r3, #255	; 0xff
 800702a:	d807      	bhi.n	800703c <ff_convert+0x40>
 800702c:	1dbb      	adds	r3, r7, #6
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	3b80      	subs	r3, #128	; 0x80
 8007032:	001a      	movs	r2, r3
 8007034:	4b19      	ldr	r3, [pc, #100]	; (800709c <ff_convert+0xa0>)
 8007036:	0052      	lsls	r2, r2, #1
 8007038:	5ad2      	ldrh	r2, [r2, r3]
 800703a:	e000      	b.n	800703e <ff_convert+0x42>
 800703c:	2200      	movs	r2, #0
 800703e:	230e      	movs	r3, #14
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	e023      	b.n	800708e <ff_convert+0x92>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007046:	230e      	movs	r3, #14
 8007048:	18fb      	adds	r3, r7, r3
 800704a:	2200      	movs	r2, #0
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e00e      	b.n	800706e <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8007050:	210e      	movs	r1, #14
 8007052:	187b      	adds	r3, r7, r1
 8007054:	881a      	ldrh	r2, [r3, #0]
 8007056:	4b11      	ldr	r3, [pc, #68]	; (800709c <ff_convert+0xa0>)
 8007058:	0052      	lsls	r2, r2, #1
 800705a:	5ad3      	ldrh	r3, [r2, r3]
 800705c:	1dba      	adds	r2, r7, #6
 800705e:	8812      	ldrh	r2, [r2, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d00a      	beq.n	800707a <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8007064:	187b      	adds	r3, r7, r1
 8007066:	881a      	ldrh	r2, [r3, #0]
 8007068:	187b      	adds	r3, r7, r1
 800706a:	3201      	adds	r2, #1
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	230e      	movs	r3, #14
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	2b7f      	cmp	r3, #127	; 0x7f
 8007076:	d9eb      	bls.n	8007050 <ff_convert+0x54>
 8007078:	e000      	b.n	800707c <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800707a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800707c:	210e      	movs	r1, #14
 800707e:	187b      	adds	r3, r7, r1
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	3380      	adds	r3, #128	; 0x80
 8007084:	b29a      	uxth	r2, r3
 8007086:	187b      	adds	r3, r7, r1
 8007088:	21ff      	movs	r1, #255	; 0xff
 800708a:	400a      	ands	r2, r1
 800708c:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800708e:	230e      	movs	r3, #14
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	881b      	ldrh	r3, [r3, #0]
}
 8007094:	0018      	movs	r0, r3
 8007096:	46bd      	mov	sp, r7
 8007098:	b004      	add	sp, #16
 800709a:	bd80      	pop	{r7, pc}
 800709c:	080072d4 	.word	0x080072d4

080070a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	0002      	movs	r2, r0
 80070a8:	1dbb      	adds	r3, r7, #6
 80070aa:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e002      	b.n	80070b8 <ff_wtoupper+0x18>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <ff_wtoupper+0x58>)
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	0052      	lsls	r2, r2, #1
 80070be:	5ad3      	ldrh	r3, [r2, r3]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <ff_wtoupper+0x34>
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <ff_wtoupper+0x58>)
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	0052      	lsls	r2, r2, #1
 80070ca:	5ad3      	ldrh	r3, [r2, r3]
 80070cc:	1dba      	adds	r2, r7, #6
 80070ce:	8812      	ldrh	r2, [r2, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d1ee      	bne.n	80070b2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80070d4:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <ff_wtoupper+0x58>)
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	0052      	lsls	r2, r2, #1
 80070da:	5ad3      	ldrh	r3, [r2, r3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <ff_wtoupper+0x4a>
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <ff_wtoupper+0x5c>)
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	0052      	lsls	r2, r2, #1
 80070e6:	5ad3      	ldrh	r3, [r2, r3]
 80070e8:	e001      	b.n	80070ee <ff_wtoupper+0x4e>
 80070ea:	1dbb      	adds	r3, r7, #6
 80070ec:	881b      	ldrh	r3, [r3, #0]
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b004      	add	sp, #16
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	080073d4 	.word	0x080073d4
 80070fc:	080075b4 	.word	0x080075b4

08007100 <__libc_init_array>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	2600      	movs	r6, #0
 8007104:	4d0c      	ldr	r5, [pc, #48]	; (8007138 <__libc_init_array+0x38>)
 8007106:	4c0d      	ldr	r4, [pc, #52]	; (800713c <__libc_init_array+0x3c>)
 8007108:	1b64      	subs	r4, r4, r5
 800710a:	10a4      	asrs	r4, r4, #2
 800710c:	42a6      	cmp	r6, r4
 800710e:	d109      	bne.n	8007124 <__libc_init_array+0x24>
 8007110:	2600      	movs	r6, #0
 8007112:	f000 f821 	bl	8007158 <_init>
 8007116:	4d0a      	ldr	r5, [pc, #40]	; (8007140 <__libc_init_array+0x40>)
 8007118:	4c0a      	ldr	r4, [pc, #40]	; (8007144 <__libc_init_array+0x44>)
 800711a:	1b64      	subs	r4, r4, r5
 800711c:	10a4      	asrs	r4, r4, #2
 800711e:	42a6      	cmp	r6, r4
 8007120:	d105      	bne.n	800712e <__libc_init_array+0x2e>
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	00b3      	lsls	r3, r6, #2
 8007126:	58eb      	ldr	r3, [r5, r3]
 8007128:	4798      	blx	r3
 800712a:	3601      	adds	r6, #1
 800712c:	e7ee      	b.n	800710c <__libc_init_array+0xc>
 800712e:	00b3      	lsls	r3, r6, #2
 8007130:	58eb      	ldr	r3, [r5, r3]
 8007132:	4798      	blx	r3
 8007134:	3601      	adds	r6, #1
 8007136:	e7f2      	b.n	800711e <__libc_init_array+0x1e>
 8007138:	08007794 	.word	0x08007794
 800713c:	08007794 	.word	0x08007794
 8007140:	08007794 	.word	0x08007794
 8007144:	08007798 	.word	0x08007798

08007148 <memset>:
 8007148:	0003      	movs	r3, r0
 800714a:	1882      	adds	r2, r0, r2
 800714c:	4293      	cmp	r3, r2
 800714e:	d100      	bne.n	8007152 <memset+0xa>
 8007150:	4770      	bx	lr
 8007152:	7019      	strb	r1, [r3, #0]
 8007154:	3301      	adds	r3, #1
 8007156:	e7f9      	b.n	800714c <memset+0x4>

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
